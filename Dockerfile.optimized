# 🚀 OPTIMIZED DOCKER BUILD - MediaNest Production
# Multi-stage build optimized for performance and security
# Target: <200MB images with <5 minute build time

# 📦 Backend Dependencies Stage
FROM node:20-alpine AS backend-deps
WORKDIR /app

# Install system dependencies for native modules
RUN apk add --no-cache \
    libc6-compat \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copy backend package files
COPY backend/package*.json ./
COPY backend/prisma ./prisma/

# Install production dependencies with cache optimization
RUN npm ci --omit=dev --no-audit --no-fund --prefer-offline --legacy-peer-deps && \
    npm cache clean --force

# 🔧 Backend Build Stage
FROM node:20-alpine AS backend-build
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ libc6-compat

# Copy package files and install all dependencies for building
COPY backend/package*.json ./
COPY backend/prisma ./prisma/
RUN npm ci --no-audit --no-fund && npm cache clean --force

# Copy source and build
COPY backend/tsconfig*.json ./
COPY backend/src ./src

# Generate Prisma client and build TypeScript
RUN npx prisma generate && npm run build

# 📦 Frontend Dependencies Stage
FROM node:20-alpine AS frontend-deps
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache libc6-compat

# Copy frontend package files
COPY frontend/package*.json ./

# Install production dependencies
RUN npm ci --omit=dev --no-audit --no-fund --prefer-offline --legacy-peer-deps && \
    npm cache clean --force

# 🎨 Frontend Build Stage
FROM node:20-alpine AS frontend-build
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache libc6-compat

# Copy package files and install all dependencies
COPY frontend/package*.json ./
RUN npm ci --no-audit --no-fund && npm cache clean --force

# Copy configuration files
COPY frontend/next.config.js ./
COPY frontend/tailwind.config.ts ./
COPY frontend/postcss.config.mjs ./
COPY frontend/tsconfig.json ./

# Copy source files
COPY frontend/src ./src
COPY frontend/public ./public

# Set build environment
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build Next.js application
RUN npm run build && \
    rm -rf src/ .next/cache && \
    find .next -name "*.map" -delete 2>/dev/null || true

# 🎯 Backend Production Image
FROM node:20-alpine AS backend-production
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S medianest -u 1001 -G nodejs

# Install production runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Copy production dependencies from deps stage
COPY --from=backend-deps --chown=medianest:nodejs /app/node_modules ./node_modules

# Copy built application from build stage
COPY --from=backend-build --chown=medianest:nodejs /app/dist ./dist
COPY --from=backend-build --chown=medianest:nodejs /app/prisma ./prisma
COPY --chown=medianest:nodejs backend/package.json ./

# Create optimized entrypoint script
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/sh
set -e

# Health check endpoint
if [ "$1" = "healthcheck" ]; then
    curl -f http://localhost:3001/health || exit 1
fi

# Database migration (if needed)
if [ "$NODE_ENV" = "production" ] && [ "$RUN_MIGRATIONS" = "true" ]; then
    echo "Running database migrations..."
    npx prisma migrate deploy
fi

# Start application
exec dumb-init node dist/server.js
EOF

RUN chmod +x /app/entrypoint.sh && \
    chown medianest:nodejs /app/entrypoint.sh

# Create logs directory
RUN mkdir -p /app/logs && chown medianest:nodejs /app/logs

# Switch to non-root user
USER medianest

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/entrypoint.sh healthcheck

# Expose port
EXPOSE 3001

# Set environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=512"

# Start application
ENTRYPOINT ["/app/entrypoint.sh"]

# 🌐 Frontend Production Image
FROM node:20-alpine AS frontend-production
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Install production runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Copy built application
COPY --from=frontend-build --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=frontend-build --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=frontend-build --chown=nextjs:nodejs /app/public ./public

# Create optimized entrypoint script
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/sh
set -e

# Health check endpoint
if [ "$1" = "healthcheck" ]; then
    curl -f http://localhost:3000/api/health || exit 1
fi

# Start Next.js application
exec dumb-init node server.js
EOF

RUN chmod +x /app/entrypoint.sh && \
    chown nextjs:nodejs /app/entrypoint.sh

# Switch to non-root user
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/entrypoint.sh healthcheck

# Expose port
EXPOSE 3000

# Set environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=512"
ENV HOSTNAME="0.0.0.0"

# Start application
ENTRYPOINT ["/app/entrypoint.sh"]

# 🔧 Development Image (Multi-service)
FROM node:20-alpine AS development
WORKDIR /app

# Install development dependencies
RUN apk add --no-cache \
    git \
    curl \
    bash \
    vim \
    && rm -rf /var/cache/apk/*

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S app -u 1001 -G nodejs

# Copy all source files
COPY --chown=app:nodejs . .

# Install all dependencies (including dev)
RUN npm ci --no-audit --no-fund && \
    cd backend && npm ci --no-audit --no-fund && \
    cd ../frontend && npm ci --no-audit --no-fund && \
    cd .. && npm cache clean --force

# Create logs directory
RUN mkdir -p logs && chown app:nodejs logs

# Switch to app user
USER app

# Expose development ports
EXPOSE 3000 3001 4000

# Development command
CMD ["npm", "run", "dev"]

# 🧪 Test Image
FROM development AS test
WORKDIR /app

# Install test browsers
USER root
RUN apk add --no-cache \
    chromium \
    firefox \
    && rm -rf /var/cache/apk/*

# Set browser paths for testing
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV FIREFOX_BIN=/usr/bin/firefox

USER app

# Test command
CMD ["npm", "run", "test:all"]