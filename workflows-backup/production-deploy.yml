name: Production Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if checks fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: medianest/backend
  IMAGE_NAME_FRONTEND: medianest/frontend
  KUBE_NAMESPACE: medianest-prod

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    outputs:
      scan-results: ${{ steps.scan.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        id: scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Fail on critical vulnerabilities
        if: steps.scan.outputs.exit-code != '0' && !inputs.force_deploy
        run: |
          echo "Critical vulnerabilities found. Deployment blocked."
          exit 1

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.component }}/package-lock.json'

      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci

      - name: Run linting
        run: |
          cd ${{ matrix.component }}
          npm run lint

      - name: Run type checking
        run: |
          cd ${{ matrix.component }}
          npm run type-check

      - name: Generate Prisma client (backend only)
        if: matrix.component == 'backend'
        run: |
          cd backend
          npx prisma generate

      - name: Run unit tests
        run: |
          cd ${{ matrix.component }}
          npm run test:coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          ENCRYPTION_KEY: test-encryption-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./${{ matrix.component }}/coverage/lcov.info
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage

  build:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped')
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.frontend-meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.frontend-meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.backend-meta.outputs.tags }}
          format: 'sarif'
          output: 'backend-trivy.sarif'

      - name: Upload backend container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-trivy.sarif'
          category: 'backend-container'

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: ${{ inputs.environment || 'production' }}
      url: https://medianest.yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'

      - name: Create deployment backup
        run: |
          mkdir -p backups/pre-deploy-$(date +%Y%m%d-%H%M%S)
          kubectl get deployments -o yaml -n ${{ env.KUBE_NAMESPACE }} > backups/pre-deploy-$(date +%Y%m%d-%H%M%S)/deployments.yaml
          kubectl get configmaps -o yaml -n ${{ env.KUBE_NAMESPACE }} > backups/pre-deploy-$(date +%Y%m%d-%H%M%S)/configmaps.yaml

      - name: Database backup
        run: |
          POSTGRES_POD=$(kubectl get pods -l app=postgres -o jsonpath='{.items[0].metadata.name}' -n ${{ env.KUBE_NAMESPACE }})
          kubectl exec $POSTGRES_POD -n ${{ env.KUBE_NAMESPACE }} -- pg_dump -U ${{ secrets.DB_USER }} ${{ secrets.DB_NAME }} > backups/pre-deploy-$(date +%Y%m%d-%H%M%S)/database.sql

      - name: Update deployment manifests
        run: |
          # Update image tags in Kubernetes manifests
          sed -i 's|medianest/backend:.*|${{ needs.build.outputs.backend-image }}|g' deployment/kubernetes/backend-deployment.yaml
          sed -i 's|medianest/frontend:.*|${{ needs.build.outputs.frontend-image }}|g' deployment/kubernetes/frontend-deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          # Apply configurations
          kubectl apply -f deployment/kubernetes/namespace.yaml
          kubectl apply -f deployment/kubernetes/configmaps.yaml

          # Apply secrets (using external-secrets or sealed-secrets in production)
          kubectl apply -f deployment/kubernetes/secrets.yaml

          # Deploy database if not exists
          kubectl apply -f deployment/kubernetes/database.yaml

          # Deploy applications
          kubectl apply -f deployment/kubernetes/backend-deployment.yaml
          kubectl apply -f deployment/kubernetes/frontend-deployment.yaml

          # Deploy ingress
          kubectl apply -f deployment/kubernetes/ingress.yaml

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/medianest-backend --timeout=600s -n ${{ env.KUBE_NAMESPACE }}
          kubectl rollout status deployment/medianest-frontend --timeout=600s -n ${{ env.KUBE_NAMESPACE }}

      - name: Run deployment verification
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=medianest-backend --timeout=300s -n ${{ env.KUBE_NAMESPACE }}
          kubectl wait --for=condition=ready pod -l app=medianest-frontend --timeout=300s -n ${{ env.KUBE_NAMESPACE }}

          # Test health endpoints
          BACKEND_POD=$(kubectl get pods -l app=medianest-backend -o jsonpath='{.items[0].metadata.name}' -n ${{ env.KUBE_NAMESPACE }})
          FRONTEND_POD=$(kubectl get pods -l app=medianest-frontend -o jsonpath='{.items[0].metadata.name}' -n ${{ env.KUBE_NAMESPACE }})

          kubectl exec $BACKEND_POD -n ${{ env.KUBE_NAMESPACE }} -- curl -f http://localhost:4000/api/health
          kubectl exec $FRONTEND_POD -n ${{ env.KUBE_NAMESPACE }} -- curl -f http://localhost:3000/api/health

      - name: Run smoke tests
        run: |
          # Basic smoke tests to ensure application is working
          chmod +x ./deployment/scripts/smoke-tests.sh
          ./deployment/scripts/smoke-tests.sh

      - name: Update deployment status
        if: success()
        run: |
          kubectl annotate deployment medianest-backend deployment.kubernetes.io/deployed-by="GitHub Actions" -n ${{ env.KUBE_NAMESPACE }} --overwrite
          kubectl annotate deployment medianest-frontend deployment.kubernetes.io/deployed-by="GitHub Actions" -n ${{ env.KUBE_NAMESPACE }} --overwrite
          kubectl annotate deployment medianest-backend deployment.kubernetes.io/deployed-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" -n ${{ env.KUBE_NAMESPACE }} --overwrite
          kubectl annotate deployment medianest-frontend deployment.kubernetes.io/deployed-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" -n ${{ env.KUBE_NAMESPACE }} --overwrite

      - name: Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            MediaNest Production Deployment ${{ job.status }}
            Environment: ${{ inputs.environment || 'production' }}
            Backend Image: ${{ needs.build.outputs.backend-image }}
            Frontend Image: ${{ needs.build.outputs.frontend-image }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deploy-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring
        run: |
          # Deploy monitoring stack if not exists
          kubectl apply -f deployment/kubernetes/monitoring/

      - name: Configure alerts
        run: |
          # Update alert rules for new deployment
          kubectl apply -f deployment/kubernetes/monitoring/alert-rules.yaml

      - name: Run performance baseline
        run: |
          # Run performance tests to establish new baseline
          chmod +x ./deployment/scripts/performance-baseline.sh
          ./deployment/scripts/performance-baseline.sh

      - name: Schedule health check monitoring
        run: |
          # Set up continuous health monitoring
          kubectl create cronjob health-monitor --image=curlimages/curl --schedule="*/5 * * * *" --restart=Never -- curl -f https://medianest.yourdomain.com/api/health -n ${{ env.KUBE_NAMESPACE }} || true

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && !inputs.force_deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Rollback deployment
        run: |
          chmod +x ./deployment/scripts/rollback.sh
          ./deployment/scripts/rollback.sh --application

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#deployments'
          text: |
            🚨 MediaNest Production Deployment FAILED - Automatic Rollback Initiated
            Environment: ${{ inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
