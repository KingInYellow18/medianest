name: Weekly Security Scans

on:
  schedule:
    # Run every Sunday at 3:00 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '20'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=moderate

      - name: Run custom security scan
        run: npm run security:scan

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results-${{ github.run_number }}
          path: |
            npm-audit-results.json
            security-scan-results/
          retention-days: 90

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy results artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results-${{ github.run_number }}
          path: trivy-results.sarif
          retention-days: 90

  security-performance:
    name: Security Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: medianest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/medianest_test
        run: |
          cd backend
          npx prisma migrate deploy

      - name: Run security performance tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/medianest_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key
        run: npm run test:performance:security

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-performance-results-${{ github.run_number }}
          path: test-results/security-performance-*.json
          retention-days: 90

  notify-results:
    name: Notify Security Scan Results
    runs-on: ubuntu-latest
    needs: [security-audit, vulnerability-scan, security-performance]
    if: always()

    steps:
      - name: Create security report issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const date = new Date().toISOString().split('T')[0];
            
            await github.rest.issues.create({
              owner,
              repo,
              title: `üîí Weekly Security Scan Results - ${date}`,
              body: `Weekly security scans completed on ${date}\n\n‚ö†Ô∏è Some security checks failed. Please review the workflow results.\n\nSee run: ${context.payload.workflow_run?.html_url || 'N/A'}`,
              labels: ['security', 'weekly-scan']
            });