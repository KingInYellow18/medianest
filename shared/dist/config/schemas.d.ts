import { z } from 'zod';
export declare const EnvironmentSchema: any;
export type Environment = z.infer<typeof EnvironmentSchema>;
export declare const LogLevelSchema: any;
export type LogLevel = z.infer<typeof LogLevelSchema>;
export declare const BaseConfigSchema: any;
export declare const DatabaseConfigSchema: any;
export declare const RedisConfigSchema: any;
export declare const JWTConfigSchema: any;
export declare const NextAuthConfigSchema: any;
export declare const PlexConfigSchema: any;
export declare const EncryptionConfigSchema: any;
export declare const RateLimitConfigSchema: any;
export declare const YouTubeConfigSchema: any;
export declare const AdminConfigSchema: any;
export declare const ServerConfigSchema: any;
export declare const ServiceEndpointsSchema: any;
export declare const MonitoringConfigSchema: any;
export declare const DockerSecretsSchema: any;
export declare const BackendConfigSchema: any;
export type BackendConfig = z.infer<typeof BackendConfigSchema>;
export declare const FrontendConfigSchema: any;
export type FrontendConfig = z.infer<typeof FrontendConfigSchema>;
export declare const TestConfigSchema: any;
export type TestConfig = z.infer<typeof TestConfigSchema>;
export declare const formatValidationError: (error: z.ZodError) => string;
export declare const createConfigValidator: <T extends z.ZodSchema>(schema: T) => (env: Record<string, unknown>) => z.infer<T>;
//# sourceMappingURL=schemas.d.ts.map