# ==============================================================================
# 🚀 MEDIANEST DEVELOPMENT ENVIRONMENT - CONSOLIDATED
# ==============================================================================
# Usage: docker-compose -f config/docker/docker-compose.dev.yml up -d
# Features: Hot reload, debugging, development tools, exposed ports
# Technology: Single consolidated Dockerfile with development target
# ==============================================================================


# Development environment variables
x-dev-env: &dev-env
  NODE_ENV: development
  DATABASE_URL: postgresql://medianest:medianest_dev_password@postgres:5432/medianest_dev?connection_limit=20&pool_timeout=30
  REDIS_URL: redis://redis:6379
  NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
  NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-dev_secret_12345}
  PLEX_CLIENT_ID: ${PLEX_CLIENT_ID}
  PLEX_CLIENT_SECRET: ${PLEX_CLIENT_SECRET}
  ENCRYPTION_KEY: ${ENCRYPTION_KEY:-dev_encryption_key_12345}
  JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_12345}
  DEBUG: ${DEBUG:-*}
  LOG_LEVEL: ${LOG_LEVEL:-debug}

services:
  # ==============================================================================
  # 🗄️ DATABASE - Development PostgreSQL
  # ==============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: medianest-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: medianest_dev
      POSTGRES_USER: medianest
      POSTGRES_PASSWORD: medianest_dev_password
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ../../infrastructure/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U medianest -d medianest_dev']
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - medianest-dev

  # ==============================================================================
  # 📊 CACHE - Development Redis
  # ==============================================================================
  redis:
    image: redis:7-alpine
    container_name: medianest-redis-dev
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
    volumes:
      - redis_dev_data:/data
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - medianest-dev

  # ==============================================================================
  # 🚀 APPLICATION - Development Backend (Hot Reload)
  # ==============================================================================
  backend:
    build:
      context: ../..
      dockerfile: config/docker/Dockerfile.consolidated
      target: development
      args:
        - NODE_ENV=development
    container_name: medianest-backend-dev
    restart: unless-stopped
    environment:
      <<: *dev-env
      PORT: 4000
      CHOKIDAR_USEPOLLING: "true"  # For hot reload in containers
    ports:
      - '4000:4000'
      - '9229:9229'  # Node.js debugger
    volumes:
      # Hot reload volumes
      - ../../backend/src:/app/backend/src:cached
      - ../../shared/src:/app/shared/src:cached
      - backend_dev_node_modules:/app/backend/node_modules
      - backend_dev_uploads:/app/backend/uploads
      - backend_dev_logs:/app/backend/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/api/health']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - medianest-dev
    # Development: Allow debugging access
    cap_add:
      - SYS_PTRACE
    command: ["npm", "run", "dev:backend"]

  # ==============================================================================
  # 🎨 FRONTEND - Development Next.js (Hot Reload)
  # ==============================================================================
  frontend:
    build:
      context: ../..
      dockerfile: config/docker/Dockerfile.consolidated
      target: development
      args:
        - NODE_ENV=development
    container_name: medianest-frontend-dev
    restart: unless-stopped
    environment:
      <<: *dev-env
      PORT: 3000
      NEXT_TELEMETRY_DISABLED: 1
      FAST_REFRESH: "true"
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - '3000:3000'
    volumes:
      # Hot reload volumes
      - ../../frontend/src:/app/frontend/src:cached
      - ../../frontend/pages:/app/frontend/pages:cached
      - ../../frontend/components:/app/frontend/components:cached
      - ../../shared/src:/app/shared/src:cached
      - frontend_dev_node_modules:/app/frontend/node_modules
      - frontend_dev_next:/app/frontend/.next
    depends_on:
      - backend
    networks:
      - medianest-dev
    command: ["npm", "run", "dev:frontend"]

  # ==============================================================================
  # 🔍 DEVELOPMENT TOOLS
  # ==============================================================================
  
  # Database Admin Interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: medianest-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: dev@medianest.local
      PGADMIN_DEFAULT_PASSWORD: devpassword
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '8080:80'
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - medianest-dev
    profiles:
      - tools

  # Redis Admin Interface  
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: medianest-redis-commander-dev
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - '8081:8081'
    depends_on:
      - redis
    networks:
      - medianest-dev
    profiles:
      - tools

  # Mail Development Server
  mailhog:
    image: mailhog/mailhog:latest
    container_name: medianest-mailhog-dev
    restart: unless-stopped
    ports:
      - '8025:8025'  # Web UI
      - '1025:1025'  # SMTP
    networks:
      - medianest-dev
    profiles:
      - tools

# ==============================================================================
# 📦 VOLUMES
# ==============================================================================
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  backend_dev_node_modules:
    driver: local
  frontend_dev_node_modules:
    driver: local
  frontend_dev_next:
    driver: local
  backend_dev_uploads:
    driver: local
  backend_dev_logs:
    driver: local
  pgadmin_dev_data:
    driver: local

# ==============================================================================
# 🌐 NETWORKS
# ==============================================================================
networks:
  medianest-dev:
    driver: bridge
    name: medianest-development
    ipam:
      config:
        - subnet: 172.30.0.0/16

# ==============================================================================
# 🚀 USAGE EXAMPLES
# ==============================================================================
#
# Start development environment:
# docker-compose -f config/docker/docker-compose.dev.yml up -d
#
# Start with development tools:
# docker-compose -f config/docker/docker-compose.dev.yml --profile tools up -d
#
# View logs:
# docker-compose -f config/docker/docker-compose.dev.yml logs -f backend
#
# Access services:
# Frontend: http://localhost:3000
# Backend: http://localhost:4000/api
# PgAdmin: http://localhost:8080 (with --profile tools)
# Redis Commander: http://localhost:8081 (with --profile tools)
# Mailhog: http://localhost:8025 (with --profile tools)
#
# Rebuild after changes:
# docker-compose -f config/docker/docker-compose.dev.yml up -d --build