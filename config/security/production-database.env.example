# ==============================================================================
# DATABASE SECURITY CONFIGURATION - PRODUCTION TEMPLATE
# ==============================================================================
# Copy this file to production-database.env and configure with secure values
# This template provides security-hardened database configuration examples
# ==============================================================================

# ==============================================================================
# üîê POSTGRESQL SECURITY CONFIGURATION  
# ==============================================================================

# Database connection with SSL/TLS encryption (REQUIRED in production)
# Format: postgresql://user:password@host:port/database?sslmode=require
# Example with SSL: postgresql://medianest_user:secure_password@db.example.com:5432/medianest_prod?sslmode=require&connection_limit=20
DATABASE_URL=postgresql://user:password@host:5432/database?sslmode=require&connection_limit=20&pool_timeout=30

# SSL/TLS Certificate Configuration (recommended for production)
# SSL Certificate Authority file path (leave empty to use system certs)
DB_SSL_CA=/path/to/ca-certificate.crt
# Client certificate for mutual TLS (optional)
DB_SSL_CERT=/path/to/client-certificate.crt
# Client private key for mutual TLS (optional)  
DB_SSL_KEY=/path/to/client-private-key.key
# Reject unauthorized SSL connections (true for production)
DB_SSL_REJECT_UNAUTHORIZED=true
# Disable SSL certificate verification (NOT recommended for production)
# Only set to true if using self-signed certificates in testing
DB_SSL_DISABLE=false

# Connection Pool Security Settings
# Maximum connections in pool (adjust based on server capacity)
DB_POOL_MAX=20
# Minimum connections maintained in pool
DB_POOL_MIN=5  
# Pool timeout in seconds (how long to wait for available connection)
DB_POOL_TIMEOUT=30
# Statement timeout in milliseconds (prevents long-running queries)
DB_STATEMENT_TIMEOUT=60000
# Idle transaction timeout in milliseconds (security against abandoned transactions)
DB_IDLE_TIMEOUT=300000

# ==============================================================================
# üìä REDIS SECURITY CONFIGURATION
# ==============================================================================

# Redis connection with authentication (REQUIRED in production)
# Format: redis://[:password@]host:port[/database]
# Example with auth: redis://:secure_redis_password@redis.example.com:6379/0
REDIS_URL=redis://:password@host:6379/0

# Redis Security Settings
# Redis authentication password (REQUIRED for production)
REDIS_PASSWORD=your_secure_redis_password_here
# Redis server host
REDIS_HOST=localhost
# Redis server port  
REDIS_PORT=6379
# Redis database number (0-15)
REDIS_DB=0

# Redis TLS Configuration (recommended for production)
# Enable TLS encryption for Redis connections
REDIS_TLS_ENABLED=true
# TLS Certificate Authority file path
REDIS_TLS_CA=/path/to/redis-ca.crt
# Client certificate for Redis TLS (optional)
REDIS_TLS_CERT=/path/to/redis-client.crt
# Client private key for Redis TLS (optional)
REDIS_TLS_KEY=/path/to/redis-client.key  
# Server name for TLS verification
REDIS_TLS_SERVERNAME=redis.example.com
# Reject unauthorized TLS connections
REDIS_TLS_REJECT_UNAUTHORIZED=true
# Disable Redis TLS (only for development/testing)
REDIS_TLS_DISABLE=false

# Redis Connection Security
# Maximum retry attempts for failed connections
REDIS_MAX_RETRIES=3
# Retry delay in milliseconds
REDIS_RETRY_DELAY_MS=1000
# Connection timeout in milliseconds
REDIS_CONNECT_TIMEOUT=10000
# Command timeout in milliseconds
REDIS_COMMAND_TIMEOUT=5000

# ==============================================================================
# üîí DATABASE SECURITY POLICIES
# ==============================================================================

# Security Enforcement Levels
# Enforce SSL/TLS in production (true = required, false = optional)
DB_ENFORCE_SSL=true
# Enforce Redis authentication (true = required, false = optional)
REDIS_ENFORCE_AUTH=true

# Connection Monitoring
# Enable database connection monitoring (recommended)
DB_MONITOR_CONNECTIONS=true
# Log slow queries (queries taking longer than threshold in ms)
DB_LOG_SLOW_QUERIES=true  
DB_SLOW_QUERY_THRESHOLD=1000

# Security Audit Settings
# Enable database security audit logging
DB_SECURITY_AUDIT=true
# Enable Redis security audit logging
REDIS_SECURITY_AUDIT=true

# ==============================================================================
# üõ°Ô∏è PRODUCTION SECURITY RECOMMENDATIONS
# ==============================================================================

# 1. DATABASE PASSWORDS:
#    - Use passwords with minimum 16 characters
#    - Include uppercase, lowercase, numbers, and symbols
#    - Generate with: openssl rand -base64 24
#    - Rotate passwords regularly (quarterly recommended)

# 2. SSL/TLS CERTIFICATES:
#    - Use certificates from trusted Certificate Authority
#    - Enable certificate verification (DB_SSL_REJECT_UNAUTHORIZED=true)
#    - Monitor certificate expiration dates
#    - Use TLS 1.2 or higher

# 3. NETWORK SECURITY:
#    - Use private networks for database connections
#    - Configure firewall rules to restrict database access
#    - Enable VPN for remote database access
#    - Use connection pooling to limit concurrent connections

# 4. REDIS SECURITY:
#    - Always enable Redis AUTH in production (REDIS_PASSWORD)
#    - Disable dangerous Redis commands (FLUSHALL, CONFIG, etc.)
#    - Use Redis ACLs for fine-grained access control
#    - Enable Redis persistence with proper file permissions

# 5. MONITORING AND AUDITING:
#    - Enable database query logging
#    - Monitor connection patterns for anomalies  
#    - Set up alerts for failed authentication attempts
#    - Regular security audits and penetration testing

# 6. BACKUP SECURITY:
#    - Encrypt database backups at rest and in transit
#    - Store backups in separate, secure location
#    - Test backup restoration procedures regularly
#    - Implement backup retention policies

# ==============================================================================
# ‚ö†Ô∏è SECURITY WARNINGS
# ==============================================================================

# NEVER commit this file with actual credentials to version control
# Store production secrets in secure secret management systems
# Use Docker secrets or Kubernetes secrets in containerized environments  
# Rotate all passwords and certificates before production deployment
# Test all security configurations in staging environment first

# Example secure password generation commands:
# Database password: openssl rand -base64 32
# Redis password: openssl rand -base64 24  
# JWT secret: openssl rand -base64 32
# Encryption key: openssl rand -base64 32