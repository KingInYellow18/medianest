# MediaNest Production Dockerfile
# Multi-stage build for optimized production deployment

# Build stage
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --ignore-scripts && npm cache clean --force

# Copy source code
COPY . .

# Build application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install security updates and runtime dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    tini

# Create non-root user
RUN addgroup -g 1001 -S medianest && \
    adduser -S medianest -u 1001 -G medianest

# Create app directory with proper permissions
RUN mkdir -p /app /app/logs /app/tmp && \
    chown -R medianest:medianest /app

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=medianest:medianest /app/node_modules ./node_modules
COPY --from=builder --chown=medianest:medianest /app/dist ./dist
COPY --from=builder --chown=medianest:medianest /app/package*.json ./

# Copy additional production files
COPY --chown=medianest:medianest ./config/production ./config/production

# Create necessary directories
RUN mkdir -p /app/uploads /app/static && \
    chown -R medianest:medianest /app/uploads /app/static

# Switch to non-root user
USER medianest

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Use tini as PID 1 for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start application
CMD ["node", "dist/server.js"]