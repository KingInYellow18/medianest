# 🐳 MEDIANEST - PRODUCTION ENVIRONMENT OVERRIDES  
# Production-hardened configuration with security, monitoring & backup
# Usage: docker-compose -f docker-compose.base.yml -f docker-compose.prod.yml up

version: '3.8'

# ==========================================
# Production Service Overrides
# ==========================================
services:
  # Backend Production (Security Hardened)
  backend:
    build:
      target: security-hardened
      args:
        NODE_ENV: production
    environment:
      - NODE_ENV=production
      - PORT=4000
      - LOG_LEVEL=info
    # Production security settings
    read_only: true
    tmpfs:
      - /tmp:size=100M,uid=1001,gid=1001,mode=1700
      - /var/log/medianest:size=100M,uid=1001,gid=1001,mode=1750
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    # Production health check
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "Accept: application/json", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # No port exposure (behind reverse proxy)
    ports: []
    # Use Docker secrets
    secrets:
      - jwt-secret
      - database-url
      - redis-url
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.medianest.com`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"

  # Frontend Production
  frontend:
    build:
      target: frontend-production
      args:
        NODE_ENV: production
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_TELEMETRY_DISABLED=1
    # Production security settings  
    read_only: true
    tmpfs:
      - /tmp:size=100M,uid=1001,gid=1001,mode=1700
      - /var/log/medianest:size=50M,uid=1001,gid=1001,mode=1750
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # No port exposure (behind reverse proxy)
    ports: []
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`medianest.com`) || Host(`www.medianest.com`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.redirect-www.redirectregex.regex=^https://www.medianest.com/(.*)"
      - "traefik.http.middlewares.redirect-www.redirectregex.replacement=https://medianest.com/$${1}"

  # PostgreSQL Production (Hardened)
  postgres:
    environment:
      POSTGRES_DB: medianest_prod
      POSTGRES_USER: medianest_prod
      # Use Docker secrets for password
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres-password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    # Production command with optimizations
    command: >
      postgres
      -c log_statement=none
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d.log
      -c max_connections=300
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c work_mem=8MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c synchronous_commit=off
    # Security hardening
    read_only: true
    tmpfs:
      - /tmp:size=200M,uid=999,gid=999,mode=1700
      - /var/run/postgresql:size=100M,uid=999,gid=999,mode=1755
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETUID
      - SETGID
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    # No external port exposure
    ports: []
    # Use Docker secrets
    secrets:
      - postgres-password
    volumes:
      - postgres-prod-data:/var/lib/postgresql/data
      - postgres-logs:/var/log/postgresql

  # Redis Production (Hardened)
  redis:
    command: >
      redis-server
      --requirepass-file /run/secrets/redis-password
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --stop-writes-on-bgsave-error yes
      --rdbcompression yes
      --rdbchecksum yes
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
    # Security hardening
    read_only: true
    tmpfs:
      - /tmp:size=100M,uid=999,gid=999,mode=1700
    cap_drop:
      - ALL
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    # No external port exposure
    ports: []
    # Use Docker secrets
    secrets:
      - redis-password
    volumes:
      - redis-prod-data:/data

  # ==========================================
  # Production Infrastructure Services
  # ==========================================

  # Nginx Reverse Proxy & SSL Termination
  nginx:
    image: medianest:nginx-production
    build:
      context: .
      dockerfile: config/docker-consolidated/Dockerfile
      target: nginx-production
    container_name: medianest-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx-config:/etc/nginx/conf.d:ro
      - ssl-certificates:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - medianest-internal
      - medianest-external
    depends_on:
      - backend
      - frontend
    # Security hardening
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETUID
      - SETGID
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: medianest-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - medianest-internal
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: medianest-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana-password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - medianest-internal
    depends_on:
      - prometheus
    secrets:
      - grafana-password
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`monitoring.medianest.com`)"
      - "traefik.http.routers.grafana.tls=true"

  # Automated Backup Service
  backup:
    image: postgres:16-alpine
    container_name: medianest-backup
    restart: "no"
    environment:
      - PGPASSWORD_FILE=/run/secrets/postgres-password
    volumes:
      - backup-data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - medianest-internal
    depends_on:
      - postgres
      - redis
    secrets:
      - postgres-password
      - redis-password
    command: ["/backup.sh"]
    deploy:
      restart_policy:
        condition: none
    profiles:
      - backup

# ==========================================
# Production Networks
# ==========================================
networks:
  medianest-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16
          gateway: 172.22.0.1
    labels:
      - "com.medianest.network=production-internal"

  medianest-external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16
          gateway: 172.23.0.1
    labels:
      - "com.medianest.network=production-external"

# ==========================================
# Production Volumes with Backup Labels
# ==========================================
volumes:
  postgres-prod-data:
    driver: local
    labels:
      - "com.medianest.volume=postgres-prod-data"
      - "com.medianest.backup=daily"
      - "com.medianest.retention=90d"

  redis-prod-data:
    driver: local
    labels:
      - "com.medianest.volume=redis-prod-data"
      - "com.medianest.backup=daily"
      - "com.medianest.retention=30d"

  prometheus-data:
    driver: local
    labels:
      - "com.medianest.volume=prometheus-data"
      - "com.medianest.backup=weekly"
      - "com.medianest.retention=60d"

  grafana-data:
    driver: local
    labels:
      - "com.medianest.volume=grafana-data"
      - "com.medianest.backup=weekly"
      - "com.medianest.retention=30d"

  backup-data:
    driver: local
    labels:
      - "com.medianest.volume=backup-data"
      - "com.medianest.retention=365d"

  nginx-config:
    driver: local
    labels:
      - "com.medianest.volume=nginx-config"

  ssl-certificates:
    driver: local
    labels:
      - "com.medianest.volume=ssl-certificates"
      - "com.medianest.backup=daily"

  nginx-logs:
    driver: local
    labels:
      - "com.medianest.volume=nginx-logs"
      - "com.medianest.retention=30d"

  postgres-logs:
    driver: local
    labels:
      - "com.medianest.volume=postgres-logs"
      - "com.medianest.retention=30d"

# ==========================================
# Production Secrets
# ==========================================
secrets:
  jwt-secret:
    external: true
    name: medianest-jwt-secret-v1

  database-url:
    external: true  
    name: medianest-database-url-v1

  redis-url:
    external: true
    name: medianest-redis-url-v1

  postgres-password:
    external: true
    name: medianest-postgres-password-v1

  redis-password:
    external: true
    name: medianest-redis-password-v1

  grafana-password:
    external: true
    name: medianest-grafana-password-v1

# ==========================================
# Production Environment Template
# ==========================================
x-production-environment: &prod-environment
  NODE_ENV: production
  LOG_LEVEL: info
  MONITORING_ENABLED: "true"
  SECURITY_HARDENED: "true"
  SSL_ENABLED: "true"
  BACKUP_ENABLED: "true"

# ==========================================
# Production Labels Template
# ==========================================
x-production-labels: &prod-labels
  com.medianest.environment: "production"
  com.medianest.security: "hardened"  
  com.medianest.monitoring: "enabled"
  com.medianest.backup: "enabled"
  com.medianest.ssl: "required"
  com.medianest.deployment: "blue-green"