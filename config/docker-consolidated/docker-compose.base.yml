# üê≥ MEDIANEST - BASE DOCKER COMPOSE CONFIGURATION  
# Consolidated base configuration for all environments
# Use with environment-specific overrides (dev/prod)

version: '3.8'

# ==========================================
# Reusable Configuration Templates
# ==========================================
x-app-defaults: &app-defaults
  restart: unless-stopped
  init: true
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - SETUID
    - SETGID
  networks:
    - medianest-internal
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-database-defaults: &database-defaults
  restart: unless-stopped
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  networks:
    - medianest-internal
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

# ==========================================
# Core Services
# ==========================================
services:
  # Backend API Service
  backend:
    <<: *app-defaults
    image: medianest:${BUILD_TARGET:-backend-production}
    build:
      context: ${BUILD_CONTEXT:-.}
      dockerfile: config/docker-consolidated/Dockerfile
      target: ${BUILD_TARGET:-backend-production}
      args:
        NODE_ENV: ${NODE_ENV:-production}
        BUILD_TARGET: ${BUILD_TARGET:-backend-production}
    container_name: medianest-backend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${BACKEND_PORT:-4000}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - API_BASE_URL=${API_BASE_URL:-http://backend:4000}
    ports:
      - "${BACKEND_PORT:-4000}:${BACKEND_PORT:-4000}"
    volumes:
      - app-uploads:/app/uploads
      - app-logs:/var/log/medianest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT:-4000}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Service
  frontend:
    <<: *app-defaults
    image: medianest:${BUILD_TARGET:-frontend-production}
    build:
      context: ${BUILD_CONTEXT:-.}
      dockerfile: config/docker-consolidated/Dockerfile
      target: ${BUILD_TARGET:-frontend-production}
      args:
        NODE_ENV: ${NODE_ENV:-production}
        BUILD_TARGET: ${BUILD_TARGET:-frontend-production}
    container_name: medianest-frontend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${FRONTEND_PORT:-3000}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:4000}
      - NEXT_PUBLIC_APP_ENV=${NODE_ENV:-production}
      - NEXT_TELEMETRY_DISABLED=1
    ports:
      - "${FRONTEND_PORT:-3000}:${FRONTEND_PORT:-3000}"
    volumes:
      - app-logs:/var/log/medianest
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT:-3000}/api/health", "||", "curl", "-f", "http://localhost:${FRONTEND_PORT:-3000}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    <<: *database-defaults
    image: postgres:16-alpine
    container_name: medianest-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medianest}
      POSTGRES_USER: ${POSTGRES_USER:-medianest}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medianest} -d ${POSTGRES_DB:-medianest}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache & Session Store
  redis:
    <<: *database-defaults
    image: redis:7-alpine
    container_name: medianest-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s

# ==========================================
# Network Configuration
# ==========================================
networks:
  medianest-internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "com.medianest.network=internal"
      - "com.medianest.environment=${NODE_ENV:-production}"

# ==========================================
# Volume Configuration  
# ==========================================
volumes:
  postgres-data:
    driver: local
    labels:
      - "com.medianest.volume=postgres-data"
      - "com.medianest.backup=daily"

  redis-data:
    driver: local
    labels:
      - "com.medianest.volume=redis-data"
      - "com.medianest.backup=daily"

  app-uploads:
    driver: local
    labels:
      - "com.medianest.volume=app-uploads"
      - "com.medianest.backup=hourly"

  app-logs:
    driver: local
    labels:
      - "com.medianest.volume=app-logs"
      - "com.medianest.retention=30d"

# ==========================================
# Global Configuration
# ==========================================
configs:
  nginx-config:
    external: true
    name: medianest-nginx-config-${CONFIG_VERSION:-latest}

secrets:
  jwt-secret:
    external: true
    name: medianest-jwt-secret-${SECRET_VERSION:-latest}
  
  database-password:
    external: true
    name: medianest-database-password-${SECRET_VERSION:-latest}

# ==========================================
# Labels for Container Management
# ==========================================
x-labels: &default-labels
  com.medianest.application: "medianest"
  com.medianest.version: "2.0.0-consolidated"
  com.medianest.environment: "${NODE_ENV:-production}"
  com.medianest.build-date: "${BUILD_DATE}"
  com.medianest.git-commit: "${GIT_COMMIT}"