# 🐳 MEDIANEST - DEVELOPMENT ENVIRONMENT OVERRIDES
# Development-specific configuration with hot-reload and debugging tools
# Usage: docker-compose -f docker-compose.base.yml -f docker-compose.dev.yml up

version: '3.8'

# ==========================================
# Development Service Overrides
# ==========================================
services:
  # Backend Development with Hot Reload
  backend:
    build:
      target: development
      args:
        NODE_ENV: development
    environment:
      - NODE_ENV=development
      - DEBUG=medianest:*,express:*
      - PORT=4000
      - HOT_RELOAD=true
      - LOG_LEVEL=debug
    volumes:
      # Hot reload source code mounting
      - ./backend:/app/backend:cached
      - ./shared:/app/shared:cached
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      # Exclude node_modules for performance
      - /app/node_modules
    command: ["dumb-init", "npm", "run", "dev:backend"]
    # Remove production health check constraints
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 10s
    # Expose additional debugging ports
    ports:
      - "4000:4000"
      - "9229:9229"  # Node.js debugging
    labels:
      - "traefik.http.routers.backend-dev.rule=Host(`api.medianest.local`)"

  # Frontend Development with Next.js Fast Refresh
  frontend:
    build:
      target: development
      args:
        NODE_ENV: development
    environment:
      - NODE_ENV=development
      - PORT=3000
      - FAST_REFRESH=true
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_USEPOLLING=true
    volumes:
      # Hot reload source code mounting
      - ./frontend:/app/frontend:cached
      - ./shared:/app/shared:cached
      - ./public:/app/public:cached
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./next.config.js:/app/next.config.js:ro
      - ./tailwind.config.js:/app/tailwind.config.js:ro
      # Exclude build directories
      - /app/node_modules
      - /app/.next
    command: ["dumb-init", "npm", "run", "dev:frontend"]
    # Remove production health check constraints
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 10s
    # Expose webpack dev server
    ports:
      - "3000:3000"
    labels:
      - "traefik.http.routers.frontend-dev.rule=Host(`medianest.local`)"

  # PostgreSQL Development (relaxed security)
  postgres:
    environment:
      POSTGRES_DB: medianest_dev
      POSTGRES_USER: medianest_dev
      POSTGRES_PASSWORD: dev_password_123
    ports:
      - "5432:5432"
    # Development command with more relaxed settings
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c shared_buffers=128MB
      -c max_connections=100
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d:ro
      - ./backend/database/seeds:/docker-entrypoint-initdb.d/seeds:ro

  # Redis Development
  redis:
    command: >
      redis-server
      --requirepass dev_redis_pass
      --maxmemory 256mb
      --appendonly no
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data

  # ==========================================
  # Development Tools & Services
  # ==========================================
  
  # Database Administration Tool
  adminer:
    image: adminer:4-standalone
    container_name: medianest-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    ports:
      - "8080:8080"
    networks:
      - medianest-internal
    depends_on:
      - postgres
    labels:
      - "traefik.http.routers.adminer.rule=Host(`adminer.medianest.local`)"

  # Redis Administration Tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: medianest-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:dev_redis_pass
      HTTP_USER: admin
      HTTP_PASSWORD: dev_admin_123
    ports:
      - "8081:8081"
    networks:
      - medianest-internal
    depends_on:
      - redis
    labels:
      - "traefik.http.routers.redis-commander.rule=Host(`redis.medianest.local`)"

  # Email Testing (MailCatcher)
  mailcatcher:
    image: schickling/mailcatcher
    container_name: medianest-mailcatcher
    restart: unless-stopped
    ports:
      - "1080:1080"  # Web interface
      - "1025:1025"  # SMTP server
    networks:
      - medianest-internal
    labels:
      - "traefik.http.routers.mailcatcher.rule=Host(`mail.medianest.local`)"

  # Local Development Proxy (Traefik)
  traefik:
    image: traefik:v2.10
    container_name: medianest-traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "8090:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - medianest-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.medianest.local`)"

# ==========================================
# Development-specific Volumes
# ==========================================
volumes:
  postgres-dev-data:
    driver: local
    labels:
      - "com.medianest.volume=postgres-dev-data"
      - "com.medianest.environment=development"

  redis-dev-data:
    driver: local
    labels:
      - "com.medianest.volume=redis-dev-data"
      - "com.medianest.environment=development"

# ==========================================
# Development Network with External Access
# ==========================================
networks:
  medianest-internal:
    external: false
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    labels:
      - "com.medianest.network=development-internal"

# ==========================================
# Development Environment Variables
# ==========================================
x-environment: &dev-environment
  NODE_ENV: development
  LOG_LEVEL: debug
  HOT_RELOAD: "true"
  POSTGRES_DB: medianest_dev
  POSTGRES_USER: medianest_dev
  POSTGRES_PASSWORD: dev_password_123
  REDIS_PASSWORD: dev_redis_pass
  JWT_SECRET: dev_jwt_secret_key_not_for_production
  API_BASE_URL: http://backend:4000
  NEXT_PUBLIC_API_URL: http://localhost:4000
  FRONTEND_URL: http://localhost:3000
  BACKEND_URL: http://localhost:4000
  DATABASE_URL: postgresql://medianest_dev:dev_password_123@postgres:5432/medianest_dev
  REDIS_URL: redis://:dev_redis_pass@redis:6379/0

# ==========================================
# Development-specific Labels
# ==========================================
x-dev-labels: &dev-labels
  com.medianest.environment: "development"
  com.medianest.hot-reload: "enabled"
  com.medianest.debug: "enabled"
  com.medianest.security: "relaxed"
  com.medianest.monitoring: "basic"