# MediaNest Auto-Scaling Policies Configuration
# Production-ready scaling policies for Docker orchestration

version: '1.0'

# Global scaling configuration
global:
  evaluation_interval: 30s
  cooldown_period: 60s
  max_scale_events_per_hour: 20
  enable_predictive_scaling: true
  metrics_retention: 7d

# Service-specific scaling policies
services:
  medianest-app:
    min_replicas: 2
    max_replicas: 8
    default_replicas: 3
    
    # CPU-based scaling
    cpu_scaling:
      enabled: true
      target_utilization: 70
      scale_up_threshold: 80
      scale_down_threshold: 30
      scale_up_cooldown: 60s
      scale_down_cooldown: 300s
      
    # Memory-based scaling
    memory_scaling:
      enabled: true
      target_utilization: 75
      scale_up_threshold: 85
      scale_down_threshold: 40
      scale_up_cooldown: 60s
      scale_down_cooldown: 300s
      
    # Request-based scaling
    request_scaling:
      enabled: true
      requests_per_replica: 100
      target_response_time: 500ms
      scale_up_threshold: 150
      scale_down_threshold: 50
      
    # Custom metrics scaling
    custom_metrics:
      - name: database_connections
        threshold: 80
        comparison: greater_than
        scale_action: scale_up
      - name: queue_length
        threshold: 50
        comparison: greater_than
        scale_action: scale_up
      - name: error_rate
        threshold: 5
        comparison: greater_than
        scale_action: scale_up

  postgres:
    # Database typically doesn't auto-scale horizontally
    # But we can configure resource adjustments
    resource_scaling:
      enabled: true
      cpu_adjustment: true
      memory_adjustment: true
      max_connections_adjustment: true
      
  redis:
    min_replicas: 1
    max_replicas: 3
    default_replicas: 1
    
    memory_scaling:
      enabled: true
      target_utilization: 80
      scale_up_threshold: 90
      scale_down_threshold: 40

# Load balancer configuration
load_balancer:
  algorithm: least_connections
  health_check:
    enabled: true
    interval: 30s
    timeout: 10s
    healthy_threshold: 2
    unhealthy_threshold: 3
    path: /api/health
    
  # Sticky sessions for stateful applications
  sticky_sessions:
    enabled: true
    cookie_name: medianest-server
    ttl: 3600
    
  # Circuit breaker
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    recovery_timeout: 30s
    half_open_max_calls: 3

# Monitoring and alerting
monitoring:
  metrics_collection:
    interval: 15s
    retention: 7d
    exporters:
      - prometheus
      - influxdb
      
  alerts:
    # Scaling alerts
    - name: high_cpu_usage
      condition: cpu_usage > 90
      duration: 5m
      severity: warning
      action: scale_up
      
    - name: high_memory_usage
      condition: memory_usage > 90
      duration: 3m
      severity: critical
      action: scale_up
      
    - name: high_response_time
      condition: response_time > 2000ms
      duration: 2m
      severity: warning
      action: scale_up
      
    - name: service_down
      condition: service_replicas == 0
      duration: 30s
      severity: critical
      action: restart_service
      
    # Resource optimization alerts
    - name: low_utilization
      condition: cpu_usage < 20 AND memory_usage < 30
      duration: 10m
      severity: info
      action: scale_down

# Predictive scaling (machine learning based)
predictive_scaling:
  enabled: true
  model: time_series_forecasting
  forecast_horizon: 1h
  confidence_threshold: 0.8
  
  # Training data sources
  training_data:
    - historical_metrics
    - seasonal_patterns
    - business_events
    
  # Scaling predictions
  predictions:
    cpu_forecast: enabled
    memory_forecast: enabled
    request_forecast: enabled
    
# Disaster recovery scaling
disaster_recovery:
  enabled: true
  
  # Failure scenarios
  scenarios:
    - name: node_failure
      trigger: node_unavailable
      action: redistribute_replicas
      max_replicas_per_node: 2
      
    - name: zone_failure
      trigger: zone_unavailable
      action: cross_zone_scaling
      min_zones: 2
      
    - name: database_failure
      trigger: database_unavailable
      action: enable_read_replicas
      read_only_mode: true

# Resource limits and quotas
resource_limits:
  global_limits:
    max_total_cpu: 16
    max_total_memory: 32GB
    max_total_replicas: 50
    
  service_limits:
    medianest-app:
      max_cpu_per_replica: 2
      max_memory_per_replica: 2GB
      max_replicas: 8
      
    postgres:
      max_cpu: 4
      max_memory: 8GB
      max_connections: 500
      
    redis:
      max_cpu: 2
      max_memory: 4GB
      max_replicas: 3

# Performance optimization
optimization:
  # Container placement strategies
  placement:
    strategy: spread
    constraints:
      - node.role != manager
      - node.labels.zone != maintenance
      
  # Resource allocation
  resource_allocation:
    cpu_reservation_ratio: 0.5
    memory_reservation_ratio: 0.6
    overcommit_ratio: 1.5
    
  # Network optimization
  network:
    connection_pooling: true
    keep_alive: true
    compression: true
    
# Integration with external systems
integrations:
  kubernetes:
    enabled: false
    hpa_integration: false
    
  cloud_providers:
    aws:
      enabled: false
      auto_scaling_groups: false
      
    azure:
      enabled: false
      scale_sets: false
      
    gcp:
      enabled: false
      managed_instance_groups: false
      
  monitoring_systems:
    prometheus:
      enabled: true
      endpoint: http://prometheus:9090
      
    grafana:
      enabled: true
      endpoint: http://grafana:3000
      
    datadog:
      enabled: false
      
    new_relic:
      enabled: false

# Security considerations
security:
  # Scaling authorization
  rbac:
    enabled: true
    roles:
      - name: scaling_operator
        permissions:
          - scale_services
          - view_metrics
          - manage_policies
          
  # Resource security
  resource_security:
    prevent_resource_exhaustion: true
    isolation_enforcement: true
    network_policies: true
    
# Maintenance windows
maintenance:
  # Scheduled scaling adjustments
  windows:
    - name: low_traffic_period
      schedule: "0 2 * * *"
      duration: 4h
      action: scale_down_to_minimum
      
    - name: high_traffic_period
      schedule: "0 8 * * 1-5"
      duration: 10h
      action: scale_up_proactively
      
  # Maintenance mode
  maintenance_mode:
    enabled: false
    disable_scaling: true
    drain_replicas: true
    notification_channels:
      - slack
      - email