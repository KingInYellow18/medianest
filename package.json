{
  "name": "medianest",
  "version": "2.0.0",
  "description": "Advanced Media Management Platform",
  "type": "module",
  "main": "src/index.js",
  "workspaces": [
    "shared",
    "backend",
    "frontend"
  ],
  "scripts": {
    "analyze": "npm run analyze:bundle && npm run analyze:performance",
    "analyze:all": "npm run analyze:bundle && npm run analyze:performance && npm run build:verify",
    "analyze:bundle": "cd frontend && npm run analyze:bundle",
    "analyze:performance": "node scripts/build-performance-enhancer.js analyze",
    "benchmark": "node scripts/benchmark.js",
    "build": "./scripts/build-stabilizer.sh",
    "build:backend": "cd backend && npm run build",
    "build:ci": "npm run typecheck:fix && npm run build && npm run build:verify",
    "build:clean": "npm run clean && npm run build",
    "build:docker": "docker build -f Dockerfile --target backend-production -t medianest-backend . && docker build -f Dockerfile --target frontend-production -t medianest-frontend .",
    "build:docs": "./scripts/build-docs.sh",
    "build:docs:dev": "./scripts/build-docs.sh --dev",
    "build:docs:fast": "./scripts/build-docs.sh --skip-deps --skip-tests",
    "build:fast": "npm run build:backend && npm run build:frontend",
    "build:frontend": "cd frontend && npm run build",
    "build:metrics": "npm run build && cat build-metrics.json",
    "build:optimized": "node scripts/build-performance-enhancer.js optimize && npm run build",
    "build:prod": "NODE_ENV=production npm run build:optimized",
    "build:production": "NODE_ENV=production npm run build:optimized",
    "build:verify": "node -e 'console.log(\"Build verification:\"); const fs=require(\"fs\"); console.log(\"Backend:\", fs.existsSync(\"backend/dist\") ? \"‚úÖ\" : \"‚ùå\"); console.log(\"Frontend:\", fs.existsSync(\"frontend/.next\") ? \"‚úÖ\" : \"‚ùå\");'",
    "ci:full": "npm run pipeline:validate && npm run test:ci:full && npm run security:scan",
    "ci:performance": "npm run test:ci:performance && npm run analyze:performance",
    "clean": "rimraf backend/dist frontend/.next shared/dist node_modules/.cache .build-cache",
    "clean:all": "npm run clean && rimraf node_modules",
    "clean:cache": "npm cache clean --force && node scripts/build-performance-enhancer.js clean",
    "clean:deep": "npm run clean && npm run clean:cache && rimraf node_modules */node_modules",
    "clean:docs": "rimraf site",
    "db:check": "cd backend && npx prisma db execute --stdin < ../scripts/db-health-check.sql",
    "db:generate": "cd backend && npx prisma generate",
    "db:migrate": "cd backend && npx prisma migrate deploy",
    "db:pull": "cd backend && npx prisma db pull",
    "db:push": "cd backend && npx prisma db push",
    "db:reset": "npm run db:rollback && npm run db:migrate && npm run db:seed",
    "db:rollback": "cd backend && npx prisma migrate reset --force",
    "db:seed": "cd backend && npx prisma db seed",
    "db:studio": "cd backend && npx prisma studio",
    "db:validate": "cd backend && npx prisma validate",
    "deploy": "npm run build && npm run deploy:compose",
    "deploy:api": "pm2 start ecosystem.config.js",
    "deploy:compose": "docker-compose -f docker-compose.production.yml up -d --build",
    "deploy:docs": "./scripts/deploy-docs.sh",
    "deploy:docs:github": "./scripts/deploy-docs.sh --github",
    "deploy:docs:netlify": "./scripts/deploy-docs.sh --netlify",
    "deploy:docs:s3": "./scripts/deploy-docs.sh --s3",
    "deploy:safe": "npm run deploy:zero-failure",
    "deploy:zero-failure": "npm run pipeline:validate && npm run build:production && npm run deploy",
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd backend && npm run dev",
    "dev:docs": "mkdocs serve",
    "dev:docs:hot": "mkdocs serve --dev-addr=0.0.0.0:8001",
    "dev:frontend": "cd frontend && npm run dev",
    "docker:build": "docker build -f Dockerfile -t medianest:latest .",
    "docker:build:dev": "docker build -f Dockerfile --target development -t medianest:dev .",
    "docker:build:optimized": "npm run build:docker",
    "docker:build:test": "docker build -f Dockerfile --target test -t medianest:test .",
    "docker:compose": "docker compose up -d",
    "docker:compose:build": "docker-compose -f docker-compose.production.yml up -d --build",
    "docker:compose:prod": "docker-compose -f docker-compose.production.yml up -d",
    "docker:docs": "docker run --rm -v \"$PWD\":/docs squidfunk/mkdocs-material build",
    "docker:run": "docker run -p 8080:8080 medianest:latest",
    "docs:build": "mkdocs build",
    "docs:gh-deploy": "mkdocs gh-deploy",
    "docs:linkcheck": "echo 'Link checking disabled due to security vulnerabilities'",
    "docs:serve": "mkdocs serve",
    "docs:validate": "mkdocs config-validation",
    "format": "prettier --write \"**/*.{ts,tsx,js,jsx,json,css,md}\" --cache",
    "format:batch": "node scripts/prettier-dev-mode.js batch",
    "format:changed": "node scripts/prettier-dev-mode.js changed",
    "format:check": "prettier --check \"**/*.{ts,tsx,js,jsx,json,css,md}\" --cache",
    "format:check:ci": "node scripts/prettier-dev-mode.js batch-check",
    "format:dev": "node scripts/prettier-dev-mode.js dev",
    "format:prod": "node scripts/prettier-dev-mode.js prod",
    "format:staged": "node scripts/prettier-dev-mode.js staged",
    "healthcheck": "curl -f http://localhost:8080/health || exit 1",
    "hooks:bypass": "./scripts/git-hooks-bypass.sh",
    "hooks:install": "husky prepare",
    "hooks:performance": "./scripts/git-hooks-performance.sh",
    "hooks:test": "./scripts/git-hooks-health-check.sh",
    "install:production": "npm ci --omit=dev --omit=optional",
    "lint": "eslint . --cache",
    "lint:analyze": "node scripts/eslint-performance-monitor.js analyze",
    "lint:benchmark": "node scripts/eslint-performance-monitor.js benchmark",
    "lint:cache:analyze": "find node_modules/.cache/eslint/ -name '*.json' 2>/dev/null | wc -l || echo '0' && echo 'cached files'",
    "lint:cache:clear": "rm -rf node_modules/.cache/eslint/ && echo 'ESLint cache cleared'",
    "lint:ci": "eslint --config eslint.ci.config.js . --max-warnings 0",
    "lint:dev": "eslint --config .eslint.dev.config.mjs . --cache",
    "lint:dev:fix": "eslint --config .eslint.dev.config.mjs . --fix --cache",
    "lint:dev:watch": "nodemon --watch '**/*.{ts,tsx,js,jsx}' --exec 'npm run lint:dev'",
    "lint:emergency": "eslint --config .eslint.dev.config.mjs . --no-cache --no-eslintrc --max-warnings 999",
    "lint:fix": "eslint . --fix --cache",
    "lint:performance": "time npm run lint:dev && time npm run lint:staging && time npm run lint:prod",
    "lint:prod": "eslint --config .eslint.prod.config.mjs . --max-warnings 0",
    "lint:prod:fix": "eslint --config .eslint.prod.config.mjs . --fix --max-warnings 0",
    "lint:staged-only": "lint-staged",
    "lint:staging": "eslint --config .eslint.staging.config.mjs . --cache",
    "lint:staging:fix": "eslint --config .eslint.staging.config.mjs . --fix --cache",
    "lint:summary": "echo 'üîç ESLint Summary:' && npm run lint:dev --silent | grep -E '(error|warning)' | tail -5 || echo 'No issues found'",
    "lint:validate": "node scripts/eslint-config-validator.js",
    "load-test": "npx k6 run scripts/load-test.js",
    "load-test:custom": "npx k6 run --vus ${VUS:-10} --duration ${DURATION:-2m} scripts/load-test.js",
    "load-test:heavy": "npx k6 run --env TEST_MODE=heavy scripts/load-test.js",
    "load-test:light": "npx k6 run --env TEST_MODE=light scripts/load-test.js",
    "load-test:medium": "npx k6 run --env TEST_MODE=medium scripts/load-test.js",
    "load-test:staged": "npx k6 run --stage 30s:5,60s:10,30s:15,60s:5,30s:0 scripts/load-test.js",
    "migrate:down": "cd backend && npx prisma migrate reset --force",
    "migrate:status": "cd backend && npx prisma migrate status",
    "migrate:test": "./scripts/test-migrations.sh",
    "migrate:up": "cd backend && npx prisma migrate deploy",
    "monitoring:dashboard": "node scripts/monitoring-dashboard-server.js",
    "monitoring:start": "npm run monitoring:dashboard",
    "nightly:performance": "npm run test:performance:all -- --reporter=verbose --reporter=json --outputFile=test-results/nightly-performance-$(date +%Y%m%d).json",
    "perf:build": "npm run analyze:performance && npm run build:optimized && npm run analyze:performance",
    "pipeline:rollback": "npx tsx scripts/automated-rollback-system.ts",
    "pipeline:validate": "npx tsx scripts/zero-failure-pipeline-validator.ts",
    "prepare": "husky prepare || true",
    "prettier:analyze": "node scripts/prettier-performance-monitor.js analyze",
    "prettier:benchmark": "node scripts/prettier-performance-monitor.js benchmark",
    "prettier:cache:analyze": "find node_modules/.cache/prettier/ -name '*' 2>/dev/null | wc -l || echo '0' && echo 'cached files'",
    "prettier:cache:clear": "rm -rf node_modules/.cache/prettier/ && echo 'Prettier cache cleared'",
    "prettier:emergency": "npx prettier --write . --no-cache --ignore-unknown",
    "prettier:git:diff": "node scripts/prettier-git-integration.js diff",
    "prettier:git:pre-commit": "node scripts/prettier-git-integration.js pre-commit",
    "prettier:git:staged": "node scripts/prettier-git-integration.js staged",
    "prettier:summary": "echo 'üé® Prettier Summary:' && npm run format:check --silent || echo 'Formatting issues found'",
    "prettier:watch": "nodemon --watch '**/*.{ts,tsx,js,jsx,json,css,md}' --exec 'npm run format:dev'",
    "profile": "node --prof src/server.js",
    "quality:analyze": "npm run lint:analyze && npm run prettier:analyze",
    "quality:benchmark": "npm run lint:benchmark && npm run prettier:benchmark",
    "quality:cache:clear": "npm run lint:cache:clear && npm run prettier:cache:clear && npm run typecheck:cache:clear",
    "quality:check": "npm run lint:dev && npm run format:check && npm run typecheck",
    "quality:ci": "npm run quality:prod && npm run test:ci:full",
    "quality:emergency": "npm run lint:emergency && npm run prettier:emergency",
    "quality:fix": "npm run lint:dev:fix && npm run format:dev . && npm run typecheck:fix",
    "quality:pre-commit": "npm run quality:check && npm run test:fast",
    "quality:pre-push": "npm run quality:staging && npm run test:ci",
    "quality:prod": "npm run lint:prod && npm run format:check:ci && npm run typecheck:prod",
    "quality:staging": "npm run lint:staging && npm run format:check:ci && npm run typecheck:prod",
    "quality:summary": "echo 'üìä Code Quality Summary:' && npm run lint:summary && npm run prettier:summary && npm run typecheck:summary",
    "quality:watch": "concurrently \"npm run lint:dev:watch\" \"npm run prettier:watch\" \"npm run typecheck:watch\"",
    "release": "standard-version && git push --follow-tags origin main && npm publish",
    "release:docs": "npm run build:docs && npm run deploy:docs:github",
    "security": "npm audit --audit-level=high && npm run security:deps",
    "security:alert": "node scripts/security-monitor.js --alert",
    "security:deps": "npm audit fix",
    "security:monitor": "node scripts/security-monitor.js --daily",
    "security:scan": "node scripts/security-monitor.js --scan",
    "setup": "npm install && npm run build && npm run db:migrate",
    "setup:dev": "npm install && npm run db:migrate && npm run db:seed",
    "start": "npm run start:backend",
    "start:backend": "cd backend && npm start",
    "start:frontend": "cd frontend && npm start",
    "test": "vitest run --exclude=tests/performance/** --exclude=tests/e2e/e2e-performance.spec.ts --exclude=tests/security/security-performance.test.ts",
    "test:all": "npm run test:parallel",
    "test:all:sequential": "npm run test:backend && npm run test:frontend && npm run test:shared",
    "test:backend": "cd backend && npm run test",
    "test:boundaries": "npm run test:edge-cases -- --grep=\"Boundary Value Testing\"",
    "test:cache": "vitest run --config vitest.cache.config.ts --reporter=basic --no-coverage",
    "test:cache:watch": "vitest --config vitest.cache.config.ts --reporter=basic",
    "test:ci": "vitest run --config vitest.fast.config.ts --coverage --coverage.threshold.lines=65",
    "test:ci:coverage": "vitest run --coverage --reporter=verbose --reporter=json --outputFile=test-results/coverage-results.json",
    "test:ci:full": "npm run test && npm run test:performance:all",
    "test:ci:performance": "npm run test:performance:all -- --reporter=json --outputFile=test-results/performance-ci.json",
    "test:ci:quick": "node scripts/parallel-test-optimizer.js --workers 4 --no-cache",
    "test:ci:ultra": "node scripts/parallel-test-optimizer.js --workers 8",
    "test:comprehensive": "npx tsx tests/comprehensive-test-suite.ts",
    "test:concurrency": "npm run test:edge-cases -- --grep=\"Concurrent Access Testing\"",
    "test:coverage": "vitest run --coverage",
    "test:docs": "echo 'Link checking disabled due to security vulnerabilities'",
    "test:e2e": "cd backend && npm run test:e2e",
    "test:edge-cases": "cd tests/edge-cases && npx vitest run --config vitest.config.ts",
    "test:edge-cases:full": "tsx tests/edge-cases/edge-case-runner.ts",
    "test:edge-cases:watch": "cd tests/edge-cases && npx vitest --config vitest.config.ts",
    "test:fast": "vitest run --config vitest.fast.config.ts",
    "test:frontend": "cd frontend && npm run test",
    "test:incremental": "node scripts/test-sharding-optimizer.js --incremental",
    "test:integration": "vitest run --config vitest.integration.config.ts",
    "test:integration:watch": "vitest --config vitest.integration.config.ts",
    "test:load": "npm run test:performance:suite",
    "test:monitor": "node scripts/test-performance-monitor.js npm run test:fast",
    "test:monitor:dashboard": "node scripts/test-performance-monitor.js --dashboard",
    "test:parallel": "node scripts/parallel-test-optimizer.js",
    "test:performance": "npm run test:performance:suite && npm run test:performance:e2e && npm run test:performance:security",
    "test:performance:all": "npm run test:performance:suite && npm run test:performance:e2e && npm run test:performance:security",
    "test:performance:e2e": "vitest run tests/e2e/e2e-performance.spec.ts --reporter=verbose",
    "test:performance:report": "npm run test:performance:all -- --reporter=json --outputFile=test-results/performance-results.json",
    "test:performance:security": "vitest run tests/security/security-performance.test.ts --reporter=verbose",
    "test:performance:suite": "vitest run --config vitest.performance.config.ts tests/performance/performance-suite.test.ts --reporter=verbose",
    "test:security": "./scripts/run-security-tests.sh",
    "test:security-edges": "npm run test:edge-cases -- --grep=\"Security Edge Cases\"",
    "test:security:validate": "node scripts/validate-security-framework.js",
    "test:sharded": "node scripts/test-sharding-optimizer.js",
    "test:shared": "cd shared && npm run test",
    "test:ui": "vitest --ui",
    "test:ultra-fast": "vitest run --config vitest.ultrafast.config.ts --no-coverage",
    "test:watch": "vitest --config vitest.fast.config.ts",
    "test:watch:slow": "vitest",
    "typecheck": "npm run typecheck:backend && npm run typecheck:frontend",
    "typecheck:backend": "cd backend && npm run type-check",
    "typecheck:cache:clear": "rm -f .tsbuildinfo* && rm -rf backend/.tsbuildinfo* && rm -rf frontend/.tsbuildinfo* && echo 'TypeScript cache cleared'",
    "typecheck:dev": "tsc --noEmit --incremental --tsBuildInfoFile .tsbuildinfo.dev",
    "typecheck:fix": "node scripts/typescript-fixer.js fix",
    "typecheck:frontend": "cd frontend && npm run type-check",
    "typecheck:performance": "time npm run typecheck:backend && time npm run typecheck:frontend",
    "typecheck:prod": "tsc --noEmit --strict --exactOptionalPropertyTypes",
    "typecheck:summary": "echo 'üìù TypeScript Summary:' && npm run typecheck --silent 2>&1 | grep -E '(error|warning)' | tail -5 || echo 'No type errors found'",
    "typecheck:watch": "tsc --noEmit --watch --incremental",
    "validate:production": "npm run test:edge-cases:full && npm run test:all && npm run security:scan",
    "workflow:dev": "npm run quality:fix && npm run test:fast && npm run build:fast",
    "workflow:emergency": "npm run quality:emergency && npm run test:ultra-fast && npm run build:clean",
    "workflow:prod": "npm run quality:prod && npm run test:ci:full && npm run build:production",
    "workflow:staging": "npm run quality:staging && npm run test:ci && npm run build"
  },
  "keywords": [
    "media",
    "management",
    "digital-asset-management",
    "file-organization",
    "content-management",
    "nodejs",
    "typescript",
    "react"
  ],
  "author": "MediaNest Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/medianest/medianest.git"
  },
  "bugs": {
    "url": "https://github.com/medianest/medianest/issues"
  },
  "homepage": "https://docs.medianest.com",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "dependencies": {
    "@types/express": "^4.17.17",
    "@types/node": "^20.0.0",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.1",
    "jsonwebtoken": "^9.0.2",
    "knex": "^2.5.1",
    "pg": "^8.16.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "redis": "^4.7.1",
    "typescript": "^5.6.0"
  },
  "devDependencies": {
    "@types/fluent-ffmpeg": "^2.1.21",
    "@types/jest": "^29.5.0",
    "@types/jsonwebtoken": "^9.0.2",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@typescript-eslint/eslint-plugin": "^8.43.0",
    "@typescript-eslint/parser": "^8.43.0",
    "@vitejs/plugin-react": "^5.0.2",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "concurrently": "^8.2.2",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-import": "^2.32.0",
    "jsdom": "^26.1.0",
    "node-cron": "^3.0.3",
    "rimraf": "^5.0.0",
    "standard-version": "^9.5.0",
    "supertest": "^7.1.4",
    "ts-node": "^10.9.2",
    "tsx": "^4.19.1",
    "vite": "^7.1.5",
    "vitest": "^3.2.4",
    "webpack-bundle-analyzer": "^4.10.2",
    "ws": "^8.18.0"
  },
  "optionalDependencies": {
    "ffmpeg-static": "^5.2.0",
    "fluent-ffmpeg": "^2.1.3",
    "pm2": "^6.0.10",
    "sharp": "^0.34.3"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "node scripts/prettier-dev-mode.js dev",
      "eslint --fix --cache"
    ],
    "*.{json,css,scss,md}": [
      "node scripts/prettier-dev-mode.js dev"
    ]
  }
}
