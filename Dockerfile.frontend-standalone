# 🌐 STANDALONE FRONTEND DOCKER BUILD - MediaNest
# Single-stage production-ready frontend container
# Next.js standalone with optimizations

FROM node:20-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    libc6-compat \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

WORKDIR /app

# Copy package.json and config files
COPY frontend/package.json ./package.json
COPY frontend/next.config.js ./next.config.js
COPY frontend/tailwind.config.ts ./tailwind.config.ts
COPY frontend/postcss.config.mjs ./postcss.config.mjs
COPY frontend/tsconfig.json ./tsconfig.json

# Remove package-lock.json to force fresh install
RUN rm -f package-lock.json

# Install dependencies with fresh resolution
RUN npm install --no-audit --no-fund --legacy-peer-deps && \
    npm cache clean --force

# Copy source code
COPY frontend/src ./src
COPY frontend/public ./public

# Build Next.js application
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

RUN npm run build && \
    rm -rf src/ .next/cache && \
    find .next -name "*.map" -delete 2>/dev/null || true

# Create optimized entrypoint
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/sh
set -e

# Health check
if [ "$1" = "healthcheck" ]; then
    curl -f http://localhost:3000/api/health || exit 1
fi

# Start Next.js
if [ -f ".next/standalone/server.js" ]; then
    exec dumb-init node .next/standalone/server.js
else
    exec dumb-init npm start
fi
EOF

RUN chmod +x /app/entrypoint.sh && \
    chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Runtime configuration
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    NODE_OPTIONS="--max-old-space-size=512" \
    HOSTNAME="0.0.0.0" \
    PORT=3000

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/entrypoint.sh healthcheck

ENTRYPOINT ["/app/entrypoint.sh"]