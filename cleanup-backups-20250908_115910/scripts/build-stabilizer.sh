#!/bin/bash\n\n# 🚀 Build Stabilization Script for MediaNest\n# Comprehensive build process with error handling and optimization\n\nset -e  # Exit on any error\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Build configuration\nBUILD_START_TIME=$(date +%s)\nPROJECT_ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/..\" && pwd)\"\nBUILD_LOG=\"$PROJECT_ROOT/build.log\"\nMAX_BUILD_TIME=300  # 5 minutes\nTARGET_BUNDLE_SIZE=500  # KB\n\necho -e \"${BLUE}🚀 MediaNest Build Stabilization Pipeline${NC}\"\necho -e \"${BLUE}===========================================${NC}\"\necho \"📁 Project Root: $PROJECT_ROOT\"\necho \"📝 Build Log: $BUILD_LOG\"\necho \"⏱️  Max Build Time: ${MAX_BUILD_TIME}s\"\necho \"🎯 Target Bundle Size: ${TARGET_BUNDLE_SIZE}KB\"\necho \"\"\n\n# Initialize build log\necho \"[$(date)] Build stabilization started\" > \"$BUILD_LOG\"\n\n# Function to log with timestamp\nlog() {\n    echo \"[$(date)] $1\" | tee -a \"$BUILD_LOG\"\n}\n\n# Function to check build time\ncheck_build_time() {\n    local current_time=$(date +%s)\n    local elapsed=$((current_time - BUILD_START_TIME))\n    \n    if [ $elapsed -gt $MAX_BUILD_TIME ]; then\n        echo -e \"${RED}❌ Build timeout exceeded (${elapsed}s > ${MAX_BUILD_TIME}s)${NC}\"\n        exit 1\n    fi\n    \n    echo -e \"${GREEN}⏱️  Build time: ${elapsed}s${NC}\"\n}\n\n# Function to cleanup on exit\ncleanup() {\n    local exit_code=$?\n    local end_time=$(date +%s)\n    local total_time=$((end_time - BUILD_START_TIME))\n    \n    if [ $exit_code -eq 0 ]; then\n        echo -e \"${GREEN}✅ Build completed successfully in ${total_time}s${NC}\"\n        log \"Build completed successfully in ${total_time}s\"\n    else\n        echo -e \"${RED}❌ Build failed after ${total_time}s (exit code: $exit_code)${NC}\"\n        log \"Build failed after ${total_time}s (exit code: $exit_code)\"\n    fi\n}\n\ntrap cleanup EXIT\n\n# Change to project directory\ncd \"$PROJECT_ROOT\"\n\n# Step 1: Environment Setup and Validation\necho -e \"${BLUE}🔍 Step 1: Environment Setup and Validation${NC}\"\nlog \"Step 1: Environment setup started\"\n\n# Check Node.js version\nNODE_VERSION=$(node --version)\necho \"📦 Node.js version: $NODE_VERSION\"\n\nif ! node --version | grep -q \"v20\"; then\n    echo -e \"${YELLOW}⚠️  Warning: Node.js 20 recommended, found $NODE_VERSION${NC}\"\nfi\n\n# Check npm version\nNPM_VERSION=$(npm --version)\necho \"📦 npm version: $NPM_VERSION\"\n\n# Check available disk space\nDISK_SPACE=$(df -h . | awk 'NR==2 {print $4}')\necho \"💾 Available disk space: $DISK_SPACE\"\n\n# Verify project structure\nrequired_dirs=(\"backend\" \"frontend\" \"shared\")\nfor dir in \"${required_dirs[@]}\"; do\n    if [ ! -d \"$dir\" ]; then\n        echo -e \"${RED}❌ Missing required directory: $dir${NC}\"\n        exit 1\n    fi\ndone\necho -e \"${GREEN}✅ Project structure validated${NC}\"\n\ncheck_build_time\n\n# Step 2: Dependency Management\necho -e \"\\n${BLUE}📦 Step 2: Dependency Management${NC}\"\nlog \"Step 2: Dependency management started\"\n\n# Clean npm cache\necho \"🧹 Cleaning npm cache...\"\nnpm cache clean --force >> \"$BUILD_LOG\" 2>&1\n\n# Install dependencies with optimization\necho \"📥 Installing dependencies...\"\nif ! npm ci --prefer-offline --no-audit --no-fund >> \"$BUILD_LOG\" 2>&1; then\n    echo -e \"${RED}❌ Failed to install dependencies${NC}\"\n    log \"Failed to install dependencies\"\n    exit 1\nfi\n\n# Check dependency sizes\necho \"📊 Analyzing dependency sizes...\"\nfor workspace in \"\" \"backend\" \"frontend\" \"shared\"; do\n    node_modules_path=\"${workspace:+$workspace/}node_modules\"\n    if [ -d \"$node_modules_path\" ]; then\n        size=$(du -sh \"$node_modules_path\" | cut -f1)\n        echo \"  📦 ${workspace:-root} dependencies: $size\"\n        log \"Dependency size - ${workspace:-root}: $size\"\n    fi\ndone\n\necho -e \"${GREEN}✅ Dependencies installed successfully${NC}\"\ncheck_build_time\n\n# Step 3: TypeScript Compilation Fixes\necho -e \"\\n${BLUE}🔧 Step 3: TypeScript Compilation Fixes${NC}\"\nlog \"Step 3: TypeScript fixes started\"\n\n# Run TypeScript fixer if available\nif [ -f \"scripts/typescript-fixer.js\" ]; then\n    echo \"🔨 Running automated TypeScript fixes...\"\n    if node scripts/typescript-fixer.js fix >> \"$BUILD_LOG\" 2>&1; then\n        echo -e \"${GREEN}✅ TypeScript fixes applied successfully${NC}\"\n        log \"TypeScript fixes applied successfully\"\n    else\n        echo -e \"${YELLOW}⚠️  Some TypeScript issues may require manual fixes${NC}\"\n        log \"TypeScript fixes partially completed\"\n    fi\nelse\n    echo \"⚠️  TypeScript fixer not found, skipping automated fixes\"\nfi\n\n# Test TypeScript compilation\necho \"🔍 Testing TypeScript compilation...\"\nif cd backend && npm run type-check >> \"$BUILD_LOG\" 2>&1; then\n    echo -e \"${GREEN}✅ Backend TypeScript compilation successful${NC}\"\n    cd ..\nelse\n    echo -e \"${YELLOW}⚠️  Backend TypeScript issues detected${NC}\"\n    cd ..\n    log \"Backend TypeScript compilation has issues\"\nfi\n\nif cd frontend && npm run type-check >> \"$BUILD_LOG\" 2>&1; then\n    echo -e \"${GREEN}✅ Frontend TypeScript compilation successful${NC}\"\n    cd ..\nelse\n    echo -e \"${YELLOW}⚠️  Frontend TypeScript issues detected${NC}\"\n    cd ..\n    log \"Frontend TypeScript compilation has issues\"\nfi\n\ncheck_build_time\n\n# Step 4: Build Configuration Optimization\necho -e \"\\n${BLUE}⚙️  Step 4: Build Configuration Optimization${NC}\"\nlog \"Step 4: Build optimization started\"\n\n# Apply optimized Next.js configuration\nif [ -f \"frontend/next.config.optimized.js\" ]; then\n    echo \"🚀 Applying optimized Next.js configuration...\"\n    \n    # Backup current config\n    if [ -f \"frontend/next.config.js\" ] && [ ! -f \"frontend/next.config.js.backup-pre-optimization\" ]; then\n        cp \"frontend/next.config.js\" \"frontend/next.config.js.backup-pre-optimization\"\n        log \"Backed up current Next.js configuration\"\n    fi\n    \n    # Use optimized configuration\n    cp \"frontend/next.config.optimized.js\" \"frontend/next.config.js\"\n    echo -e \"${GREEN}✅ Optimized Next.js configuration applied${NC}\"\n    log \"Applied optimized Next.js configuration\"\nelse\n    echo \"⚠️  Optimized Next.js configuration not found\"\nfi\n\n# Run build performance optimizer if available\nif [ -f \"scripts/build-performance-enhancer.js\" ]; then\n    echo \"📊 Running build performance optimization...\"\n    if node scripts/build-performance-enhancer.js analyze >> \"$BUILD_LOG\" 2>&1; then\n        echo -e \"${GREEN}✅ Build performance analysis completed${NC}\"\n        log \"Build performance analysis completed\"\n    else\n        echo -e \"${YELLOW}⚠️  Build performance analysis had issues${NC}\"\n        log \"Build performance analysis had issues\"\n    fi\nfi\n\ncheck_build_time\n\n# Step 5: Clean Build Process\necho -e \"\\n${BLUE}🏗️  Step 5: Clean Build Process${NC}\"\nlog \"Step 5: Build process started\"\n\n# Clean previous builds\necho \"🧹 Cleaning previous build artifacts...\"\nrm -rf backend/dist frontend/.next shared/dist\nlog \"Cleaned previous build artifacts\"\n\n# Build shared dependencies first\necho \"🔧 Building shared dependencies...\"\nif cd shared && npm run build >> \"$BUILD_LOG\" 2>&1; then\n    echo -e \"${GREEN}✅ Shared dependencies built successfully${NC}\"\n    cd ..\n    log \"Shared dependencies built successfully\"\nelse\n    echo -e \"${RED}❌ Failed to build shared dependencies${NC}\"\n    cd ..\n    log \"Failed to build shared dependencies\"\n    exit 1\nfi\n\ncheck_build_time\n\n# Build backend\necho \"🔧 Building backend...\"\nBACKEND_START_TIME=$(date +%s)\nif cd backend && npm run build >> \"$BUILD_LOG\" 2>&1; then\n    BACKEND_END_TIME=$(date +%s)\n    BACKEND_BUILD_TIME=$((BACKEND_END_TIME - BACKEND_START_TIME))\n    echo -e \"${GREEN}✅ Backend built successfully in ${BACKEND_BUILD_TIME}s${NC}\"\n    cd ..\n    log \"Backend built successfully in ${BACKEND_BUILD_TIME}s\"\nelse\n    echo -e \"${RED}❌ Failed to build backend${NC}\"\n    cd ..\n    log \"Failed to build backend\"\n    exit 1\nfi\n\ncheck_build_time\n\n# Build frontend\necho \"🎨 Building frontend...\"\nFRONTEND_START_TIME=$(date +%s)\nif cd frontend && npm run build >> \"$BUILD_LOG\" 2>&1; then\n    FRONTEND_END_TIME=$(date +%s)\n    FRONTEND_BUILD_TIME=$((FRONTEND_END_TIME - FRONTEND_START_TIME))\n    echo -e \"${GREEN}✅ Frontend built successfully in ${FRONTEND_BUILD_TIME}s${NC}\"\n    cd ..\n    log \"Frontend built successfully in ${FRONTEND_BUILD_TIME}s\"\nelse\n    echo -e \"${RED}❌ Failed to build frontend${NC}\"\n    cd ..\n    log \"Failed to build frontend\"\n    exit 1\nfi\n\ncheck_build_time\n\n# Step 6: Build Verification and Analysis\necho -e \"\\n${BLUE}📊 Step 6: Build Verification and Analysis${NC}\"\nlog \"Step 6: Build verification started\"\n\n# Verify build artifacts\necho \"🔍 Verifying build artifacts...\"\nif [ -d \"backend/dist\" ]; then\n    backend_files=$(find backend/dist -name \"*.js\" | wc -l)\n    echo \"  🔧 Backend: $backend_files JS files generated\"\n    log \"Backend build verification: $backend_files JS files\"\nelse\n    echo -e \"${RED}❌ Backend build artifacts missing${NC}\"\n    exit 1\nfi\n\nif [ -d \"frontend/.next\" ]; then\n    echo \"  🎨 Frontend: Build artifacts present\"\n    \n    # Analyze bundle size if possible\n    if [ -d \"frontend/.next/static\" ]; then\n        bundle_size=$(find frontend/.next/static -name \"*.js\" -exec du -cb {} + 2>/dev/null | tail -1 | cut -f1 || echo \"0\")\n        if [ \"$bundle_size\" -gt 0 ]; then\n            bundle_size_kb=$((bundle_size / 1024))\n            echo \"  📦 Bundle size: ${bundle_size_kb}KB\"\n            log \"Bundle size: ${bundle_size_kb}KB\"\n            \n            if [ \"$bundle_size_kb\" -le \"$TARGET_BUNDLE_SIZE\" ]; then\n                echo -e \"  ${GREEN}✅ Bundle size within target (<${TARGET_BUNDLE_SIZE}KB)${NC}\"\n            else\n                echo -e \"  ${YELLOW}⚠️  Bundle size exceeds target (${bundle_size_kb}KB > ${TARGET_BUNDLE_SIZE}KB)${NC}\"\n            fi\n        fi\n        \n        # Count chunks\n        chunk_count=$(find frontend/.next/static -name \"*.js\" | wc -l)\n        echo \"  📂 Chunks generated: $chunk_count\"\n        log \"Chunks generated: $chunk_count\"\n    fi\nelse\n    echo -e \"${RED}❌ Frontend build artifacts missing${NC}\"\n    exit 1\nfi\n\necho -e \"${GREEN}✅ Build verification completed${NC}\"\n\n# Step 7: Performance Summary\necho -e \"\\n${BLUE}🎯 Step 7: Performance Summary${NC}\"\nlog \"Step 7: Performance summary\"\n\nBUILD_END_TIME=$(date +%s)\nTOTAL_BUILD_TIME=$((BUILD_END_TIME - BUILD_START_TIME))\n\necho -e \"${GREEN}📊 BUILD PERFORMANCE SUMMARY${NC}\"\necho -e \"${GREEN}=============================${NC}\"\necho \"⏱️  Total Build Time: ${TOTAL_BUILD_TIME}s\"\necho \"🔧 Backend Build Time: ${BACKEND_BUILD_TIME:-N/A}s\"\necho \"🎨 Frontend Build Time: ${FRONTEND_BUILD_TIME:-N/A}s\"\n\nif [ \"$bundle_size_kb\" ]; then\n    echo \"📦 Bundle Size: ${bundle_size_kb}KB\"\nfi\n\n# Performance targets check\necho -e \"\\n🎯 OPTIMIZATION TARGETS:\"\nif [ \"$TOTAL_BUILD_TIME\" -le \"$MAX_BUILD_TIME\" ]; then\n    echo -e \"  Build Time: ${GREEN}✅ Achieved${NC} (${TOTAL_BUILD_TIME}s < ${MAX_BUILD_TIME}s)\"\nelse\n    echo -e \"  Build Time: ${RED}❌ Exceeded${NC} (${TOTAL_BUILD_TIME}s > ${MAX_BUILD_TIME}s)\"\nfi\n\nif [ \"$bundle_size_kb\" ] && [ \"$bundle_size_kb\" -le \"$TARGET_BUNDLE_SIZE\" ]; then\n    echo -e \"  Bundle Size: ${GREEN}✅ Achieved${NC} (${bundle_size_kb}KB < ${TARGET_BUNDLE_SIZE}KB)\"\nelif [ \"$bundle_size_kb\" ]; then\n    echo -e \"  Bundle Size: ${RED}❌ Exceeded${NC} (${bundle_size_kb}KB > ${TARGET_BUNDLE_SIZE}KB)\"\nelse\n    echo -e \"  Bundle Size: ${YELLOW}⚠️  Unknown${NC}\"\nfi\n\n# Save performance metrics\ncat > build-metrics.json << EOF\n{\n  \"timestamp\": \"$(date -Iseconds)\",\n  \"buildTime\": $TOTAL_BUILD_TIME,\n  \"backendBuildTime\": ${BACKEND_BUILD_TIME:-0},\n  \"frontendBuildTime\": ${FRONTEND_BUILD_TIME:-0},\n  \"bundleSize\": ${bundle_size_kb:-0},\n  \"chunkCount\": ${chunk_count:-0},\n  \"targets\": {\n    \"buildTime\": $MAX_BUILD_TIME,\n    \"bundleSize\": $TARGET_BUNDLE_SIZE\n  },\n  \"success\": true\n}\nEOF\n\nlog \"Performance metrics saved to build-metrics.json\"\n\n# Optional: Run tests if requested\nif [ \"$1\" = \"--with-tests\" ]; then\n    echo -e \"\\n${BLUE}🧪 Running tests...${NC}\"\n    if npm run test >> \"$BUILD_LOG\" 2>&1; then\n        echo -e \"${GREEN}✅ Tests passed${NC}\"\n    else\n        echo -e \"${YELLOW}⚠️  Some tests failed${NC}\"\n    fi\nfi\n\nlog \"Build stabilization completed successfully\"\necho -e \"\\n${GREEN}🎉 Build stabilization completed successfully!${NC}\"\necho -e \"${GREEN}📋 Check build.log for detailed information${NC}\"\necho -e \"${GREEN}📊 Performance metrics saved to build-metrics.json${NC}\"\n"