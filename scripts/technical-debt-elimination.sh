#!/bin/bash

#########################################################################################################
# TECHNICAL DEBT ELIMINATION AUTOMATION SCRIPT
# MediaNest Project - Comprehensive Cleanup with Safety Validations
# Generated by: Technical Debt Elimination Hive-Mind (8 specialized agents)
# Coordination: TECH_DEBT_ELIMINATION_2025_09_09
# Authority: Queen Agent with comprehensive risk assessment
#########################################################################################################

set -euo pipefail  # Exit on any error, undefined variable, or pipe failure

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
BACKUP_DIR="$PROJECT_ROOT/backups/tech-debt-elimination-$(date +%Y%m%d-%H%M%S)"
LOG_FILE="$PROJECT_ROOT/logs/tech-debt-elimination.log"

# Create necessary directories
mkdir -p "$(dirname "$LOG_FILE")" "$BACKUP_DIR"

#########################################################################################################
# LOGGING AND UTILITIES
#########################################################################################################

log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${timestamp} [${level}] ${message}" | tee -a "$LOG_FILE"
}

log_info() {
    log "INFO" "${BLUE}$*${NC}"
}

log_success() {
    log "SUCCESS" "${GREEN}$*${NC}"
}

log_warning() {
    log "WARNING" "${YELLOW}$*${NC}"
}

log_error() {
    log "ERROR" "${RED}$*${NC}"
}

log_phase() {
    log "PHASE" "${PURPLE}$*${NC}"
}

#########################################################################################################
# SAFETY VALIDATION FUNCTIONS
#########################################################################################################

validate_git_status() {
    log_info "Validating Git repository status..."
    
    if ! git status &>/dev/null; then
        log_error "Not in a Git repository. Aborting for safety."
        exit 1
    fi
    
    if [[ -n $(git status --porcelain) ]]; then
        log_warning "Working directory has uncommitted changes."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Aborting cleanup. Commit your changes first."
            exit 1
        fi
    fi
    
    log_success "Git status validation passed"
}

create_backup() {
    log_info "Creating comprehensive backup..."
    
    # Create git backup branch
    local backup_branch="tech-debt-elimination-backup-$(date +%Y%m%d-%H%M%S)"
    git checkout -b "$backup_branch" &>/dev/null
    git checkout - &>/dev/null
    log_success "Git backup branch created: $backup_branch"
    
    # Create file system backup of critical files
    rsync -av --exclude='node_modules' --exclude='.git' \
        "$PROJECT_ROOT/" "$BACKUP_DIR/" &>/dev/null
    log_success "File system backup created: $BACKUP_DIR"
}

validate_tests() {
    log_info "Running test suite validation..."
    
    if [[ "$SKIP_TESTS" == "true" ]]; then
        log_warning "Skipping tests as requested"
        return 0
    fi
    
    # Try to run tests (with timeout)
    if timeout 300 npm test &>>"$LOG_FILE"; then
        log_success "Test suite passed"
        return 0
    else
        local exit_code=$?
        if [[ $exit_code -eq 124 ]]; then
            log_warning "Tests timed out after 5 minutes"
        else
            log_warning "Tests failed (exit code: $exit_code)"
        fi
        
        if [[ "$FORCE_CONTINUE" != "true" ]]; then
            read -p "Tests failed. Continue with cleanup? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log_error "Aborting due to test failures"
                exit 1
            fi
        fi
    fi
}

validate_build() {
    log_info "Validating build process..."
    
    if [[ "$SKIP_BUILD" == "true" ]]; then
        log_warning "Skipping build validation as requested"
        return 0
    fi
    
    # Try backend build
    if cd "$PROJECT_ROOT/backend" && timeout 180 npm run build &>>"$LOG_FILE"; then
        log_success "Backend build successful"
    else
        log_warning "Backend build failed or timed out"
        if [[ "$FORCE_CONTINUE" != "true" ]]; then
            read -p "Backend build failed. Continue? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
        fi
    fi
    
    # Try frontend build
    if cd "$PROJECT_ROOT/frontend" && timeout 180 npm run build &>>"$LOG_FILE"; then
        log_success "Frontend build successful"
    else
        log_warning "Frontend build failed or timed out"
    fi
    
    cd "$PROJECT_ROOT"
}

#########################################################################################################
# PHASE 1: CRITICAL SYSTEM RECOVERY
#########################################################################################################

phase1_system_recovery() {
    log_phase "üö® PHASE 1: CRITICAL SYSTEM RECOVERY (MANDATORY FIRST)"
    
    log_info "This phase addresses critical infrastructure failures identified by Safety Validation Agent"
    log_warning "205 test failures, backend build broken, TypeScript errors detected"
    
    read -p "Execute Phase 1 system recovery? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_error "Phase 1 is mandatory for safe cleanup. Aborting."
        exit 1
    fi
    
    # Install missing dependencies
    log_info "Installing missing TypeScript dependencies..."
    if cd "$PROJECT_ROOT/backend" && npm install --save-dev @types/bcrypt &>>"$LOG_FILE"; then
        log_success "Missing TypeScript dependencies installed"
    else
        log_warning "Failed to install some dependencies"
    fi
    
    # Fix ESLint configuration
    log_info "Checking ESLint configuration..."
    if [[ -f "$PROJECT_ROOT/.eslintrc.js" || -f "$PROJECT_ROOT/.eslintrc.json" ]]; then
        log_success "ESLint configuration found"
    else
        log_warning "ESLint configuration may need repair"
    fi
    
    # Validate TypeScript configuration
    log_info "Validating TypeScript configuration..."
    if npx tsc --noEmit &>>"$LOG_FILE"; then
        log_success "TypeScript validation passed"
    else
        log_warning "TypeScript validation failed - manual intervention may be required"
    fi
    
    cd "$PROJECT_ROOT"
    log_success "Phase 1 system recovery attempted"
}

#########################################################################################################
# PHASE 2: DEAD CODE ELIMINATION
#########################################################################################################

remove_dead_code() {
    log_phase "üóëÔ∏è PHASE 2A: DEAD CODE ELIMINATION (42-47KB identified)"
    
    local files_removed=0
    local bytes_saved=0
    
    # Remove duplicate server files (HIGH CONFIDENCE)
    log_info "Removing duplicate server files..."
    for file in "backend/src/server-simple.ts" "backend/src/server-minimal.ts"; do
        if [[ -f "$PROJECT_ROOT/$file" ]]; then
            local size=$(stat -f%z "$PROJECT_ROOT/$file" 2>/dev/null || stat -c%s "$PROJECT_ROOT/$file" 2>/dev/null || echo "0")
            rm "$PROJECT_ROOT/$file"
            log_success "Removed: $file (${size} bytes)"
            ((files_removed++))
            ((bytes_saved += size))
        fi
    done
    
    # Remove backup files
    log_info "Removing backup files (.backup, .tmp, .bak)..."
    find "$PROJECT_ROOT" -type f \( -name "*.backup" -o -name "*.tmp" -o -name "*.bak" \) \
        -not -path "*/node_modules/*" -not -path "*/.git/*" | while read -r file; do
        if [[ -f "$file" ]]; then
            local size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
            rm "$file"
            log_success "Removed backup: $(basename "$file") (${size} bytes)"
            ((files_removed++))
            ((bytes_saved += size))
        fi
    done
    
    # Remove debug console statements (CAUTIOUS APPROACH)
    log_info "Scanning for debug console statements..."
    local console_files=$(grep -r "console\.log" "$PROJECT_ROOT/src" "$PROJECT_ROOT/backend/src" "$PROJECT_ROOT/frontend/src" 2>/dev/null | wc -l || echo "0")
    if [[ $console_files -gt 0 ]]; then
        log_warning "Found $console_files console.log statements"
        log_info "Manual review recommended for console.log removal"
    fi
    
    log_success "Dead code elimination completed: $files_removed files removed, $bytes_saved bytes saved"
}

#########################################################################################################
# PHASE 2B: CONFIGURATION CONSOLIDATION
#########################################################################################################

consolidate_configurations() {
    log_phase "‚öôÔ∏è PHASE 2B: CONFIGURATION CONSOLIDATION (47% reduction potential)"
    
    # Environment file consolidation
    log_info "Analyzing environment file duplication..."
    local env_files=(
        ".env.production.example"
        ".env.example" 
        "backend/.env.test"
        "config/environments/.env.development"
        "config/environments/.env.test"
    )
    
    for env_file in "${env_files[@]}"; do
        if [[ -f "$PROJECT_ROOT/$env_file" ]]; then
            log_info "Found environment file: $env_file"
            # NOTE: Not automatically removing - requires manual review
        fi
    done
    
    # Package.json script analysis
    log_info "Analyzing package.json script duplication..."
    if [[ -f "$PROJECT_ROOT/package.json" ]]; then
        local script_count=$(jq -r '.scripts | keys | length' "$PROJECT_ROOT/package.json" 2>/dev/null || echo "unknown")
        log_info "Root package.json has $script_count scripts"
    fi
    
    log_warning "Configuration consolidation requires manual review - see audit report for details"
}

#########################################################################################################
# PHASE 2C: DATABASE SCHEMA OPTIMIZATION  
#########################################################################################################

optimize_database_schema() {
    log_phase "üóÑÔ∏è PHASE 2C: DATABASE SCHEMA OPTIMIZATION"
    
    # Remove duplicate frontend Prisma schema
    if [[ -f "$PROJECT_ROOT/frontend/prisma/schema.prisma" ]]; then
        log_warning "Found duplicate Prisma schema in frontend/"
        log_info "Backend schema at backend/prisma/schema.prisma is the source of truth"
        
        read -p "Remove duplicate frontend Prisma schema? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            mv "$PROJECT_ROOT/frontend/prisma/schema.prisma" "$BACKUP_DIR/frontend-schema.prisma.backup"
            log_success "Moved duplicate schema to backup"
        fi
    fi
    
    # Remove experimental Prisma client
    if [[ -f "$PROJECT_ROOT/backend/src/lib/optimized-prisma.ts" ]]; then
        log_warning "Found experimental Prisma client"
        
        read -p "Remove experimental optimized-prisma.ts? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            mv "$PROJECT_ROOT/backend/src/lib/optimized-prisma.ts" "$BACKUP_DIR/optimized-prisma.ts.backup"
            log_success "Moved experimental Prisma client to backup"
        fi
    fi
}

#########################################################################################################
# PHASE 2D: ASSET CLEANUP
#########################################################################################################

cleanup_assets() {
    log_phase "üé® PHASE 2D: ASSET CLEANUP (A+ hygiene, minimal cleanup needed)"
    
    log_info "Asset Cleanup Agent reported A+ hygiene score (95/100)"
    log_info "Only 1.8KB of potential cleanup identified"
    
    # Clean generated test artifacts
    log_info "Removing generated test artifacts..."
    local artifacts=(
        "coverage/favicon.ico"
        "test-results/sprites/"
    )
    
    for artifact in "${artifacts[@]}"; do
        if [[ -e "$PROJECT_ROOT/$artifact" ]]; then
            rm -rf "$PROJECT_ROOT/$artifact"
            log_success "Removed test artifact: $artifact"
        fi
    done
    
    # Check frontend assets (require verification)
    local frontend_assets=(
        "frontend/public/plex-logo.svg"
        "frontend/public/images/poster-placeholder.svg"
    )
    
    log_info "Frontend assets requiring verification:"
    for asset in "${frontend_assets[@]}"; do
        if [[ -f "$PROJECT_ROOT/$asset" ]]; then
            log_warning "Found: $asset (manual verification recommended)"
        fi
    done
}

#########################################################################################################
# VALIDATION AND TESTING
#########################################################################################################

run_post_cleanup_validation() {
    log_phase "üõ°Ô∏è POST-CLEANUP VALIDATION"
    
    log_info "Running comprehensive post-cleanup validation..."
    
    # Validate builds
    validate_build
    
    # Validate tests (if not skipped)
    validate_tests
    
    # Check for obvious issues
    log_info "Checking for missing dependencies..."
    if cd "$PROJECT_ROOT" && npm ls &>>"$LOG_FILE"; then
        log_success "Dependencies check passed"
    else
        log_warning "Some dependency issues detected"
    fi
    
    # TypeScript validation
    log_info "Final TypeScript validation..."
    if cd "$PROJECT_ROOT/backend" && npx tsc --noEmit &>>"$LOG_FILE"; then
        log_success "Backend TypeScript validation passed"
    else
        log_warning "Backend TypeScript validation failed"
    fi
    
    if cd "$PROJECT_ROOT/frontend" && npx tsc --noEmit &>>"$LOG_FILE"; then
        log_success "Frontend TypeScript validation passed"
    else
        log_warning "Frontend TypeScript validation failed"
    fi
    
    cd "$PROJECT_ROOT"
}

#########################################################################################################
# IMPACT REPORTING
#########################################################################################################

generate_impact_report() {
    log_phase "üìä GENERATING IMPACT REPORT"
    
    local report_file="$PROJECT_ROOT/analysis/cleanup-impact-report-$(date +%Y%m%d-%H%M%S).md"
    mkdir -p "$(dirname "$report_file")"
    
    cat > "$report_file" << EOF
# Technical Debt Elimination Impact Report

**Date**: $(date '+%Y-%m-%d %H:%M:%S')
**Script Version**: Technical Debt Elimination Hive-Mind v1.0
**Backup Location**: $BACKUP_DIR

## Cleanup Summary

### Files Processed
- Dead code elimination: Attempted
- Configuration consolidation: Analyzed  
- Database schema optimization: Reviewed
- Asset cleanup: Minimal changes (A+ hygiene)

### Safety Validations
- Git backup created: ‚úÖ
- File system backup: ‚úÖ ($BACKUP_DIR)
- Build validation: $(validate_build &>/dev/null && echo "‚úÖ" || echo "‚ö†Ô∏è")
- Test validation: $(validate_tests &>/dev/null && echo "‚úÖ" || echo "‚ö†Ô∏è")

### Key Findings
- **Asset Management**: A+ score (95/100) - Exceptional practices
- **Configuration Sprawl**: 47% reduction potential identified
- **Dead Code**: 42-47KB removal opportunities
- **Database Schema**: Critical duplication issues found

### Recommendations
1. Complete Phase 1 system recovery (critical infrastructure repair)
2. Manual review of TODO/FIXME items (25+ security-critical items)
3. Configuration consolidation execution
4. Database schema deduplication

## Next Steps
See comprehensive audit report: docs/TECHNICAL_DEBT_ELIMINATION_AUDIT.md

EOF

    log_success "Impact report generated: $report_file"
}

#########################################################################################################
# MAIN EXECUTION FUNCTION
#########################################################################################################

show_usage() {
    cat << EOF
Usage: $0 [OPTIONS] [PHASES]

Technical Debt Elimination Script for MediaNest Project
Generated by comprehensive 8-agent hive-mind analysis

OPTIONS:
  --dry-run          Show what would be done without making changes
  --skip-tests       Skip test validation
  --skip-build       Skip build validation  
  --force            Continue even if validations fail
  --phase1-only      Execute only Phase 1 (system recovery)
  --phase2-only      Execute only Phase 2 (cleanup) - requires Phase 1 first
  --help             Show this help message

PHASES:
  phase1             Critical system recovery (MANDATORY FIRST)
  phase2             Surgical technical debt elimination
  all                Execute both phases (default)

EXAMPLES:
  $0                           # Full cleanup with validations
  $0 --dry-run                 # Preview changes without executing
  $0 --phase1-only             # Fix critical infrastructure only
  $0 phase2 --skip-tests       # Cleanup only, skip tests
  $0 --force                   # Continue despite validation failures

SAFETY:
  - Comprehensive backups created automatically
  - Git branch backup created
  - All changes can be rolled back
  - Critical system validation before execution
  
EOF
}

main() {
    local dry_run=false
    local phase1_only=false
    local phase2_only=false
    local skip_tests=false
    local skip_build=false
    local force_continue=false
    local phases=()
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                dry_run=true
                ;;
            --phase1-only)
                phase1_only=true
                ;;
            --phase2-only)  
                phase2_only=true
                ;;
            --skip-tests)
                skip_tests=true
                ;;
            --skip-build)
                skip_build=true
                ;;
            --force)
                force_continue=true
                ;;
            --help)
                show_usage
                exit 0
                ;;
            phase1|phase2|all)
                phases+=("$1")
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
        shift
    done
    
    # Default to all phases if none specified
    if [[ ${#phases[@]} -eq 0 ]]; then
        phases=("all")
    fi
    
    # Export configuration
    export SKIP_TESTS="$skip_tests"
    export SKIP_BUILD="$skip_build" 
    export FORCE_CONTINUE="$force_continue"
    
    log_phase "üßπ TECHNICAL DEBT ELIMINATION HIVE-MIND INITIATED"
    log_info "MediaNest Project - Comprehensive Cleanup with Safety Validations"
    log_info "Generated by 8 specialized agents under Queen Agent coordination"
    log_info "Backup location: $BACKUP_DIR"
    
    if [[ "$dry_run" == "true" ]]; then
        log_warning "DRY RUN MODE - No changes will be made"
        log_info "This would execute the following phases: ${phases[*]}"
        return 0
    fi
    
    # Critical safety validations
    validate_git_status
    create_backup
    
    # Execute phases
    for phase in "${phases[@]}"; do
        case $phase in
            "phase1"|"all")
                if [[ "$phase2_only" != "true" ]]; then
                    phase1_system_recovery
                fi
                ;;&
            "phase2"|"all")
                if [[ "$phase1_only" != "true" ]]; then
                    remove_dead_code
                    consolidate_configurations
                    optimize_database_schema
                    cleanup_assets
                fi
                ;;
        esac
    done
    
    # Final validation and reporting
    run_post_cleanup_validation
    generate_impact_report
    
    log_success "üéâ TECHNICAL DEBT ELIMINATION MISSION COMPLETE"
    log_info "Comprehensive audit report: docs/TECHNICAL_DEBT_ELIMINATION_AUDIT.md"
    log_info "Backup location: $BACKUP_DIR" 
    log_info "Impact report generated with detailed metrics"
    
    log_warning "IMPORTANT: Review the audit report for manual tasks requiring completion"
    log_warning "Particularly: TODO/FIXME security items, configuration consolidation, system recovery validation"
}

# Execute main function with all arguments
main "$@"