{
  "codeSmells": {
    "duplicateCode": {
      "severity": "HIGH",
      "instances": 45,
      "locations": [
        "backend/src/services/*: Similar async function patterns",
        "tests/integration/*: Repeated API test setup patterns",
        "frontend/src/components/*: Duplicated error handling",
        "Multiple files: Repeated try/catch blocks with similar structure"
      ],
      "quickWins": [
        "Extract common error handling utility",
        "Create shared API testing helper functions",
        "Consolidate async function patterns into base classes"
      ]
    },
    "godObjects": {
      "severity": "MEDIUM",
      "instances": 3,
      "locations": [
        "tests/security/comprehensive-security-test-suite.ts (825 lines)",
        "backend/src/services/email.service.ts (684 lines)",
        "tests/integration/api-gateway-service-coordination-test.ts (666 lines)"
      ],
      "quickWins": [
        "Split large test files by functionality",
        "Extract email service into smaller specialized services",
        "Break down API gateway tests into focused test suites"
      ]
    },
    "consoleLogging": {
      "severity": "MEDIUM",
      "instances": 25,
      "locations": [
        "tests/integration/comprehensive-api-coordination-runner.ts: 15+ console.log statements",
        "Dockerfile.test: console.log in startup script",
        "tests/cypress.config.ts: console.log in configuration"
      ],
      "quickWins": [
        "Replace console.log with proper logging framework",
        "Remove debug console statements from production code",
        "Use proper test reporting instead of console output"
      ]
    },
    "typeUnsafety": {
      "severity": "MEDIUM",
      "instances": 20,
      "locations": [
        "tests/integration/helpers/api-gateway-test-helpers.ts: Multiple 'any' types",
        "tests/cypress/support/commands.ts: any in checkAccessibility",
        "Error handling: catch (error: any) patterns"
      ],
      "quickWins": [
        "Replace 'any' types with proper interfaces",
        "Create type-safe error handling patterns",
        "Add strict TypeScript configuration"
      ]
    }
  },
  "antiPatterns": {
    "callback": {
      "severity": "LOW",
      "instances": 15,
      "locations": [
        "docs/SECURITY_ARCHITECTURE_STRATEGY.md: callback patterns in examples",
        "docs/ERROR_HANDLING_LOGGING_STRATEGY.md: callback() usage"
      ],
      "note": "Mostly in documentation examples, not actual code"
    },
    "mixedModuleSystems": {
      "severity": "LOW",
      "instances": 10,
      "locations": [
        "frontend/.next/server/*.js: Generated build files with require()",
        "deployment/scripts/rollback.sh: Node.js require() in bash script"
      ],
      "note": "Primarily in generated files and deployment scripts"
    },
    "environmentVariableSpread": {
      "severity": "HIGH",
      "instances": 219,
      "locations": [
        "219 files access process.env directly",
        "No centralized configuration management",
        "Potential for inconsistent environment handling"
      ],
      "quickWins": [
        "Create centralized config service",
        "Implement environment validation",
        "Add configuration schema validation"
      ]
    },
    "emptyErrorHandling": {
      "severity": "MEDIUM",
      "instances": 8,
      "locations": [
        "tests/integration/helpers/api-gateway-test-helpers.ts:141: catch {} // Ignore errors",
        "docs/WAVE_3_E2E_WORKFLOWS_SUCCESS_REPORT.md: .catch((e) => { console.error(e); })"
      ],
      "quickWins": [
        "Add proper error logging to empty catch blocks",
        "Implement error reporting for ignored errors",
        "Add error categorization and handling strategies"
      ]
    }
  },
  "securityAntiPatterns": {
    "potentialEvalUsage": {
      "severity": "LOW",
      "instances": 10,
      "locations": [
        "Mostly in generated build files and coverage reports",
        "shared/coverage/prettify.js: eval usage in test coverage tool",
        "frontend/.next/server/*.js: Generated Next.js build files"
      ],
      "note": "No eval usage in source code, only in generated/third-party files"
    },
    "hardcodedSecrets": {
      "severity": "NONE",
      "instances": 0,
      "locations": [],
      "note": "No hardcoded secrets found in search patterns"
    },
    "deleteOperations": {
      "severity": "LOW",
      "instances": 10,
      "locations": [
        "Mostly in generated files and test utilities",
        "shared/src/test-utils/test-helpers.ts: property deletion patterns"
      ],
      "note": "Property deletion appears to be legitimate cleanup operations"
    }
  },
  "testingAntiPatterns": {
    "skippedTests": {
      "severity": "NONE",
      "instances": 0,
      "locations": [],
      "note": "No disabled tests found (skip, xit, xdescribe)"
    },
    "todoFixmeMarkers": {
      "severity": "HIGH",
      "instances": 30,
      "locations": [
        "CONTRIBUTING.md: TODO markers in documentation",
        "docs/LEGACY_DOCUMENTATION_CLEANUP_REPORT.md: 95 TODO/FIXME references",
        "docs/TECHNICAL_DEBT_PRIORITIZATION_MATRIX.md: 291 FIXME comments noted",
        "docs/audit/technical-debt.md: Critical TODO implementations in route handlers"
      ],
      "quickWins": [
        "Convert TODOs to GitHub issues",
        "Implement critical route handler TODOs",
        "Remove completed TODOs from documentation"
      ]
    }
  },
  "architectureSmells": {
    "circularDependencies": {
      "severity": "UNKNOWN",
      "instances": "Needs deeper analysis",
      "locations": ["Sample relative imports found, need full dependency graph analysis"],
      "recommendation": "Run madge or similar tool for comprehensive circular dependency detection"
    },
    "namespaceImports": {
      "severity": "LOW",
      "instances": 15,
      "locations": [
        "import * as React: Standard React pattern",
        "import * as bcrypt: Legitimate crypto library import",
        "import * as Sentry: Standard Sentry usage pattern"
      ],
      "note": "Namespace imports appear to be legitimate and following standard patterns"
    }
  },
  "quickWinPriority": [
    {
      "issue": "Environment variable centralization",
      "effort": "4 hours",
      "impact": "HIGH",
      "files": 219
    },
    {
      "issue": "Replace console.log with proper logging",
      "effort": "2 hours",
      "impact": "MEDIUM",
      "files": 25
    },
    {
      "issue": "Extract duplicate error handling patterns",
      "effort": "3 hours",
      "impact": "HIGH",
      "files": 45
    },
    {
      "issue": "Split God objects into smaller modules",
      "effort": "8 hours",
      "impact": "MEDIUM",
      "files": 3
    },
    {
      "issue": "Replace 'any' types with proper interfaces",
      "effort": "6 hours",
      "impact": "MEDIUM",
      "files": 20
    },
    {
      "issue": "Convert TODOs to GitHub issues",
      "effort": "1 hour",
      "impact": "LOW",
      "files": 30
    }
  ]
}
