# HARDCODED SECRET FALLBACKS AUDIT REPORT
# Generated: 2025-09-07
# P0-1: LOCATE ALL HARDCODED SECRET FALLBACKS

===========================================
üö® CRITICAL: HARDCODED SECRET FALLBACKS FOUND
===========================================

This report identifies ALL instances of hardcoded secret fallbacks in the MediaNest codebase that pose security risks and need immediate attention.

===========================================
1. JWT SECRET FALLBACKS
===========================================

‚ùå CRITICAL ISSUES FOUND:

File: /home/kinginyellow/projects/medianest/backend/src/utils/jwt.ts
Line: const JWT_SECRET = process.env.JWT_SECRET || 'development-secret-change-in-production'
Issue: Hardcoded fallback secret 'development-secret-change-in-production'
Risk: HIGH - JWT authentication can be compromised if env var missing

File: /home/kinginyellow/projects/medianest/backend/src/__tests__/setup.ts  
Lines: Using process.env.JWT_SECRET || 'test-secret' in test setup
Issue: Hardcoded test secret fallback
Risk: MEDIUM - Test environment only, but should use random generation

===========================================
2. ENCRYPTION KEY FALLBACKS  
===========================================

‚ùå CRITICAL ISSUES FOUND:

File: /home/kinginyellow/projects/medianest/backend/src/utils/security.ts
Lines: const secretKey = key || process.env.ENCRYPTION_KEY || 'default-key-change-in-production';
Issue: Hardcoded fallback 'default-key-change-in-production' (appears twice in file)
Risk: HIGH - Data encryption can be compromised

===========================================
3. DATABASE CREDENTIAL FALLBACKS
===========================================

‚ùå MODERATE ISSUES FOUND:

File: /home/kinginyellow/projects/medianest/backend/src/config/env.ts
Line: DATABASE_URL: readSecretFromFile('DATABASE_URL_FILE', process.env.DATABASE_URL || ''),
Issue: Falls back to empty string, but this is handled by validation
Risk: LOW-MEDIUM - Will cause startup failure, not silent security issue

File: /home/kinginyellow/projects/medianest/backend/src/config/test-database.ts
Line: const testDatabaseUrl = process.env.DATABASE_URL || 'postgresql://test:test@localhost:5433/medianest_test';
Issue: Hardcoded test database credentials
Risk: MEDIUM - Test environment, but credentials are predictable

File: /home/kinginyellow/projects/medianest/backend/tests/e2e/utils/db-helpers.ts
Line: password: process.env.DB_PASSWORD || 'postgres'
Issue: Hardcoded default database password
Risk: MEDIUM - E2E tests only, but uses common default

===========================================
4. SESSION SECRET FALLBACKS
===========================================

‚úÖ NO EXPLICIT SESSION_SECRET FALLBACKS FOUND
(Session management appears to use JWT_SECRET)

===========================================
5. OTHER CONFIGURATION FALLBACKS
===========================================

‚ö†Ô∏è  INFORMATIONAL (Non-secret fallbacks with defaults):

File: /home/kinginyellow/projects/medianest/backend/src/server-minimal.ts
Line: origin: process.env.CORS_ORIGIN || 'http://localhost:3000'
Issue: CORS origin fallback
Risk: LOW - Development convenience, not a secret

File: /home/kinginyellow/projects/medianest/backend/src/config/env.ts
Multiple non-secret configuration fallbacks:
- REDIS_HOST || 'localhost'
- REDIS_PORT || '6379' 
- NODE_ENV || 'development'
- PORT || '4000'
- FRONTEND_URL || 'http://localhost:3000'
Risk: LOW - Configuration defaults, not secrets

===========================================
6. API KEY PATTERNS
===========================================

‚úÖ NO HARDCODED API KEY FALLBACKS FOUND
API keys (PLEX_TOKEN, YOUTUBE_KEY, TMDB_KEY) do not have hardcoded fallbacks

===========================================
7. TEST ENVIRONMENT ISSUES
===========================================

‚ö†Ô∏è  TEST CREDENTIAL ISSUES:

Files with hardcoded test credentials:
- /home/kinginyellow/projects/medianest/backend/tests/e2e/page-objects/LoginPage.ts
  - testuser1/testpassword
  - testadmin/testpassword  
- /home/kinginyellow/projects/medianest/backend/tests/e2e/auth.spec.ts
  - TestPassword123!, AdminPassword123!

Risk: LOW-MEDIUM - Test environment only, but predictable

===========================================
PRIORITY FIXES REQUIRED
===========================================

üî¥ P0 - IMMEDIATE (Security Critical):
1. backend/src/utils/jwt.ts - Remove 'development-secret-change-in-production' fallback
2. backend/src/utils/security.ts - Remove 'default-key-change-in-production' fallback (2 instances)

üü° P1 - HIGH (Should Fix):
3. backend/src/config/test-database.ts - Use random test DB credentials
4. backend/tests/e2e/utils/db-helpers.ts - Remove 'postgres' password fallback
5. backend/src/__tests__/setup.ts - Generate random test JWT secret

üü¢ P2 - MEDIUM (Good Practice):
6. E2E test files - Use dynamic test credentials instead of hardcoded ones

===========================================
RECOMMENDED SOLUTIONS
===========================================

1. JWT_SECRET: Require environment variable, fail startup if missing
2. ENCRYPTION_KEY: Require environment variable, fail startup if missing  
3. Test credentials: Generate random values in test setup
4. Add startup validation to ensure required secrets are present
5. Use the existing validateSecrets() function in config/secrets.ts

===========================================
FILES ANALYZED
===========================================

‚úÖ Scanned all .ts and .js files in backend/src/
‚úÖ Checked configuration files
‚úÖ Searched for common secret patterns (JWT, encryption, database, API keys)
‚úÖ Identified test environment issues
‚úÖ Excluded node_modules and compiled dist files from recommendations

===========================================
VERIFICATION COMMANDS USED
===========================================

grep -r "JWT_SECRET\|jwt.*secret" --include="*.ts" --include="*.js" backend/ | grep "||"
grep -r "ENCRYPTION_KEY\|encryption.*key" --include="*.ts" --include="*.js" backend/ | grep "||"  
grep -r "SESSION_SECRET\|session.*secret" --include="*.ts" --include="*.js" backend/ | grep "||"
grep -r "DB_PASSWORD\|DATABASE_URL" --include="*.ts" --include="*.js" backend/ | grep "||"
grep -r "API_KEY\|api.*key" --include="*.ts" --include="*.js" . | grep "||" | grep -v node_modules
grep -r "process\.env\." --include="*.ts" --include="*.js" backend/src/ | grep "||.*['\"]"

===========================================
END REPORT
===========================================