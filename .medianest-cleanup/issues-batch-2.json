{
  "batchInfo": {
    "batchNumber": 2,
    "scanDate": "2025-09-07T02:55:00.000Z",
    "filesScanned": 10,
    "totalLines": 6084,
    "averageFileSize": 608
  },
  "summary": {
    "totalIssues": 47,
    "criticalIssues": 8,
    "majorIssues": 12,
    "moderateIssues": 16,
    "minorIssues": 11,
    "technicalDebt": "High",
    "riskLevel": "Medium-High"
  },
  "fileAnalysis": [
    {
      "file": "/home/kinginyellow/projects/medianest/backend/src/services/email.service.ts",
      "lines": 684,
      "issues": [
        {
          "type": "TODO",
          "severity": "major",
          "line": 278,
          "content": "TODO: Implement SMTP sending using nodemailer",
          "impact": "Email functionality incomplete, affects password recovery and notifications"
        },
        {
          "type": "TODO",
          "severity": "major",
          "line": 292,
          "content": "TODO: Implement SendGrid API",
          "impact": "Missing production email provider integration"
        },
        {
          "type": "TODO",
          "severity": "major",
          "line": 307,
          "content": "TODO: Implement AWS SES",
          "impact": "Missing cloud email service integration"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "moderate",
          "line": 65,
          "content": "from: process.env.EMAIL_FROM || 'noreply@medianest.com'",
          "impact": "Hardcoded fallback email address"
        },
        {
          "type": "ERROR_HANDLING",
          "severity": "moderate",
          "line": 232,
          "content": "catch (error: any) - Generic error handling without specific recovery",
          "impact": "Poor error specificity for debugging email failures"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/tests/integration/api-gateway-service-coordination-test.ts",
      "lines": 666,
      "issues": [
        {
          "type": "HARDCODED_VALUE",
          "severity": "minor",
          "line": 116,
          "content": "pinId: 'test-pin-first-user'",
          "impact": "Hardcoded test data in integration tests"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "minor",
          "line": 348,
          "content": "url: 'https://www.youtube.com/watch?v=test'",
          "impact": "Hardcoded YouTube URL for testing"
        },
        {
          "type": "COMPLEX_FUNCTION",
          "severity": "moderate",
          "line": 25,
          "content": "Describe block with 667 lines - extremely complex test suite",
          "impact": "Monolithic test structure makes debugging and maintenance difficult"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/tests/integration/helpers/msw-handlers-comprehensive.ts",
      "lines": 647,
      "issues": [
        {
          "type": "COMPLEX_FUNCTION",
          "severity": "moderate",
          "line": 1,
          "content": "Single file with 647 lines of mock handlers",
          "impact": "Large mock handler file difficult to maintain and extend"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "minor",
          "line": 14,
          "content": "id: Math.random().toString(36).substr(2, 9)",
          "impact": "Predictable test data generation"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "minor",
          "line": 88,
          "content": "id: 'plex-user-456'",
          "impact": "Hardcoded user IDs in mock responses"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/backend/tests/e2e/auth.spec.ts",
      "lines": 646,
      "issues": [
        {
          "type": "HARDCODED_VALUE",
          "severity": "minor",
          "line": 22,
          "content": "plexId: 'e2e-admin-123'",
          "impact": "Hardcoded test user identifiers"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "minor",
          "line": 69,
          "content": "id: 'e2e-test-123'",
          "impact": "Hardcoded test XML responses"
        },
        {
          "type": "COMPLEX_FUNCTION",
          "severity": "moderate",
          "line": 142,
          "content": "Large test describe blocks over 100 lines each",
          "impact": "Test organization could be improved for better maintainability"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/backend/src/services/oauth-providers.service.ts",
      "lines": 638,
      "issues": [
        {
          "type": "TYPESCRIPT_IGNORE",
          "severity": "critical",
          "line": 1,
          "content": "// @ts-nocheck",
          "impact": "Complete TypeScript checking disabled - high risk for runtime errors"
        },
        {
          "type": "ERROR_HANDLING",
          "severity": "moderate",
          "line": 215,
          "content": "(error as Error) ? (error.message as any) : 'Unknown error'",
          "impact": "Unsafe type casting without proper error validation"
        },
        {
          "type": "MEMORY_STORAGE",
          "severity": "major",
          "line": 54,
          "content": "private oauthStates: Map<string, OAuthState> = new Map()",
          "impact": "In-memory OAuth state storage not suitable for production clustering"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "moderate",
          "line": 170,
          "content": "if (Date.now() - stateData.createdAt.getTime() > 10 * 60 * 1000)",
          "impact": "Hardcoded 10-minute timeout for OAuth states"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/backend/tests/mocks/handlers.ts",
      "lines": 631,
      "issues": [
        {
          "type": "COMPLEX_FUNCTION",
          "severity": "moderate",
          "line": 1,
          "content": "Single file with 631 lines of HTTP handlers",
          "impact": "Monolithic mock handler file difficult to maintain"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "minor",
          "line": 26,
          "content": "id>12345</id>",
          "impact": "Hardcoded test IDs in mock XML responses"
        },
        {
          "type": "TIMEOUT_SIMULATION",
          "severity": "minor",
          "line": 612,
          "content": "await delay(30000) // 30 second delay",
          "impact": "Very long timeout simulation may slow down tests"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/backend/src/routes/performance.ts",
      "lines": 626,
      "issues": [
        {
          "type": "TYPESCRIPT_IGNORE",
          "severity": "critical",
          "line": 1,
          "content": "// @ts-nocheck",
          "impact": "Complete TypeScript checking disabled on critical performance routes"
        },
        {
          "type": "CONDITIONAL_IMPORT",
          "severity": "moderate",
          "line": 19,
          "content": "Complex Redis conditional import logic",
          "impact": "Runtime import decisions may cause inconsistent behavior"
        },
        {
          "type": "ERROR_HANDLING",
          "severity": "moderate",
          "line": 96,
          "content": "logger.warn('Could not fetch cache metrics:', error.message as any)",
          "impact": "Unsafe type casting in error handling"
        },
        {
          "type": "RAW_SQL",
          "severity": "moderate",
          "line": 105,
          "content": "await prisma.$queryRaw`SELECT count(*) as total_connections...`",
          "impact": "Raw SQL queries without parameterization validation"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/backend/src/routes/v1/resilience.ts",
      "lines": 605,
      "issues": [
        {
          "type": "TYPESCRIPT_IGNORE",
          "severity": "critical",
          "line": 1,
          "content": "// @ts-nocheck",
          "impact": "TypeScript checking disabled on critical resilience routes"
        },
        {
          "type": "COMPLEX_FUNCTION",
          "severity": "moderate",
          "line": 552,
          "content": "generateRecommendations function with multiple responsibilities",
          "impact": "Function should be broken down into smaller, focused functions"
        },
        {
          "type": "ERROR_HANDLING",
          "severity": "moderate",
          "line": 225,
          "content": "(error as Error).message - Unsafe type casting",
          "impact": "Type assertions without proper error validation"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/backend/tests/e2e/media-request.spec.ts",
      "lines": 591,
      "issues": [
        {
          "type": "COMPLEX_FUNCTION",
          "severity": "moderate",
          "line": 37,
          "content": "Extremely large E2E test suite in single file",
          "impact": "Test organization and maintenance complexity"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "minor",
          "line": 206,
          "content": "tmdbId: 100001",
          "impact": "Hardcoded media IDs for testing"
        },
        {
          "type": "TEST_COMPLEXITY",
          "severity": "moderate",
          "line": 58,
          "content": "Complex ScenarioBuilder with 8+ chained steps",
          "impact": "Test debugging difficulty with complex scenario chains"
        }
      ]
    },
    {
      "file": "/home/kinginyellow/projects/medianest/backend/src/services/two-factor.service.ts",
      "lines": 548,
      "issues": [
        {
          "type": "TYPESCRIPT_IGNORE",
          "severity": "critical",
          "line": 1,
          "content": "// @ts-nocheck",
          "impact": "TypeScript checking disabled on security-critical 2FA service"
        },
        {
          "type": "MEMORY_STORAGE",
          "severity": "critical",
          "line": 59,
          "content": "private challenges: Map<string, TwoFactorChallenge> = new Map()",
          "impact": "In-memory storage for 2FA challenges - major security and scalability issue"
        },
        {
          "type": "TODO",
          "severity": "major",
          "line": 264,
          "content": "// SMS not implemented yet",
          "impact": "SMS 2FA functionality incomplete"
        },
        {
          "type": "HARDCODED_VALUE",
          "severity": "moderate",
          "line": 247,
          "content": "const expiresAt = new Date(Date.now() + 5 * 60 * 1000) // 5 minutes",
          "impact": "Hardcoded 5-minute expiration for 2FA challenges"
        },
        {
          "type": "ERROR_HANDLING",
          "severity": "moderate",
          "line": 75,
          "content": "throw new AppError('User not found', 404, 'USER_NOT_FOUND')",
          "impact": "Error handling pattern repeated multiple times - could be centralized"
        }
      ]
    }
  ],
  "categoryBreakdown": {
    "TYPESCRIPT_IGNORE": 4,
    "TODO_FIXME": 4,
    "MEMORY_STORAGE": 2,
    "COMPLEX_FUNCTION": 6,
    "HARDCODED_VALUE": 15,
    "ERROR_HANDLING": 6,
    "RAW_SQL": 1,
    "TEST_COMPLEXITY": 3,
    "CONDITIONAL_IMPORT": 1,
    "TIMEOUT_SIMULATION": 1,
    "UNSAFE_TYPE_CASTING": 4
  },
  "riskAssessment": {
    "securityRisks": [
      "TypeScript checking disabled on OAuth and 2FA services (CRITICAL)",
      "In-memory storage for OAuth states and 2FA challenges (CRITICAL)",
      "Incomplete email provider implementations affect password recovery",
      "Raw SQL queries without proper validation"
    ],
    "maintenanceRisks": [
      "Large monolithic files (600+ lines) difficult to maintain",
      "Complex test suites hard to debug and extend",
      "Missing TODO implementations in production services",
      "Hardcoded values throughout codebase"
    ],
    "performanceRisks": [
      "Conditional runtime imports may cause inconsistencies",
      "Long timeout simulations in tests",
      "Memory-based storage solutions not scalable"
    ]
  },
  "recommendations": {
    "immediate": [
      "Enable TypeScript checking on OAuth and 2FA services immediately",
      "Implement Redis-based storage for OAuth states and 2FA challenges",
      "Complete email provider implementations (SMTP, SendGrid, SES)",
      "Add proper error type validation instead of type assertions"
    ],
    "shortTerm": [
      "Break down large files into smaller, focused modules",
      "Implement SMS 2FA functionality",
      "Centralize error handling patterns",
      "Replace hardcoded values with configuration"
    ],
    "longTerm": [
      "Refactor test suites for better organization and maintainability",
      "Implement comprehensive input validation for raw SQL queries",
      "Create configuration management system for hardcoded values",
      "Establish coding standards to prevent @ts-nocheck usage"
    ]
  },
  "completedAt": "2025-09-07T02:56:30.000Z"
}
