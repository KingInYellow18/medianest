# MediaNest Production-Secure Docker Compose
# ZERO MALWARE EXPOSURE - Maximum Security Configuration
# All containers hardened with security contexts and minimal attack surface

version: '3.8'

# Define secrets for production deployment
secrets:
  database_url:
    external: true
  redis_url:
    external: true
  jwt_secret:
    external: true
  encryption_key:
    external: true
  nextauth_secret:
    external: true
  plex_client_id:
    external: true
  plex_client_secret:
    external: true
  postgres_password:
    external: true
  redis_password:
    external: true

services:
  # ==========================================================================
  # APPLICATION: Malware-Free Production Backend
  # ==========================================================================
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile.production-secure
      target: final
      args:
        BUILD_DATE: ${BUILD_DATE:-2025-09-08}
        VCS_REF: ${VCS_REF:-latest}
    image: medianest/backend:secure-${VERSION:-latest}
    container_name: medianest-app-secure
    restart: unless-stopped

    # MAXIMUM SECURITY: No root, read-only filesystem
    user: '10001:10001'
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

    # Resource limits for security and stability
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
          pids: 1000
        reservations:
          cpus: '0.5'
          memory: 512M

    # Environment - Production hardened
    environment:
      - NODE_ENV=production
      - PORT=4000
      - HOST=0.0.0.0
      - LOG_LEVEL=warn
      - ENABLE_METRICS=true
      - ENABLE_CACHE=true
      - STRICT_VALIDATION=true
      - RUN_MIGRATIONS=false

    # Secrets mounted securely
    secrets:
      - database_url
      - redis_url
      - jwt_secret
      - encryption_key
      - nextauth_secret
      - plex_client_id
      - plex_client_secret

    # Writable volumes for runtime data only
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m
      - /var/tmp:noexec,nosuid,nodev,size=50m
    volumes:
      - app_logs:/app/logs:rw
      - app_uploads:/app/uploads:rw
      - app_temp:/app/temp:rw

    # Network: Internal only (no direct external access)
    networks:
      - secure_internal

    # Health monitoring
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Dependency management
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # ==========================================================================
  # REVERSE PROXY: Secure external access
  # ==========================================================================
  proxy:
    image: traefik:v3.0
    container_name: medianest-proxy-secure
    restart: unless-stopped

    # Security hardening for proxy
    user: '10002:10002'
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

    # Commands with security features
    command:
      - --api.dashboard=false
      - --log.level=WARN
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=secure_internal
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --serversTransport.insecureSkipVerify=false
      - --global.sendAnonymousUsage=false

    # External ports only through proxy
    ports:
      - '80:80'
      - '443:443'

    # Labels for routing to app
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls.certresolver=letsencrypt
      - traefik.http.services.app.loadbalancer.server.port=4000
      - traefik.http.services.app.loadbalancer.server.url=http://app:4000

      # Security headers
      - traefik.http.middlewares.security.headers.frameDeny=true
      - traefik.http.middlewares.security.headers.sslRedirect=true
      - traefik.http.middlewares.security.headers.browserXssFilter=true
      - traefik.http.middlewares.security.headers.contentTypeNosniff=true
      - traefik.http.middlewares.security.headers.forceSTSHeader=true
      - traefik.http.middlewares.security.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.security.headers.stsPreload=true
      - traefik.http.middlewares.security.headers.stsSeconds=31536000
      - traefik.http.routers.app.middlewares=security

    # Secure volume mounts
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt:rw

    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=50m

    networks:
      - secure_internal

  # ==========================================================================
  # DATABASE: Hardened PostgreSQL
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: medianest-postgres-secure
    restart: unless-stopped

    # Database security hardening
    user: '10003:10003'
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

    # Environment with security
    environment:
      - POSTGRES_DB=medianest
      - POSTGRES_USER=medianest
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata

    # Secrets for credentials
    secrets:
      - postgres_password

    # Persistent data with backup
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - postgres_backups:/var/lib/postgresql/backups:rw

    # Internal network only (NO external ports)
    networks:
      - secure_internal

    # Health check
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U medianest -d medianest']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==========================================================================
  # CACHE: Hardened Redis
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: medianest-redis-secure
    restart: unless-stopped

    # Redis security hardening
    user: '10004:10004'
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL

    # Secure Redis configuration
    command: >
      redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 300
      --databases 1
      --protected-mode yes
      --bind 0.0.0.0

    # Secrets for authentication
    secrets:
      - redis_password

    # Data persistence
    volumes:
      - redis_data:/data:rw

    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=50m

    # Internal network only
    networks:
      - secure_internal

    # Health monitoring
    healthcheck:
      test:
        [
          'CMD',
          'redis-cli',
          '--no-auth-warning',
          '-a',
          '$(cat /run/secrets/redis_password)',
          'ping',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# =============================================================================
# VOLUMES: Persistent data with proper permissions
# =============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres

  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH}/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis

  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH}

  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${UPLOADS_PATH}

  app_temp:
    driver: local

  letsencrypt:
    driver: local

# =============================================================================
# NETWORKS: Isolated internal communication
# =============================================================================
networks:
  secure_internal:
    driver: bridge
    internal: false # Allow internet access for app
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: 'true'
      com.docker.network.bridge.enable_ip_masquerade: 'true'
      com.docker.network.driver.mtu: '1500'
