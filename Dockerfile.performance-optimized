# Multi-stage optimized Dockerfile
FROM node:18-alpine AS base
WORKDIR /app

# Dependencies stage
FROM base AS dependencies
COPY package*.json ./
COPY frontend/package*.json ./frontend/
COPY backend/package*.json ./backend/
COPY shared/package*.json ./shared/

# Install only production dependencies
RUN npm ci --omit=dev --omit=optional && \
    cd frontend && npm ci --omit=dev --omit=optional && \
    cd ../backend && npm ci --omit=dev --omit=optional && \
    cd ../shared && npm ci --omit=dev --omit=optional

# Build stage
FROM base AS build
COPY . .
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/frontend/node_modules ./frontend/node_modules
COPY --from=dependencies /app/backend/node_modules ./backend/node_modules
COPY --from=dependencies /app/shared/node_modules ./shared/node_modules

# Build applications
RUN npm run build:production

# Production stage
FROM node:18-alpine AS production
WORKDIR /app

# Copy only production files
COPY --from=build /app/backend/dist ./backend/dist
COPY --from=build /app/frontend/.next ./frontend/.next
COPY --from=build /app/shared/dist ./shared/dist
COPY --from=dependencies /app/node_modules ./node_modules

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S medianest -u 1001

USER medianest

EXPOSE 3000 8080

CMD ["node", "backend/dist/server.js"]