# MediaNest Production Secrets Template
# WARNING: This is a template file. Do not commit actual secrets to version control.
# Use sealed-secrets, external-secrets, or other secure secret management solutions.

# Application Secrets
apiVersion: v1
kind: Secret
metadata:
  name: medianest-secrets
  namespace: medianest-prod
  labels:
    app: medianest
    component: secrets
type: Opaque
stringData:
  # Database connection
  database-url: "postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres-service:5432/medianest?schema=public"
  
  # Redis connection
  redis-url: "redis://:${REDIS_PASSWORD}@redis-service:6379"
  
  # JWT signing secret
  jwt-secret: "${JWT_SECRET}"
  
  # Encryption key for sensitive data
  encryption-key: "${ENCRYPTION_KEY}"
  
  # NextAuth secret
  nextauth-secret: "${NEXTAUTH_SECRET}"
  
  # Plex integration credentials
  plex-client-id: "${PLEX_CLIENT_ID}"
  plex-client-secret: "${PLEX_CLIENT_SECRET}"
  
  # SMTP configuration for notifications
  smtp-host: "${SMTP_HOST}"
  smtp-port: "${SMTP_PORT}"
  smtp-user: "${SMTP_USER}"
  smtp-password: "${SMTP_PASSWORD}"
  
  # External API keys
  tmdb-api-key: "${TMDB_API_KEY}"
  
---
# PostgreSQL Database Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: medianest-prod
  labels:
    app: postgres
    component: database
type: Opaque
stringData:
  username: "${DB_USERNAME}"
  password: "${DB_PASSWORD}"
  exporter-dsn: "postgresql://${DB_USERNAME}:${DB_PASSWORD}@localhost:5432/medianest?sslmode=disable"

---
# Redis Cache Secrets
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: medianest-prod
  labels:
    app: redis
    component: cache
type: Opaque
stringData:
  password: "${REDIS_PASSWORD}"

---
# SSL/TLS Certificate Secret (for HTTPS)
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: medianest-prod
  labels:
    app: medianest
    component: tls
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  # Generate with: kubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key
  tls.crt: ${TLS_CERTIFICATE_B64}
  tls.key: ${TLS_PRIVATE_KEY_B64}

---
# Registry Pull Secret (if using private container registry)
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: medianest-prod
  labels:
    app: medianest
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Generate with: kubectl create secret docker-registry registry-secret --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL
  .dockerconfigjson: ${DOCKER_CONFIG_JSON_B64}

---
# Monitoring Secrets
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: medianest-prod
  labels:
    app: monitoring
    component: secrets
type: Opaque
stringData:
  # Grafana admin credentials
  grafana-admin-user: "${GRAFANA_ADMIN_USER}"
  grafana-admin-password: "${GRAFANA_ADMIN_PASSWORD}"
  
  # Prometheus basic auth (if enabled)
  prometheus-user: "${PROMETHEUS_USER}"
  prometheus-password: "${PROMETHEUS_PASSWORD}"
  
  # Alert manager webhook URLs
  slack-webhook-url: "${SLACK_WEBHOOK_URL}"
  discord-webhook-url: "${DISCORD_WEBHOOK_URL}"

---
# Secret Generation Script Template
# Save as: scripts/generate-k8s-secrets.sh
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-generation-script
  namespace: medianest-prod
data:
  generate-secrets.sh: |
    #!/bin/bash
    # MediaNest Production Secret Generation Script
    
    echo "Generating production secrets for MediaNest..."
    
    # Generate JWT secret
    JWT_SECRET=$(openssl rand -hex 64)
    echo "JWT_SECRET: $JWT_SECRET"
    
    # Generate encryption key
    ENCRYPTION_KEY=$(openssl rand -hex 32)
    echo "ENCRYPTION_KEY: $ENCRYPTION_KEY"
    
    # Generate NextAuth secret
    NEXTAUTH_SECRET=$(openssl rand -hex 32)
    echo "NEXTAUTH_SECRET: $NEXTAUTH_SECRET"
    
    # Generate database password
    DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    echo "DB_PASSWORD: $DB_PASSWORD"
    
    # Generate Redis password
    REDIS_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    echo "REDIS_PASSWORD: $REDIS_PASSWORD"
    
    # Generate Grafana password
    GRAFANA_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    echo "GRAFANA_PASSWORD: $GRAFANA_PASSWORD"
    
    echo "\nSecrets generated successfully!"
    echo "Please update the secret YAML files with these values before applying to cluster."
    echo "Remember to store these secrets securely and never commit them to version control."

# Usage Instructions:
# 1. Extract the script: kubectl get configmap secret-generation-script -o jsonpath='{.data.generate-secrets\.sh}' > generate-secrets.sh
# 2. Make executable: chmod +x generate-secrets.sh
# 3. Run: ./generate-secrets.sh
# 4. Update the secret YAML files with generated values
# 5. Apply secrets: kubectl apply -f secrets.yaml