# MediaNest Production Configuration Maps
apiVersion: v1
kind: ConfigMap
metadata:
  name: medianest-backend-config
  namespace: medianest-prod
  labels:
    app: medianest-backend
    component: config
data:
  # Application Configuration
  NODE_ENV: "production"
  PORT: "4000"
  HOST: "0.0.0.0"
  LOG_LEVEL: "info"
  
  # Database Configuration
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "medianest"
  DB_SSL: "false"
  DB_POOL_MIN: "2"
  DB_POOL_MAX: "10"
  DB_POOL_IDLE_TIMEOUT: "30000"
  DB_POOL_CONNECTION_TIMEOUT: "60000"
  
  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_MAX_RETRIES: "3"
  REDIS_RETRY_DELAY_ON_FAILURE: "100"
  
  # Session Configuration
  SESSION_TIMEOUT: "3600000"
  JWT_EXPIRES_IN: "24h"
  REFRESH_TOKEN_EXPIRES_IN: "7d"
  
  # File Upload Configuration
  UPLOAD_MAX_SIZE: "52428800"
  UPLOAD_ALLOWED_TYPES: "image/jpeg,image/png,image/gif,image/webp,video/mp4,video/webm"
  
  # API Configuration
  API_RATE_LIMIT: "1000"
  API_RATE_WINDOW: "900000"
  API_TIMEOUT: "30000"
  
  # Monitoring Configuration
  METRICS_ENABLED: "true"
  METRICS_PORT: "4000"
  METRICS_PATH: "/metrics"
  
  # External Services
  TMDB_BASE_URL: "https://api.themoviedb.org/3"
  PLEX_BASE_URL: "https://plex.tv"
  
---
# Frontend Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: medianest-frontend-config
  namespace: medianest-prod
  labels:
    app: medianest-frontend
    component: config
data:
  # Next.js Configuration
  NODE_ENV: "production"
  PORT: "3000"
  HOSTNAME: "0.0.0.0"
  NEXT_TELEMETRY_DISABLED: "1"
  
  # API Configuration
  NEXT_PUBLIC_API_URL: "https://api.medianest.yourdomain.com"
  NEXT_PUBLIC_WS_URL: "wss://api.medianest.yourdomain.com"
  NEXT_PUBLIC_APP_NAME: "MediaNest"
  NEXT_PUBLIC_APP_VERSION: "1.0.0"
  
  # Authentication Configuration
  NEXTAUTH_URL: "https://medianest.yourdomain.com"
  NEXTAUTH_URL_INTERNAL: "http://medianest-frontend-service:3000"
  
  # Feature Flags
  NEXT_PUBLIC_ENABLE_ANALYTICS: "true"
  NEXT_PUBLIC_ENABLE_PWA: "true"
  NEXT_PUBLIC_ENABLE_DARK_MODE: "true"
  
---
# PostgreSQL Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: medianest-prod
  labels:
    app: postgres
    component: database
data:
  postgresql.conf: |
    # PostgreSQL Production Configuration
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 100
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    
    # Query Planner
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    
    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50
    autovacuum_vacuum_scale_factor = 0.2
    autovacuum_analyze_scale_factor = 0.1
    
    # Replication (for future high availability)
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    
---
# Nginx Configuration for Reverse Proxy
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: medianest-prod
  labels:
    app: nginx
    component: proxy
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Rate Limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # Upstream definitions
        upstream backend {
            server medianest-backend-service:4000;
            keepalive 32;
        }
        
        upstream frontend {
            server medianest-frontend-service:3000;
            keepalive 32;
        }
        
        # Include additional configurations
        include /etc/nginx/conf.d/*.conf;
    }
  
  default.conf: |
    server {
        listen 80;
        server_name medianest.yourdomain.com;
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name medianest.yourdomain.com;
        
        # SSL Configuration
        ssl_certificate /etc/ssl/certs/tls.crt;
        ssl_certificate_key /etc/ssl/private/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # Security Headers
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss:; frame-src 'self';" always;
        
        # Frontend
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # API Routes
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # File upload size
            client_max_body_size 50M;
            
            # Timeouts for API calls
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # WebSocket Support
        location /socket.io/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health Check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Static Files Caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }

---
# Monitoring Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: medianest-prod
  labels:
    app: prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - medianest-prod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
      
      - job_name: 'postgres-exporter'
        static_configs:
        - targets: ['postgres-service:9187']
      
      - job_name: 'redis-exporter'
        static_configs:
        - targets: ['redis-service:9121']
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
  
  alert_rules.yml: |
    groups:
    - name: medianest.rules
      rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: High error rate detected
          description: "Error rate is {{ $value }} requests per second"
      
      - alert: HighMemoryUsage
        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.85
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High memory usage
          description: "Memory usage is above 85%"
      
      - alert: DatabaseDown
        expr: up{job="postgres-exporter"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: PostgreSQL is down
          description: "PostgreSQL database is not responding"
      
      - alert: RedisDown
        expr: up{job="redis-exporter"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Redis is down
          description: "Redis cache is not responding"