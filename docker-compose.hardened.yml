# MediaNest Production-Hardened Docker Configuration
# üîê SECURITY-FIRST ARCHITECTURE - ZERO-TRUST IMPLEMENTATION

# üõ°Ô∏è SECURE NETWORKS - ISOLATED INTERNAL COMMUNICATION
networks:
  medianest-internal:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-medianest-internal
    internal: true # No external access
    ipam:
      config:
        - subnet: 172.25.0.0/24
          gateway: 172.25.0.1

  medianest-public:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-medianest-public
    ipam:
      config:
        - subnet: 172.26.0.0/24
          gateway: 172.26.0.1

# üóÑÔ∏è PERSISTENT VOLUMES WITH SECURITY CONSTRAINTS
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/medianest/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/medianest/redis
  uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/medianest/uploads
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/medianest

# üîë DOCKER SWARM SECRETS MANAGEMENT
secrets:
  nextauth_secret:
    external: true
    name: medianest_nextauth_secret_v2
  plex_client_id:
    external: true
    name: medianest_plex_client_id_v2
  plex_client_secret:
    external: true
    name: medianest_plex_client_secret_v2
  encryption_key:
    external: true
    name: medianest_encryption_key_v2
  jwt_secret:
    external: true
    name: medianest_jwt_secret_v2
  postgres_db:
    external: true
    name: medianest_postgres_db_v2
  postgres_user:
    external: true
    name: medianest_postgres_user_v2
  postgres_password:
    external: true
    name: medianest_postgres_password_v2
  redis_password:
    external: true
    name: medianest_redis_password_v2

services:
  # üêò POSTGRESQL DATABASE - MAXIMUM SECURITY
  postgres:
    image: postgres:16-alpine
    hostname: medianest-postgres-secure
    restart: unless-stopped

    # üîê SECURITY HARDENING
    user: '999:999' # postgres user
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
      - CHOWN

    # üìÅ READ-ONLY FILESYSTEM WITH CONTROLLED WRITE ACCESS
    read_only: true
    tmpfs:
      - /tmp:size=100m,noexec,nosuid,nodev
      - /var/run/postgresql:size=50m,noexec,nosuid,nodev
      - /run:size=50m,noexec,nosuid,nodev

    # üè∑Ô∏è ENVIRONMENT WITH SECRET REFERENCES
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --auth-host=scram-sha-256 --auth-local=scram-sha-256'
      PGDATA: /var/lib/postgresql/data/pgdata

    # üíæ VOLUME MOUNTS - MINIMAL PERMISSIONS
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro

    # üåê NETWORK ISOLATION - INTERNAL ONLY
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.10

    # üîë SECRETS ACCESS
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password

    # üè• HEALTH MONITORING
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U $(cat /run/secrets/postgres_user) -d $(cat /run/secrets/postgres_db)',
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

    # ‚ö° RESOURCE CONSTRAINTS
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
          pids: 100
        reservations:
          cpus: '0.25'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s

  # üì¶ REDIS CACHE - SECURE CONFIGURATION
  redis:
    image: redis:7-alpine
    hostname: medianest-redis-secure
    restart: unless-stopped

    # üîê SECURITY HARDENING
    user: '999:1000' # redis user
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID

    # üìÅ READ-ONLY FILESYSTEM
    read_only: true
    tmpfs:
      - /tmp:size=50m,noexec,nosuid,nodev
      - /var/run/redis:size=25m,noexec,nosuid,nodev

    # ‚öôÔ∏è SECURE REDIS CONFIGURATION
    command: >
      redis-server
      --requirepass $(cat /run/secrets/redis_password)
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --bind 0.0.0.0
      --protected-mode yes
      --port 6379
      --tcp-keepalive 300
      --tcp-backlog 511
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --stop-writes-on-bgsave-error yes
      --dir /data
      --logfile ""
      --syslog-enabled yes
      --syslog-ident redis

    # üíæ VOLUME MOUNTS
    volumes:
      - redis_data:/data:rw

    # üåê NETWORK ISOLATION
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.11

    # üîë SECRETS ACCESS
    secrets:
      - redis_password

    # üè• HEALTH MONITORING
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '$(cat /run/secrets/redis_password)', 'ping']
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

    # ‚ö° RESOURCE CONSTRAINTS
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 320M
          pids: 50
        reservations:
          cpus: '0.1'
          memory: 128M

  # üöÄ APPLICATION SERVER - HARDENED DEPLOYMENT
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-production
    hostname: medianest-app-secure
    restart: unless-stopped

    # üîê MAXIMUM SECURITY CONFIGURATION
    user: '1001:1001' # medianest user from Dockerfile
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

    # üìÅ READ-ONLY WITH CONTROLLED WRITES
    read_only: true
    tmpfs:
      - /tmp:size=200m,noexec,nosuid,nodev
      - /var/log:size=100m,noexec,nosuid,nodev
      - /run:size=50m,noexec,nosuid,nodev

    # üè∑Ô∏è SECURE ENVIRONMENT CONFIGURATION
    environment:
      NODE_ENV: production
      NODE_OPTIONS: '--max-old-space-size=768'
      DATABASE_URL: postgresql://$(cat /run/secrets/postgres_user):$(cat /run/secrets/postgres_password)@postgres:5432/$(cat /run/secrets/postgres_db)?connection_limit=20&pool_timeout=30&connect_timeout=10&sslmode=prefer
      REDIS_URL: redis://:$(cat /run/secrets/redis_password)@redis:6379
      NEXTAUTH_URL: https://medianest.domain.com
      NEXTAUTH_SECRET: $(cat /run/secrets/nextauth_secret)
      PLEX_CLIENT_ID: $(cat /run/secrets/plex_client_id)
      PLEX_CLIENT_SECRET: $(cat /run/secrets/plex_client_secret)
      ENCRYPTION_KEY: $(cat /run/secrets/encryption_key)
      JWT_SECRET: $(cat /run/secrets/jwt_secret)

    # üíæ VOLUME MOUNTS - MINIMAL ACCESS
    volumes:
      - uploads:/app/uploads:rw

    # üåê DUAL NETWORK ACCESS
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.20
      medianest-public:
        ipv4_address: 172.26.0.20

    # üîë SECRETS ACCESS
    secrets:
      - nextauth_secret
      - plex_client_id
      - plex_client_secret
      - encryption_key
      - jwt_secret
      - postgres_db
      - postgres_user
      - postgres_password
      - redis_password

    # üîó SERVICE DEPENDENCIES
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    # üè• APPLICATION HEALTH CHECK
    healthcheck:
      test: ['CMD', 'node', '/app/backend/dist/health-check.js']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

    # ‚ö° PERFORMANCE CONSTRAINTS
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
          pids: 150
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s

  # üåê NGINX REVERSE PROXY - SECURE FRONTEND
  nginx:
    image: nginx:1.25-alpine
    hostname: medianest-nginx-secure
    restart: unless-stopped

    # üîê NGINX SECURITY HARDENING
    user: '101:101' # nginx user
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - DAC_OVERRIDE

    # üìÅ READ-ONLY FILESYSTEM
    read_only: true
    tmpfs:
      - /var/cache/nginx:size=100m,noexec,nosuid,nodev
      - /var/run:size=50m,noexec,nosuid,nodev
      - /tmp:size=50m,noexec,nosuid,nodev

    # üì° PORT EXPOSURE - CONTROLLED ACCESS
    ports:
      - '80:80'
      - '443:443'

    # üîß CONFIGURATION MOUNTS
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/medianest.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/ssl/certs:ro

    # üåê PUBLIC NETWORK ACCESS
    networks:
      medianest-public:
        ipv4_address: 172.26.0.30

    # üîó BACKEND DEPENDENCY
    depends_on:
      app:
        condition: service_healthy

    # üè• NGINX HEALTH CHECK
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

    # ‚ö° RESOURCE LIMITS
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
          pids: 50
        reservations:
          cpus: '0.1'
          memory: 64M

  # üìä MONITORING & OBSERVABILITY
  prometheus:
    image: prom/prometheus:v2.48.0
    hostname: medianest-prometheus
    restart: unless-stopped

    # üîê SECURITY CONFIGURATION
    user: '65534:65534' # nobody user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

    # üì° INTERNAL MONITORING PORT
    expose:
      - '9090'

    # üîß PROMETHEUS CONFIGURATION
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

    # üåê INTERNAL MONITORING NETWORK
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.40

    # ‚öôÔ∏è PROMETHEUS STARTUP OPTIONS
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'

    # ‚ö° RESOURCE CONSTRAINTS
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # üîç SECURITY SCANNER - CONTINUOUS VULNERABILITY MONITORING
  trivy:
    image: aquasec/trivy:latest
    hostname: medianest-security-scanner
    restart: 'no'

    # üîê MINIMAL PRIVILEGES FOR SCANNING
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

    # üìä SECURITY REPORTS OUTPUT
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security-reports:/reports:rw

    # üåê INTERNAL NETWORK ACCESS
    networks:
      - medianest-internal

    # üîç COMPREHENSIVE SECURITY SCAN
    command: >
      image
      --format json
      --output /reports/security-scan-$(date +%Y%m%d-%H%M%S).json
      --security-checks vuln,config,secret
      --severity HIGH,CRITICAL
      medianest-app-secure

    # üìã PROFILES FOR SCHEDULED SCANNING
    profiles:
      - security-scan

# üéØ PRODUCTION DEPLOYMENT PROFILES
x-production-defaults: &production-defaults
  restart: unless-stopped
  logging:
    driver: 'json-file'
    options:
      max-size: '10m'
      max-file: '3'
      compress: 'true'
