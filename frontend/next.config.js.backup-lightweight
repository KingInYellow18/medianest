/** @type {import('next').NextConfig} */
const path = require('path');

const nextConfig = {
  // CRITICAL: Fix build issues
  eslint: {
    ignoreDuringBuilds: true,
  },

  typescript: {
    ignoreBuildErrors: false,
  },

  // Output file tracing
  outputFileTracingRoot: path.join(__dirname, '../'),

  // CONSERVATIVE Performance optimizations for <500KB target
  experimental: {
    // Selective package import optimization
    optimizePackageImports: [
      'lucide-react',
      'framer-motion',
      'date-fns',
      'clsx',
      'tailwind-merge',
      'socket.io-client',
      '@tanstack/react-query',
    ],

    // Server optimizations
    optimizeServerReact: true,
  },

  // Conservative webpack optimizations
  webpack: (config, { dev, isServer }) => {
    if (!isServer) {
      // Node.js fallbacks
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        path: false,
        os: false,
        crypto: false,
        'mock-aws-s3': false,
        'aws-sdk': false,
        nock: false,
        bcrypt: false,
        bcryptjs: false,
      };

      // Externals
      config.externals = {
        ...config.externals,
        'mock-aws-s3': 'mock-aws-s3',
        'aws-sdk': 'aws-sdk',
        nock: 'nock',
        bcrypt: 'bcrypt',
        bcryptjs: 'bcryptjs',
      };
    }

    // CONSERVATIVE code splitting for <500KB target
    config.optimization = {
      ...config.optimization,
      splitChunks: {
        chunks: 'all',
        minSize: 20000,
        minChunks: 1,
        maxAsyncRequests: 20,
        maxInitialRequests: 20,
        cacheGroups: {
          // Framework chunk (React core)
          framework: {
            chunks: 'all',
            name: 'framework',
            test: /(?<!node_modules.*)[\\/]node_modules[\\/](react|react-dom|scheduler)[\\/]/,
            priority: 50,
            enforce: true,
            maxSize: 150000,
          },

          // Next.js runtime
          nextjs: {
            chunks: 'all',
            name: 'nextjs',
            test: /[\\/]node_modules[\\/](next)[\\/]/,
            priority: 45,
            maxSize: 100000,
          },

          // Auth chunk
          auth: {
            chunks: 'all',
            name: 'auth',
            test: /[\\/]node_modules[\\/](@auth|next-auth)[\\/]/,
            priority: 40,
            maxSize: 80000,
          },

          // UI libraries
          ui: {
            chunks: 'all',
            name: 'ui',
            test: /[\\/]node_modules[\\/](@headlessui|lucide-react|@tabler)[\\/]/,
            priority: 35,
            maxSize: 120000,
          },

          // Motion animation
          motion: {
            chunks: 'all',
            name: 'motion',
            test: /[\\/]node_modules[\\/](framer-motion)[\\/]/,
            priority: 30,
            maxSize: 100000,
          },

          // Query management
          query: {
            chunks: 'all',
            name: 'query',
            test: /[\\/]node_modules[\\/](@tanstack)[\\/]/,
            priority: 29,
            maxSize: 80000,
          },

          // Socket.io
          socket: {
            chunks: 'all',
            name: 'socket',
            test: /[\\/]node_modules[\\/](socket\.io-client)[\\/]/,
            priority: 28,
            maxSize: 60000,
          },

          // Utilities
          utils: {
            chunks: 'all',
            name: 'utils',
            test: /[\\/]node_modules[\\/](date-fns|clsx|tailwind-merge|axios)[\\/]/,
            priority: 27,
            maxSize: 80000,
          },

          // Other vendor libraries
          vendor: {
            chunks: 'all',
            name: 'vendor',
            test: /[\\/]node_modules[\\/]/,
            priority: 20,
            minSize: 30000,
            maxSize: 100000,
          },

          // Application code
          common: {
            chunks: 'all',
            name: 'common',
            minChunks: 2,
            priority: 10,
            reuseExistingChunk: true,
            maxSize: 80000,
          },

          default: {
            chunks: 'all',
            minChunks: 2,
            priority: -20,
            reuseExistingChunk: true,
            maxSize: 60000,
          },
        },
      },

      // Enable optimizations
      usedExports: true,
      sideEffects: false,
      minimize: !dev,
      moduleIds: 'deterministic',
      chunkIds: 'deterministic',
    };

    // Production-only optimizations
    if (!dev) {
      // Tree shaking optimizations
      config.resolve.alias = {
        ...config.resolve.alias,
        'date-fns': path.resolve(__dirname, 'node_modules/date-fns'),
      };

      // Production environment
      if (config.plugins && typeof config.plugins.push === 'function') {
        config.plugins.push(
          new (require('webpack')).DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify('production'),
            __DEV__: false,
            __PROD__: true,
          })
        );
      }
    }

    return config;
  },

  // SWC optimizations
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production' 
      ? { exclude: ['error', 'warn'] }
      : false,
    reactRemoveProperties: process.env.NODE_ENV === 'production',
    styledComponents: true,
  },

  // Image optimization
  images: {
    remotePatterns: [
      { protocol: 'https', hostname: '**.plex.direct' },
      { protocol: 'http', hostname: 'localhost' },
      { protocol: 'https', hostname: 'image.tmdb.org' },
      { protocol: 'https', hostname: '**.githubusercontent.com' },
    ],
    formats: ['image/avif', 'image/webp'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920],
    imageSizes: [16, 32, 48, 64, 96, 128, 256],
    minimumCacheTTL: 31536000,
  },

  // Output optimization
  output: 'standalone',
  compress: true,
  productionBrowserSourceMaps: false,
  poweredByHeader: false,

  // Caching headers
  async headers() {
    return [
      {
        source: '/_next/static/:path*',
        headers: [
          { key: 'Cache-Control', value: 'public, max-age=31536000, immutable' },
        ],
      },
      {
        source: '/static/:path*',
        headers: [
          { key: 'Cache-Control', value: 'public, max-age=31536000, immutable' },
        ],
      },
      {
        source: '/:all*(svg|jpg|jpeg|png|gif|ico|webp|avif)',
        headers: [
          { key: 'Cache-Control', value: 'public, max-age=31536000, immutable' },
        ],
      },
      {
        source: '/:all*(woff|woff2|ttf|otf|eot)',
        headers: [
          { key: 'Cache-Control', value: 'public, max-age=31536000, immutable' },
        ],
      },
      {
        source: '/:path*',
        headers: [
          { key: 'X-Frame-Options', value: 'DENY' },
          { key: 'X-Content-Type-Options', value: 'nosniff' },
          { key: 'Referrer-Policy', value: 'strict-origin-when-cross-origin' },
          { key: 'X-XSS-Protection', value: '1; mode=block' },
        ],
      },
    ];
  },

  async rewrites() {
    return {
      beforeFiles: [
        { source: '/socket.io/:path*', destination: '/api/socketio/:path*' },
      ],
    };
  },
};

const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
});

module.exports = withBundleAnalyzer(nextConfig);