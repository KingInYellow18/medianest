# MediaNest Frontend Production Docker Compose
# Production-ready container orchestration with monitoring and security
version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - BUILD_DATE=${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        - VCS_REF=${VCS_REF:-$(git rev-parse HEAD)}
    image: medianest/frontend:${TAG:-latest}
    container_name: medianest-frontend-prod
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
    env_file:
      - .env.production
    networks:
      - medianest-network
    healthcheck:
      test:
        ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/.next/cache:noexec,nosuid,size=200m
    volumes:
      # Read-only mount for static assets
      - type: bind
        source: ./public
        target: /app/public
        read_only: true
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`medianest.com`)'
      - 'traefik.http.routers.frontend.tls=true'
      - 'traefik.http.routers.frontend.tls.certresolver=letsencrypt'
      - 'traefik.http.services.frontend.loadbalancer.server.port=3000'
      - 'traefik.http.middlewares.frontend-compress.compress=true'
      - 'traefik.http.routers.frontend.middlewares=frontend-compress'

  # Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: medianest-traefik
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080' # Dashboard (remove in production)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/dynamic:/dynamic:ro
      - traefik-certificates:/certificates
    networks:
      - medianest-network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.dashboard.rule=Host(`traefik.medianest.com`)'
      - 'traefik.http.routers.dashboard.tls=true'
      - 'traefik.http.routers.dashboard.service=api@internal'
    environment:
      - TRAEFIK_LOG_LEVEL=INFO
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL}

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medianest-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - medianest-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: medianest-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - medianest-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: medianest-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - medianest-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.medianest.com
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`grafana.medianest.com`)'
      - 'traefik.http.routers.grafana.tls=true'

  # Log Aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: medianest-loki
    restart: unless-stopped
    ports:
      - '3100:3100'
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - medianest-network
    command: -config.file=/etc/loki/local-config.yaml

  # Log Collection
  promtail:
    image: grafana/promtail:2.9.2
    container_name: medianest-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    networks:
      - medianest-network
    command: -config.file=/etc/promtail/config.yml

networks:
  medianest-network:
    driver: bridge
    name: medianest-production
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    name: medianest-redis-data
  prometheus-data:
    name: medianest-prometheus-data
  grafana-data:
    name: medianest-grafana-data
  loki-data:
    name: medianest-loki-data
  traefik-certificates:
    name: medianest-traefik-certs
