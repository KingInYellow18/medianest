# MediaNest Production Environment Overrides
# Use with: docker-compose -f docker-compose.base.yml -f docker-compose.prod.yml up

version: '3.8'

# ===== PRODUCTION NETWORKS =====
networks:
  medianest-internal:
    driver: bridge
    internal: true  # No external access to internal network
    ipam:
      config:
        - subnet: 172.25.0.0/24
  
  medianest-public:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/24

# ===== PRODUCTION VOLUMES =====
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/medianest/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/medianest/redis
  
  uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/medianest/uploads
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/medianest
  
  nginx_cache:
    driver: local
  
  ssl_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/ssl/medianest

# ===== PRODUCTION SECRETS =====
secrets:
  postgres_password:
    external: true
    name: medianest_postgres_password_v2
  
  redis_password:
    external: true  
    name: medianest_redis_password_v2
  
  nextauth_secret:
    external: true
    name: medianest_nextauth_secret_v2
  
  jwt_secret:
    external: true
    name: medianest_jwt_secret_v2
  
  encryption_key:
    external: true
    name: medianest_encryption_key_v2
  
  plex_client_id:
    external: true
    name: medianest_plex_client_id_v2
  
  plex_client_secret:
    external: true
    name: medianest_plex_client_secret_v2

services:
  
  # ===== PRODUCTION APPLICATION =====
  app:
    build:
      target: ${BUILD_TARGET:-backend-production}
      args:
        NODE_ENV: production
        BUILD_TARGET: ${BUILD_TARGET:-backend-production}
        SECURITY_LEVEL: ${SECURITY_LEVEL:-hardened}
        OPTIMIZATION_LEVEL: size
        ENABLE_MONITORING: "true"
        ENABLE_DEBUG: "false"
        ENABLE_TELEMETRY: "false"
        ENABLE_SECURITY_SCANNING: "true"
    
    # Security hardening
    user: "1001:1001"
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Read-only filesystem with controlled writes
    read_only: true
    tmpfs:
      - /tmp:size=200m,noexec,nosuid,nodev
      - /var/log:size=100m,noexec,nosuid,nodev
      - /run:size=50m,noexec,nosuid,nodev
    
    environment:
      NODE_ENV: production
      NODE_OPTIONS: "--max-old-space-size=768"
      LOG_LEVEL: warn
      
      # Use secrets for sensitive data
      DATABASE_URL: postgresql://medianest:$$(cat /run/secrets/postgres_password)@postgres:5432/medianest?connection_limit=20&pool_timeout=30&sslmode=prefer
      REDIS_URL: redis://:$$(cat /run/secrets/redis_password)@redis:6379
      
      NEXTAUTH_URL: https://${DOMAIN_NAME:-medianest.domain.com}
      NEXTAUTH_SECRET_FILE: /run/secrets/nextauth_secret
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
      PLEX_CLIENT_ID_FILE: /run/secrets/plex_client_id
      PLEX_CLIENT_SECRET_FILE: /run/secrets/plex_client_secret
    
    volumes:
      - uploads:/app/uploads:rw
      - app_logs:/app/logs:rw
    
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.20
      medianest-public:
        ipv4_address: 172.26.0.20
    
    secrets:
      - postgres_password
      - redis_password
      - nextauth_secret
      - jwt_secret
      - encryption_key
      - plex_client_id
      - plex_client_secret
    
    # Production resource limits
    deploy:
      replicas: ${REPLICAS:-2}
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
          pids: 150
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first

  # ===== PRODUCTION DATABASE =====
  postgres:
    image: postgres:16-alpine
    
    # Security hardening
    user: "999:999"
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
      - CHOWN
    
    # Read-only filesystem
    read_only: true
    tmpfs:
      - /tmp:size=100m,noexec,nosuid,nodev
      - /var/run/postgresql:size=50m,noexec,nosuid,nodev
      - /run:size=50m,noexec,nosuid,nodev
    
    environment:
      POSTGRES_DB: medianest
      POSTGRES_USER: medianest
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --auth-host=scram-sha-256 --auth-local=scram-sha-256'
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./infrastructure/database/init-prod.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.10
    
    secrets:
      - postgres_password
    
    # Production resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
          pids: 100
        reservations:
          cpus: '0.25'
          memory: 512M
    
    # No external port exposure in production

  # ===== PRODUCTION REDIS =====
  redis:
    image: redis:7-alpine
    
    # Security hardening
    user: "999:1000"
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    
    # Read-only filesystem
    read_only: true
    tmpfs:
      - /tmp:size=50m,noexec,nosuid,nodev
      - /var/run/redis:size=25m,noexec,nosuid,nodev
    
    # Secure Redis configuration
    command: >
      redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --bind 0.0.0.0
      --protected-mode yes
      --port 6379
      --tcp-keepalive 300
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --dir /data
      --logfile ""
      --syslog-enabled yes
    
    volumes:
      - redis_data:/data:rw
    
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.11
    
    secrets:
      - redis_password
    
    # Production resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 320M
          pids: 50
        reservations:
          cpus: '0.1'
          memory: 128M

  # ===== NGINX REVERSE PROXY =====
  nginx:
    build:
      dockerfile: Dockerfile.consolidated
      target: nginx-production
    
    hostname: medianest-nginx-prod
    
    # Security hardening
    user: "101:101"
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - DAC_OVERRIDE
    
    # Read-only filesystem
    read_only: true
    tmpfs:
      - /var/cache/nginx:size=100m,noexec,nosuid,nodev
      - /var/run:size=50m,noexec,nosuid,nodev
      - /tmp:size=50m,noexec,nosuid,nodev
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./config/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs:/etc/ssl/certs:ro
      - nginx_cache:/var/cache/nginx:rw
    
    networks:
      medianest-public:
        ipv4_address: 172.26.0.30
      medianest-internal:
        ipv4_address: 172.25.0.30
    
    depends_on:
      - app
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
          pids: 50
        reservations:
          cpus: '0.1'
          memory: 64M

  # ===== MONITORING SERVICES =====
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    hostname: medianest-prometheus
    
    # Security configuration
    user: "65534:65534"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.40
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    hostname: medianest-grafana
    
    user: "472:0"
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
    
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.41
    
    depends_on:
      - prometheus
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    
    profiles:
      - monitoring

  # ===== BACKUP SERVICE =====
  backup:
    image: postgres:16-alpine
    hostname: medianest-backup
    restart: 'no'
    
    environment:
      PGPASSWORD_FILE: /run/secrets/postgres_password
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
    
    volumes:
      - ./backups:/backups:rw
      - ./scripts/backup.sh:/backup.sh:ro
    
    networks:
      medianest-internal:
        ipv4_address: 172.25.0.50
    
    secrets:
      - postgres_password
    
    command: sh /backup.sh
    
    depends_on:
      - postgres
    
    profiles:
      - backup

  # ===== SECURITY SCANNING =====
  trivy:
    image: aquasec/trivy:latest
    hostname: medianest-security-scanner
    restart: 'no'
    
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security-reports:/reports:rw
    
    networks:
      - medianest-internal
    
    command: >
      image
      --format json
      --output /reports/security-scan-$$(date +%Y%m%d-%H%M%S).json
      --security-checks vuln,config,secret
      --severity HIGH,CRITICAL
      medianest-app-prod
    
    profiles:
      - security-scan

  # ===== SSL CERTIFICATE MANAGEMENT =====
  certbot:
    image: certbot/certbot:latest
    hostname: medianest-certbot
    
    volumes:
      - ssl_certs:/etc/letsencrypt:rw
      - /var/www/certbot:/var/www/certbot:rw
    
    command: >
      certonly --webroot
      --webroot-path=/var/www/certbot
      --email ${ADMIN_EMAIL:-admin@${DOMAIN_NAME:-medianest.domain.com}}
      --agree-tos --no-eff-email
      -d ${DOMAIN_NAME:-medianest.domain.com}
      -d www.${DOMAIN_NAME:-medianest.domain.com}
    
    depends_on:
      - nginx
    
    profiles:
      - ssl-init

# ===== PRODUCTION LOGGING =====
x-production-logging: &production-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "5"
    compress: "true"
    labels: "service,environment"

# Apply logging to all services
services:
  app:
    logging: *production-logging
  postgres:
    logging: *production-logging
  redis:
    logging: *production-logging
  nginx:
    logging: *production-logging

# ===== PRODUCTION ENVIRONMENT TEMPLATE =====
x-prod-env-template: &prod-env-template
  # Domain Configuration
  DOMAIN_NAME: medianest.yourdomain.com
  ADMIN_EMAIL: admin@yourdomain.com
  
  # Application Configuration
  NODE_ENV: production
  BUILD_TARGET: backend-production
  SECURITY_LEVEL: hardened
  LOG_LEVEL: warn
  REPLICAS: 2
  
  # Feature Flags
  ENABLE_MONITORING: true
  ENABLE_DEBUG: false
  ENABLE_TELEMETRY: false
  ENABLE_SECURITY_SCANNING: true
  
  # Monitoring
  GRAFANA_PASSWORD: secure_grafana_password_here
  
  # SSL Configuration
  SSL_EMAIL: admin@yourdomain.com
  ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory