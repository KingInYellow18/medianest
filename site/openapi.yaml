openapi: 3.0.3
info:
  title: MediaNest API
  description: |
    MediaNest is a unified web portal for managing a Plex media server and related services.
    This API provides endpoints for authentication, media management, service monitoring, and more.
  version: 1.0.0
  contact:
    name: MediaNest Support
    email: support@medianest.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000/api/v1
    description: Development server
  - url: https://medianest.yourdomain.com/api/v1
    description: Production server

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: Plex OAuth authentication
  - name: Dashboard
    description: Dashboard and service status
  - name: Media
    description: Media search and requests
  - name: Plex
    description: Plex server integration
  - name: YouTube
    description: YouTube download management
  - name: Admin
    description: Admin-only endpoints
  - name: Errors
    description: Error reporting

security:
  - cookieAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running and healthy
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: backend
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0
                  uptime:
                    type: number
                    example: 3600

  /auth/plex/pin:
    post:
      tags:
        - Authentication
      summary: Generate Plex PIN
      description: Generate a PIN for Plex OAuth authentication flow
      security: []
      responses:
        '200':
          description: PIN generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlexPinResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /auth/plex/verify:
    post:
      tags:
        - Authentication
      summary: Verify Plex PIN
      description: Verify the PIN and create an authenticated session
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pinId
                - clientIdentifier
              properties:
                pinId:
                  type: integer
                  example: 123456
                clientIdentifier:
                  type: string
                  example: medianest-client-id
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: End the current user session
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'

  /auth/session:
    get:
      tags:
        - Authentication
      summary: Get session
      description: Get current session information
      responses:
        '200':
          description: Session information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /dashboard/stats:
    get:
      tags:
        - Dashboard
      summary: Get dashboard statistics
      description: Get statistics for the authenticated user
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'

  /dashboard/status:
    get:
      tags:
        - Dashboard
      summary: Get all service statuses
      description: Get the status of all integrated services
      responses:
        '200':
          description: Service statuses
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      services:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceStatus'

  /dashboard/status/{service}:
    get:
      tags:
        - Dashboard
      summary: Get service status
      description: Get the status of a specific service
      parameters:
        - name: service
          in: path
          required: true
          schema:
            type: string
            enum: [plex, overseerr, uptime-kuma, youtube-dl]
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ServiceStatus'

  /media/search:
    get:
      tags:
        - Media
      summary: Search for media
      description: Search for movies and TV shows
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: type
          in: query
          description: Media type filter
          schema:
            type: string
            enum: [movie, tv, all]
            default: all
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaSearchResponse'

  /media/request:
    post:
      tags:
        - Media
      summary: Request media
      description: Submit a request for new media
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaRequestInput'
      responses:
        '201':
          description: Request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRequestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /media/requests:
    get:
      tags:
        - Media
      summary: Get user's requests
      description: Get all media requests for the authenticated user
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, declined, available, all]
        - name: mediaType
          in: query
          schema:
            type: string
            enum: [movie, tv, all]
      responses:
        '200':
          description: User's media requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRequestListResponse'

  /admin/users:
    get:
      tags:
        - Admin
      summary: List all users
      description: Get a paginated list of all users (admin only)
      security:
        - cookieAuth: []
        - adminRole: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: search
          in: query
          schema:
            type: string
          description: Search by username or email
        - name: role
          in: query
          schema:
            type: string
            enum: [user, admin, all]
            default: all
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [createdAt, lastLoginAt, plexUsername, email]
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '403':
          $ref: '#/components/responses/ForbiddenError'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: medianest_session
    adminRole:
      type: apiKey
      in: header
      name: X-Admin-Role
      description: Requires admin role in addition to authentication

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        minimum: 1
        default: 1

    PageSizeParam:
      name: pageSize
      in: query
      description: Items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    SuccessResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          example: true

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid input
            details:
              type: object

    SuccessMessage:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            message:
              type: string

    PlexPinResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                id:
                  type: integer
                code:
                  type: string
                  example: ABCD-EFGH-IJKL-MNOP
                clientIdentifier:
                  type: string
                expiresAt:
                  type: string
                  format: date-time
                authUrl:
                  type: string
                  format: uri

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        plexId:
          type: string
        plexUsername:
          type: string
        email:
          type: string
          format: email
        thumb:
          type: string
          format: uri
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'

    SessionResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                expiresAt:
                  type: string
                  format: date-time

    ServiceStatus:
      type: object
      properties:
        name:
          type: string
          example: plex
        displayName:
          type: string
          example: Plex Media Server
        status:
          type: string
          enum: [online, offline, degraded, checking]
        responseTime:
          type: number
          example: 123
        lastChecked:
          type: string
          format: date-time
        version:
          type: string
        details:
          type: object

    DashboardStats:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                totalRequests:
                  type: integer
                pendingRequests:
                  type: integer
                approvedRequests:
                  type: integer
                completedRequests:
                  type: integer
                downloadsInProgress:
                  type: integer
                totalDownloads:
                  type: integer

    MediaSearchResult:
      type: object
      properties:
        id:
          type: string
        tmdbId:
          type: string
        title:
          type: string
        type:
          type: string
          enum: [movie, tv]
        year:
          type: integer
        overview:
          type: string
        posterPath:
          type: string
        backdropPath:
          type: string
        status:
          type: object
          properties:
            inPlex:
              type: boolean
            requested:
              type: boolean
            available:
              type: boolean

    MediaSearchResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/MediaSearchResult'
                pagination:
                  $ref: '#/components/schemas/PaginationInfo'

    MediaRequestInput:
      type: object
      required:
        - title
        - mediaType
      properties:
        title:
          type: string
        mediaType:
          type: string
          enum: [movie, tv]
        tmdbId:
          type: string
        overseerrId:
          type: string

    MediaRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        mediaType:
          type: string
          enum: [movie, tv]
        tmdbId:
          type: string
        overseerrId:
          type: string
        status:
          type: string
          enum: [pending, approved, declined, available]
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MediaRequestResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/MediaRequest'

    MediaRequestListResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                requests:
                  type: array
                  items:
                    $ref: '#/components/schemas/MediaRequest'
                pagination:
                  $ref: '#/components/schemas/PaginationInfo'

    PaginationInfo:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer

    UserWithCounts:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            _count:
              type: object
              properties:
                mediaRequests:
                  type: integer
                youtubeDownloads:
                  type: integer

    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserWithCounts'
                pagination:
                  $ref: '#/components/schemas/PaginationInfo'

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: VALIDATION_ERROR
              message: Invalid input parameters

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: UNAUTHORIZED
              message: Authentication required

    ForbiddenError:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: FORBIDDEN
              message: Insufficient permissions

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: NOT_FOUND
              message: Resource not found

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: INTERNAL_ERROR
              message: An unexpected error occurred
