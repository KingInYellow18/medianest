# MediaNest Homelab Infrastructure - Ansible Playbook
# Based on validated Ansible core with network automation capabilities

---
- name: MediaNest Infrastructure Configuration
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    # Container runtime configuration
    docker_version: "24.0"
    docker_compose_version: "2.21.0"
    
    # Network configuration based on discovered patterns
    internal_network: "172.25.0.0/24"
    public_network: "172.26.0.0/24"
    database_network: "172.27.0.0/24"
    monitoring_network: "172.28.0.0/24"
    
    # Storage configuration
    medianest_data_dir: "/var/lib/medianest"
    medianest_log_dir: "/var/log/medianest"
    
    # Security configuration
    medianest_user: "medianest"
    medianest_group: "medianest"
    medianest_uid: 1001
    medianest_gid: 1001
    
    # Monitoring configuration
    prometheus_port: 9090
    grafana_port: 3001
    node_exporter_port: 9100
    
  pre_tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
    
    - name: Install required packages
      package:
        name:
          - curl
          - wget
          - vim
          - htop
          - net-tools
          - ufw
          - fail2ban
          - unattended-upgrades
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - python3
          - python3-pip
          - python3-docker
        state: present

  tasks:
    - name: System Configuration
      block:
        - name: Create MediaNest user
          user:
            name: "{{ medianest_user }}"
            uid: "{{ medianest_uid }}"
            group: "{{ medianest_group }}"
            create_home: yes
            shell: /bin/bash
            groups: docker
            append: yes
        
        - name: Create MediaNest group
          group:
            name: "{{ medianest_group }}"
            gid: "{{ medianest_gid }}"
        
        - name: Configure kernel parameters
          sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: yes
          loop:
            - { name: 'vm.max_map_count', value: '262144' }
            - { name: 'fs.file-max', value: '65536' }
            - { name: 'net.core.somaxconn', value: '65535' }
            - { name: 'net.ipv4.tcp_max_syn_backlog', value: '8192' }
            - { name: 'net.ipv4.ip_local_port_range', value: '1024 65535' }
            - { name: 'net.ipv4.tcp_fin_timeout', value: '30' }
            - { name: 'vm.swappiness', value: '10' }
        
        - name: Configure system limits
          lineinfile:
            dest: /etc/security/limits.conf
            line: "{{ item }}"
          loop:
            - "{{ medianest_user }} soft nofile 65536"
            - "{{ medianest_user }} hard nofile 65536"
            - "{{ medianest_user }} soft nproc 4096"
            - "{{ medianest_user }} hard nproc 4096"
        
        - name: Create directory structure
          file:
            path: "{{ item }}"
            state: directory
            owner: "{{ medianest_user }}"
            group: "{{ medianest_group }}"
            mode: '0755'
          loop:
            - "{{ medianest_data_dir }}"
            - "{{ medianest_data_dir }}/postgres"
            - "{{ medianest_data_dir }}/redis"
            - "{{ medianest_data_dir }}/uploads"
            - "{{ medianest_data_dir }}/backups"
            - "{{ medianest_log_dir }}"
            - "{{ medianest_log_dir }}/application"
            - "{{ medianest_log_dir }}/nginx"
            - "{{ medianest_log_dir }}/system"
            - /etc/medianest
            - /opt/medianest/scripts

    - name: Docker Installation and Configuration
      block:
        - name: Add Docker APT key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
        
        - name: Add Docker APT repository
          apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
        
        - name: Install Docker
          package:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
        
        - name: Configure Docker daemon
          template:
            src: docker-daemon.json.j2
            dest: /etc/docker/daemon.json
            owner: root
            group: root
            mode: '0644'
          notify: restart docker
        
        - name: Start and enable Docker service
          systemd:
            name: docker
            state: started
            enabled: yes
            daemon_reload: yes
        
        - name: Add users to docker group
          user:
            name: "{{ item }}"
            groups: docker
            append: yes
          loop:
            - "{{ ansible_user }}"
            - "{{ medianest_user }}"

    - name: Network Configuration
      block:
        - name: Configure UFW firewall rules
          ufw:
            rule: "{{ item.rule }}"
            port: "{{ item.port }}"
            proto: "{{ item.proto | default('tcp') }}"
            from_ip: "{{ item.from_ip | default('any') }}"
            comment: "{{ item.comment }}"
          loop:
            # SSH access
            - { rule: 'allow', port: '22', comment: 'SSH access' }
            # HTTP/HTTPS
            - { rule: 'allow', port: '80', comment: 'HTTP' }
            - { rule: 'allow', port: '443', comment: 'HTTPS' }
            # Application ports (from internal networks only)
            - { rule: 'allow', port: '3000', from_ip: '10.0.0.0/16', comment: 'MediaNest app' }
            - { rule: 'allow', port: '4000', from_ip: '10.0.0.0/16', comment: 'MediaNest API' }
            # Database ports (internal only)
            - { rule: 'allow', port: '5432', from_ip: '172.25.0.0/16', comment: 'PostgreSQL' }
            - { rule: 'allow', port: '6379', from_ip: '172.25.0.0/16', comment: 'Redis' }
            # Monitoring ports
            - { rule: 'allow', port: '9090', from_ip: '10.0.0.0/16', comment: 'Prometheus' }
            - { rule: 'allow', port: '9100', from_ip: '10.0.0.0/16', comment: 'Node Exporter' }
            - { rule: 'allow', port: '3001', from_ip: '10.0.0.0/16', comment: 'Grafana' }
        
        - name: Enable UFW
          ufw:
            state: enabled
            policy: deny
            direction: incoming
        
        - name: Configure fail2ban for SSH protection
          template:
            src: fail2ban-jail.local.j2
            dest: /etc/fail2ban/jail.local
            owner: root
            group: root
            mode: '0644'
          notify: restart fail2ban
        
        - name: Configure network bridge for Docker
          template:
            src: docker-network-setup.sh.j2
            dest: /opt/medianest/scripts/docker-network-setup.sh
            owner: root
            group: root
            mode: '0755'
          notify: setup docker networks

    - name: Security Hardening
      block:
        - name: Configure automatic security updates
          template:
            src: 20auto-upgrades.j2
            dest: /etc/apt/apt.conf.d/20auto-upgrades
            owner: root
            group: root
            mode: '0644'
        
        - name: Configure SSH hardening
          lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            state: present
          loop:
            - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
            - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
            - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }
            - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }
            - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }
            - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 2' }
            - { regexp: '^#?AllowUsers', line: 'AllowUsers {{ ansible_user }} {{ medianest_user }}' }
          notify: restart ssh
        
        - name: Set secure file permissions
          file:
            path: "{{ item.path }}"
            mode: "{{ item.mode }}"
            owner: "{{ item.owner | default('root') }}"
            group: "{{ item.group | default('root') }}"
          loop:
            - { path: '/etc/ssh/sshd_config', mode: '0600' }
            - { path: '/etc/shadow', mode: '0640' }
            - { path: '/etc/gshadow', mode: '0640' }

    - name: Monitoring and Observability
      block:
        - name: Install Node Exporter
          get_url:
            url: "https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz"
            dest: /tmp/node_exporter.tar.gz
            mode: '0644'
        
        - name: Extract Node Exporter
          unarchive:
            src: /tmp/node_exporter.tar.gz
            dest: /tmp
            remote_src: yes
            creates: /tmp/node_exporter-1.6.1.linux-amd64
        
        - name: Install Node Exporter binary
          copy:
            src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter
            dest: /usr/local/bin/node_exporter
            mode: '0755'
            owner: root
            group: root
            remote_src: yes
        
        - name: Create Node Exporter user
          user:
            name: node_exporter
            system: yes
            shell: /bin/false
            home: /nonexistent
            createhome: no
        
        - name: Create Node Exporter systemd service
          template:
            src: node-exporter.service.j2
            dest: /etc/systemd/system/node_exporter.service
            owner: root
            group: root
            mode: '0644'
          notify: 
            - reload systemd
            - start node exporter
        
        - name: Configure log rotation
          template:
            src: medianest-logrotate.j2
            dest: /etc/logrotate.d/medianest
            owner: root
            group: root
            mode: '0644'

    - name: Backup Configuration
      block:
        - name: Create backup scripts
          template:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            owner: "{{ medianest_user }}"
            group: "{{ medianest_group }}"
            mode: '0755'
          loop:
            - { src: 'backup-database.sh.j2', dest: '/opt/medianest/scripts/backup-database.sh' }
            - { src: 'backup-files.sh.j2', dest: '/opt/medianest/scripts/backup-files.sh' }
            - { src: 'backup-verify.sh.j2', dest: '/opt/medianest/scripts/backup-verify.sh' }
        
        - name: Configure backup cron jobs
          cron:
            name: "{{ item.name }}"
            minute: "{{ item.minute }}"
            hour: "{{ item.hour }}"
            job: "{{ item.job }}"
            user: "{{ medianest_user }}"
          loop:
            - {
                name: "Daily database backup",
                minute: "0",
                hour: "2",
                job: "/opt/medianest/scripts/backup-database.sh"
              }
            - {
                name: "Daily file backup",
                minute: "30",
                hour: "2",
                job: "/opt/medianest/scripts/backup-files.sh"
              }
            - {
                name: "Weekly backup verification",
                minute: "0",
                hour: "3",
                job: "/opt/medianest/scripts/backup-verify.sh"
              }

    - name: Application Deployment Preparation
      block:
        - name: Create Docker Swarm cluster
          shell: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
          register: swarm_init_result
          when: inventory_hostname == groups['all'][0]
          ignore_errors: yes
        
        - name: Get Docker Swarm join token
          shell: docker swarm join-token worker -q
          register: swarm_worker_token
          when: inventory_hostname == groups['all'][0]
        
        - name: Join Docker Swarm cluster
          shell: docker swarm join --token {{ hostvars[groups['all'][0]]['swarm_worker_token']['stdout'] }} {{ hostvars[groups['all'][0]]['ansible_default_ipv4']['address'] }}:2377
          when: inventory_hostname != groups['all'][0] and hostvars[groups['all'][0]]['swarm_worker_token'] is defined
          ignore_errors: yes
        
        - name: Create Docker secrets for MediaNest
          shell: |
            echo "{{ item.value }}" | docker secret create {{ item.name }} -
          loop:
            - { name: 'medianest_nextauth_secret_v2', value: '{{ nextauth_secret | default("changeme-nextauth-secret-" + ansible_date_time.epoch) }}' }
            - { name: 'medianest_jwt_secret_v2', value: '{{ jwt_secret | default("changeme-jwt-secret-" + ansible_date_time.epoch) }}' }
            - { name: 'medianest_encryption_key_v2', value: '{{ encryption_key | default("changeme-encryption-key-" + ansible_date_time.epoch) }}' }
            - { name: 'medianest_postgres_db_v2', value: 'medianest' }
            - { name: 'medianest_postgres_user_v2', value: 'medianest' }
            - { name: 'medianest_postgres_password_v2', value: '{{ postgres_password | default("changeme-postgres-" + ansible_date_time.epoch) }}' }
            - { name: 'medianest_redis_password_v2', value: '{{ redis_password | default("changeme-redis-" + ansible_date_time.epoch) }}' }
          when: inventory_hostname == groups['all'][0]
          ignore_errors: yes

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes
    
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted
    
    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted
    
    - name: setup docker networks
      shell: /opt/medianest/scripts/docker-network-setup.sh
    
    - name: reload systemd
      systemd:
        daemon_reload: yes
    
    - name: start node exporter
      systemd:
        name: node_exporter
        state: started
        enabled: yes

# Role-specific configurations
- name: Configure Primary Node
  hosts: all[0]
  become: yes
  tasks:
    - name: Install additional monitoring stack
      docker_container:
        name: prometheus
        image: prom/prometheus:v2.48.0
        state: started
        restart_policy: unless-stopped
        published_ports:
          - "9090:9090"
        volumes:
          - /etc/medianest/prometheus.yml:/etc/prometheus/prometheus.yml:ro
        command:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=15d'
          - '--web.enable-lifecycle'
        networks:
          - name: "{{ monitoring_network }}"
    
    - name: Create Prometheus configuration
      template:
        src: prometheus.yml.j2
        dest: /etc/medianest/prometheus.yml
        owner: root
        group: root
        mode: '0644'

- name: Configure Worker Nodes
  hosts: all[1:]
  become: yes
  tasks:
    - name: Ensure worker nodes are ready
      debug:
        msg: "Worker node {{ inventory_hostname }} configured successfully"

- name: Validate Deployment
  hosts: all
  become: yes
  tasks:
    - name: Check Docker service status
      systemd:
        name: docker
        state: started
      register: docker_status
    
    - name: Check Node Exporter status
      systemd:
        name: node_exporter
        state: started
      register: node_exporter_status
    
    - name: Display deployment summary
      debug:
        msg: |
          MediaNest Infrastructure Configuration Complete!
          
          Node: {{ inventory_hostname }}
          Docker Status: {{ 'Running' if docker_status.state == 'started' else 'Failed' }}
          Node Exporter: {{ 'Running' if node_exporter_status.state == 'started' else 'Failed' }}
          
          Next steps:
          1. Deploy MediaNest application with Docker Compose
          2. Configure DNS records for medianest.local
          3. Access monitoring at http://{{ ansible_default_ipv4.address }}:9090