# MediaNest Environment Configuration
# Copy this file to .env and fill in your values

# ============================================================================
# CRITICAL SECURITY SECRETS - Generate unique values for each environment
# ============================================================================
# SECURITY WARNING: NEVER commit actual secrets to version control
# Use different values for development, staging, and production environments
# Rotate secrets regularly, especially after security incidents

# JWT (JSON Web Token) signing secret for authentication token validation
# CRITICAL: This secret validates all user authentication tokens
# If compromised, all user sessions become invalid and auth system is compromised
# Generate with: openssl rand -base64 32
# Length: 32+ characters, high entropy, unique per environment
JWT_SECRET=<generate-with-openssl-rand-base64-32>

# JWT secret for rolling key rotation (optional security feature)
# Allows graceful rotation of JWT secrets without invalidating all user sessions
# Set to new secret before rotating JWT_SECRET to maintain user sessions
# Generate with: openssl rand -base64 32
JWT_SECRET_ROTATION=<optional-for-key-rotation>

# Application-level encryption key for sensitive data at rest
# Used for encrypting: API keys, personal information, sensitive user data
# CRITICAL: Data encrypted with this key becomes unrecoverable if lost
# Generate with: openssl rand -base64 32
# Store securely in production secret management system
ENCRYPTION_KEY=<generate-with-openssl-rand-base64-32>

# ============================================================================
# SERVER RUNTIME CONFIGURATION
# ============================================================================
# Node.js environment mode affects performance, logging, and security features
# Values: development | production | test
# development: Verbose logging, hot-reload, debug features enabled
# production: Optimized performance, minimal logging, security hardening
# test: Test-specific configurations, mocked external services
NODE_ENV=production

# HTTP server port for the application
# Default: 3000 for development, typically 80/443 for production behind reverse proxy
# Docker production: internal port 3000, external ports mapped via nginx
# Must match Docker compose port mappings
PORT=3000

# ============================================================================
# DATABASE CONFIGURATION - PostgreSQL Connection String
# ============================================================================
# Complete PostgreSQL connection URL with all parameters
# Format: postgresql://[user]:[password]@[host]:[port]/[database]?[options]
# 
# Connection Parameters:
# - user: Database username (create dedicated user for MediaNest)
# - password: Strong database password (use secrets in production)
# - host: Database hostname (localhost for local, service name for Docker)
# - port: PostgreSQL port (default: 5432)
# - database: Database name (create dedicated database for MediaNest)
# 
# Optional URL parameters for production optimization:
# - connection_limit=20: Maximum concurrent connections
# - pool_timeout=30: Connection pool timeout in seconds
# - sslmode=require: Force SSL/TLS encryption for production
# 
# Example production URL:
# DATABASE_URL=postgresql://medianest_user:secure_password@postgres:5432/medianest_prod?connection_limit=20&pool_timeout=30&sslmode=require
DATABASE_URL=postgresql://user:password@localhost:5432/medianest

# ============================================================================
# PLEX MEDIA SERVER INTEGRATION - Media library and authentication
# ============================================================================
# Plex integration enables media discovery, user authentication, and content management

# Plex authentication token for API access
# Obtain from: Plex Web App -> Settings -> Account -> Privacy -> "Show Advanced"
# Click "Get Token" and copy the X-Plex-Token value
# SECURITY: This token provides full access to your Plex server - keep secure
# Format: 20-character alphanumeric string (e.g., "abcd1234efgh5678ijkl")
PLEX_TOKEN=<your-plex-token>

# Plex Media Server base URL for API connections
# Local server: http://localhost:32400 or http://YOUR_SERVER_IP:32400
# Remote server: Use your external URL with port forwarding or Plex Relay
# Docker: Use service name if Plex runs in Docker on same network
# Examples:
# - Local: http://192.168.1.100:32400
# - Docker: http://plex:32400
# - Remote: https://plex.yourdomain.com:32400
PLEX_SERVER_URL=http://localhost:32400

# Enable/disable Plex integration features
# true: MediaNest will connect to Plex for media discovery and user auth
# false: Plex features disabled, use local authentication only
# Useful for development or when Plex server is temporarily unavailable
PLEX_ENABLED=true

# Default Plex token for fallback authentication (optional)
# Used when primary PLEX_TOKEN fails or for system-level operations
# Should be different from PLEX_TOKEN for security redundancy
# Leave empty if not using fallback authentication
PLEX_DEFAULT_TOKEN=<default-plex-token>

# ============================================================================
# OPTIONAL EXTERNAL SERVICE INTEGRATIONS - Enhanced media metadata and monitoring
# ============================================================================
# These services provide additional functionality but are not required for core features
# Leave empty or remove variables if not using these services

# YouTube Data API v3 - Enhanced video metadata and thumbnails
# Provides: Video descriptions, channel info, view counts, thumbnail URLs
# Setup: Google Cloud Console -> APIs & Services -> Enable YouTube Data API v3
# Create API key with YouTube Data API v3 access
# Quota: 10,000 units/day free tier (sufficient for most use cases)
# Leave empty to disable YouTube metadata enrichment
YOUTUBE_API_KEY=<optional>

# The Movie Database (TMDB) API - Movie and TV show metadata
# Provides: Posters, plot summaries, cast info, ratings, release dates
# Setup: Register at https://www.themoviedb.org/settings/api
# Free account includes 40 requests per 10 seconds
# Essential for media library organization and discovery features
# Leave empty to use basic Plex metadata only
TMDB_API_KEY=<optional>

# Overseerr Integration - Media request management system
# Overseerr manages user requests for movies/TV shows and integrates with *arr apps
# Enables: User media requests, approval workflows, download automation
OVERSEERR_ENABLED=false
# Overseerr server URL (include protocol and port)
# Example: http://overseerr.yourdomain.com:5055 or https://requests.yourdomain.com
OVERSEERR_URL=<your-overseerr-url>
# Overseerr API key from Settings -> General -> API Key
# Required if OVERSEERR_ENABLED=true for API communication
OVERSEERR_API_KEY=<your-overseerr-api-key>

# Uptime Kuma Integration - Service monitoring and alerting
# Monitors MediaNest and related services, sends notifications on downtime
# Enables: Health monitoring, uptime statistics, alert notifications
UPTIME_KUMA_ENABLED=false
# Uptime Kuma server URL (include protocol and port)
# Example: http://uptime.yourdomain.com:3001 or https://status.yourdomain.com
UPTIME_KUMA_URL=<your-uptime-kuma-url>
# Uptime Kuma admin username for API authentication
UPTIME_KUMA_USERNAME=<your-username>
# Uptime Kuma admin password for API authentication
# SECURITY: Use strong password, consider environment-specific credentials
UPTIME_KUMA_PASSWORD=<your-password>

# ============================================================================
# Application Configuration
# ============================================================================
# Frontend URL for CORS (comma-separated for multiple)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
FRONTEND_URL=http://localhost:3000

# JWT Configuration
JWT_ISSUER=medianest
JWT_AUDIENCE=medianest-users

# Production metrics protection (generate with: openssl rand -base64 24)
METRICS_TOKEN=<generate-for-production>

# Redis Configuration (optional)
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=<optional-redis-password>

# ============================================================================
# Security Notice
# ============================================================================
# NEVER commit secrets to version control
# Use different secrets for each environment (dev, staging, prod)
# Rotate secrets regularly, especially in production
# Store production secrets in secure secret management systems