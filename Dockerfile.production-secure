# ðŸš€ PRODUCTION-SECURE DOCKER BUILD - MediaNest
# Multi-stage build optimized for security and production deployment
# Zero-trust security model with minimal attack surface

# Build arguments
ARG NODE_VERSION=20
ARG ALPINE_VERSION=3.19
ARG BUILD_DATE
ARG VCS_REF

# ðŸ“¦ Backend Production Build
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS backend-production
WORKDIR /app

# Install minimal runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/* \
    && addgroup -g 1001 -S nodejs \
    && adduser -S medianest -u 1001 -G nodejs

# Copy production files
COPY --chown=medianest:nodejs backend/dist ./dist
COPY --chown=medianest:nodejs backend/node_modules ./node_modules
COPY --chown=medianest:nodejs backend/prisma ./prisma
COPY --chown=medianest:nodejs backend/package.json ./package.json

# Create secure entrypoint
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/sh
set -e

# Health check
if [ "$1" = "healthcheck" ]; then
    curl -f http://localhost:3001/health || exit 1
fi

# Migrate database if needed
if [ "$RUN_MIGRATIONS" = "true" ]; then
    npx prisma migrate deploy
fi

# Start server
exec dumb-init node dist/server.js
EOF

RUN chmod +x /app/entrypoint.sh && \
    chown medianest:nodejs /app/entrypoint.sh && \
    mkdir -p /app/logs && \
    chown medianest:nodejs /app/logs

# Security hardening
USER medianest:nodejs

# Runtime configuration
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=512 --disable-proto=delete" \
    TZ=UTC

EXPOSE 3001

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/entrypoint.sh healthcheck

ENTRYPOINT ["/app/entrypoint.sh"]

# ðŸ“¦ Frontend Production Build  
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS frontend-production
WORKDIR /app

# Install minimal runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/* \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001 -G nodejs

# Copy production files
COPY --chown=nextjs:nodejs frontend/.next/standalone ./
COPY --chown=nextjs:nodejs frontend/.next/static ./.next/static
COPY --chown=nextjs:nodejs frontend/public ./public

# Create secure entrypoint
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/sh
set -e

# Health check
if [ "$1" = "healthcheck" ]; then
    curl -f http://localhost:3000/api/health || exit 1
fi

# Start Next.js
exec dumb-init node server.js
EOF

RUN chmod +x /app/entrypoint.sh && \
    chown nextjs:nodejs /app/entrypoint.sh

# Security hardening
USER nextjs:nodejs

# Runtime configuration
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    NODE_OPTIONS="--max-old-space-size=512 --disable-proto=delete" \
    HOSTNAME="0.0.0.0" \
    TZ=UTC

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/entrypoint.sh healthcheck

ENTRYPOINT ["/app/entrypoint.sh"]

# Metadata labels
LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.title="MediaNest Production" \
      org.opencontainers.image.description="Secure production deployment" \
      org.opencontainers.image.vendor="MediaNest" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.licenses="MIT"