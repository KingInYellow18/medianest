# ðŸŽ¯ STANDALONE BACKEND DOCKER BUILD - MediaNest
# Single-stage production-ready backend container
# Zero-dependency conflicts with fresh npm install

FROM node:20-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    python3 \
    make \
    g++ \
    libc6-compat \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S medianest -u 1001 -G nodejs

WORKDIR /app

# Copy package.json first for better caching
COPY backend/package.json ./package.json
COPY backend/prisma ./prisma/

# Remove package-lock.json to force fresh install
RUN rm -f package-lock.json

# Install all dependencies first for build
RUN npm install --no-audit --no-fund --legacy-peer-deps && \
    npm cache clean --force

# Copy source code
COPY backend/src ./src
COPY backend/tsconfig*.json ./

# Generate Prisma client and build
RUN npx prisma generate && \
    npm run build && \
    rm -rf src/ tsconfig*.json node_modules/.cache && \
    npm prune --production --legacy-peer-deps && \
    npm cache clean --force

# Create optimized entrypoint
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/sh
set -e

# Health check
if [ "$1" = "healthcheck" ]; then
    curl -f http://localhost:3001/health || exit 1
fi

# Run migrations if needed
if [ "$RUN_MIGRATIONS" = "true" ]; then
    echo "Running database migrations..."
    npx prisma migrate deploy
fi

# Start server
exec dumb-init node dist/server.js
EOF

RUN chmod +x /app/entrypoint.sh && \
    chown -R medianest:nodejs /app && \
    mkdir -p /app/logs

# Switch to non-root user
USER medianest

# Runtime configuration
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=512" \
    PORT=3001

EXPOSE 3001

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/entrypoint.sh healthcheck

ENTRYPOINT ["/app/entrypoint.sh"]