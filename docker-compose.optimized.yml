# üöÄ Optimized Docker Compose Configuration for MediaNest\n# Production-ready with performance optimization and security\n\nversion: '3.8'\n\nservices:\n  # üåê Frontend Service (Next.js)\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile.optimized\n      target: frontend-production\n      args:\n        NODE_ENV: production\n        NEXT_TELEMETRY_DISABLED: \"1\"\n      cache_from:\n        - medianest-frontend:cache\n    image: medianest-frontend:latest\n    container_name: medianest-frontend\n    restart: unless-stopped\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}\n      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}\n      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}\n      - DATABASE_URL=${DATABASE_URL}\n    networks:\n      - medianest-network\n    depends_on:\n      backend:\n        condition: service_healthy\n    healthcheck:\n      test: [\"CMD\", \"/app/entrypoint.sh\", \"healthcheck\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n        reservations:\n          memory: 256M\n          cpus: '0.25'\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp:size=100M,noexec,nosuid,nodev\n    \n  # üîß Backend Service (Express.js)\n  backend:\n    build:\n      context: .\n      dockerfile: Dockerfile.optimized\n      target: backend-production\n      args:\n        NODE_ENV: production\n      cache_from:\n        - medianest-backend:cache\n    image: medianest-backend:latest\n    container_name: medianest-backend\n    restart: unless-stopped\n    ports:\n      - \"3001:3001\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=redis://redis:6379\n      - JWT_SECRET=${JWT_SECRET}\n      - ENCRYPTION_KEY=${ENCRYPTION_KEY}\n      - PLEX_CLIENT_ID=${PLEX_CLIENT_ID}\n      - PLEX_CLIENT_SECRET=${PLEX_CLIENT_SECRET}\n      - RUN_MIGRATIONS=${RUN_MIGRATIONS:-false}\n    volumes:\n      - ./logs:/app/logs:rw\n      - uploads:/app/uploads:rw\n    networks:\n      - medianest-network\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    healthcheck:\n      test: [\"CMD\", \"/app/entrypoint.sh\", \"healthcheck\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 15s\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '1.0'\n        reservations:\n          memory: 512M\n          cpus: '0.5'\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp:size=200M,noexec,nosuid,nodev\n\n  # üóÑÔ∏è  PostgreSQL Database\n  postgres:\n    image: postgres:16-alpine\n    container_name: medianest-postgres\n    restart: unless-stopped\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB:-medianest}\n      POSTGRES_USER: ${POSTGRES_USER:-medianest}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n      POSTGRES_INITDB_ARGS: \"--encoding=UTF-8 --lc-collate=C --lc-ctype=C\"\n      PGDATA: /var/lib/postgresql/data/pgdata\n    volumes:\n      - postgres_data:/var/lib/postgresql/data:rw\n      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro\n      - ./infrastructure/database/optimization.sql:/docker-entrypoint-initdb.d/02-optimization.sql:ro\n    ports:\n      - \"5432:5432\"\n    command: >\n      postgres\n      -c shared_preload_libraries=pg_stat_statements\n      -c pg_stat_statements.max=10000\n      -c pg_stat_statements.track=all\n      -c max_connections=100\n      -c shared_buffers=256MB\n      -c effective_cache_size=1GB\n      -c maintenance_work_mem=64MB\n      -c checkpoint_completion_target=0.9\n      -c wal_buffers=16MB\n      -c default_statistics_target=100\n      -c random_page_cost=1.1\n      -c effective_io_concurrency=200\n      -c work_mem=4MB\n      -c min_wal_size=1GB\n      -c max_wal_size=4GB\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-medianest} -d ${POSTGRES_DB:-medianest}\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_period: 30s\n    networks:\n      - medianest-network\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '1.0'\n        reservations:\n          memory: 512M\n          cpus: '0.5'\n    security_opt:\n      - no-new-privileges:true\n\n  # üî¥ Redis Cache\n  redis:\n    image: redis:7-alpine\n    container_name: medianest-redis\n    restart: unless-stopped\n    command: >\n      redis-server\n      --appendonly yes\n      --maxmemory 256mb\n      --maxmemory-policy allkeys-lru\n      --tcp-keepalive 300\n      --timeout 0\n      --tcp-backlog 511\n      --save 900 1 300 10 60 10000\n    volumes:\n      - redis_data:/data:rw\n    ports:\n      - \"6379:6379\"\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\"]\n      interval: 10s\n      timeout: 3s\n      retries: 5\n      start_period: 10s\n    networks:\n      - medianest-network\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n        reservations:\n          memory: 128M\n          cpus: '0.1'\n    security_opt:\n      - no-new-privileges:true\n\n  # üîç nginx Reverse Proxy & Load Balancer\n  nginx:\n    image: nginx:1.25-alpine\n    container_name: medianest-nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro\n      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro\n      - nginx_cache:/var/cache/nginx:rw\n      - nginx_logs:/var/log/nginx:rw\n    networks:\n      - medianest-network\n    depends_on:\n      frontend:\n        condition: service_healthy\n      backend:\n        condition: service_healthy\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    deploy:\n      resources:\n        limits:\n          memory: 256M\n          cpus: '0.5'\n        reservations:\n          memory: 64M\n          cpus: '0.1'\n    security_opt:\n      - no-new-privileges:true\n\n  # üìä Prometheus Monitoring (Optional)\n  prometheus:\n    image: prom/prometheus:v2.45.0\n    container_name: medianest-prometheus\n    restart: unless-stopped\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=200h'\n      - '--web.enable-lifecycle'\n      - '--web.enable-admin-api'\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro\n      - prometheus_data:/prometheus:rw\n    networks:\n      - medianest-network\n    profiles:\n      - monitoring\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9090/-/healthy\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n    security_opt:\n      - no-new-privileges:true\n\n  # üìà Grafana Dashboard (Optional)\n  grafana:\n    image: grafana/grafana:10.0.3\n    container_name: medianest-grafana\n    restart: unless-stopped\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource\n    volumes:\n      - grafana_data:/var/lib/grafana:rw\n      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro\n      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro\n    networks:\n      - medianest-network\n    profiles:\n      - monitoring\n    depends_on:\n      - prometheus\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f http://localhost:3000/api/health || exit 1\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    deploy:\n      resources:\n        limits:\n          memory: 256M\n          cpus: '0.5'\n    security_opt:\n      - no-new-privileges:true\n\n# üì¶ Named Volumes\nvolumes:\n  postgres_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: ./data/postgres\n  redis_data:\n    driver: local\n    driver_opts:\n      type: none  \n      o: bind\n      device: ./data/redis\n  uploads:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: ./data/uploads\n  nginx_cache:\n    driver: local\n  nginx_logs:\n    driver: local\n  prometheus_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: ./data/prometheus\n  grafana_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: ./data/grafana\n\n# üåê Networks\nnetworks:\n  medianest-network:\n    driver: bridge\n    driver_opts:\n      com.docker.network.bridge.name: medianest0\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n          gateway: 172.20.0.1\n"
