# ==============================================================================
# üìä LOKI LOG AGGREGATION STACK - MEDIANEST MONITORING
# ==============================================================================
# Complete log aggregation setup with Loki, Promtail, and Grafana
# Usage: docker-compose -f monitoring/docker-compose.loki.yml up -d
# ==============================================================================

version: '3.8'

# Monitoring environment variables
x-monitoring-env: &monitoring-env
  ENVIRONMENT: ${ENVIRONMENT:-development}
  REGION: ${REGION:-local}
  LOG_LEVEL: ${LOG_LEVEL:-info}

services:
  # ==============================================================================
  # üîç LOKI - Log Aggregation System
  # ==============================================================================
  loki:
    image: grafana/loki:2.9.0
    container_name: medianest-loki
    restart: unless-stopped
    environment:
      <<: *monitoring-env
    command: -config.file=/etc/loki/config.yml
    volumes:
      # Loki configuration
      - ./loki/loki-config.yml:/etc/loki/config.yml:ro
      # Persistent storage for logs and indexes
      - loki_data:/loki
    ports:
      # Loki HTTP API port for Promtail and Grafana
      - '3100:3100'
      # Loki gRPC port for high-performance ingestion
      - '9096:9096'
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - medianest-monitoring
    labels:
      - "com.docker.compose.project=medianest-monitoring"
      - "com.medianest.service=loki"

  # ==============================================================================
  # üì° PROMTAIL - Log Collector and Shipper
  # ==============================================================================
  promtail:
    image: grafana/promtail:2.9.0
    container_name: medianest-promtail
    restart: unless-stopped
    environment:
      <<: *monitoring-env
    command: -config.file=/etc/promtail/config.yml
    volumes:
      # Promtail configuration
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      # Docker socket for container log collection
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Docker container logs
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # Application log files from MEDIANEST backend
      - ../backend/logs:/var/log/medianest/backend:ro
      # System logs (optional)
      - /var/log:/var/log:ro
      # Promtail positions file (tracks log positions)
      - promtail_positions:/tmp
    ports:
      # Promtail metrics and health endpoint
      - '9080:9080'
    depends_on:
      loki:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:9080/metrics || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - medianest-monitoring
    labels:
      - "com.docker.compose.project=medianest-monitoring"
      - "com.medianest.service=promtail"

  # ==============================================================================
  # üìà GRAFANA - Log Visualization Dashboard
  # ==============================================================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: medianest-grafana
    restart: unless-stopped
    environment:
      <<: *monitoring-env
      # Grafana admin credentials
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-medianest_grafana}
      # Disable user registration
      GF_USERS_ALLOW_SIGN_UP: "false"
      # Enable anonymous access for development
      GF_AUTH_ANONYMOUS_ENABLED: ${GRAFANA_ANONYMOUS:-true}
      GF_AUTH_ANONYMOUS_ORG_ROLE: ${GRAFANA_ANONYMOUS_ROLE:-Viewer}
      # Install plugins
      GF_INSTALL_PLUGINS: grafana-loki-datasource
      # Performance settings
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      # Logging
      GF_LOG_LEVEL: ${GRAFANA_LOG_LEVEL:-info}
    volumes:
      # Grafana persistent data
      - grafana_data:/var/lib/grafana
      # Pre-configured dashboards
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      # Grafana web interface
      - '3001:3000'
    depends_on:
      loki:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - medianest-monitoring
    labels:
      - "com.docker.compose.project=medianest-monitoring"
      - "com.medianest.service=grafana"

  # ==============================================================================
  # üñºÔ∏è GRAFANA IMAGE RENDERER (Optional)
  # ==============================================================================
  renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: medianest-grafana-renderer
    restart: unless-stopped
    environment:
      ENABLE_METRICS: "true"
      HTTP_PORT: 8081
    ports:
      - '8081:8081'
    networks:
      - medianest-monitoring
    profiles:
      - renderer
    labels:
      - "com.docker.compose.project=medianest-monitoring"
      - "com.medianest.service=grafana-renderer"

  # ==============================================================================
  # üö® ALERTMANAGER (Optional - for log-based alerting)
  # ==============================================================================
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: medianest-alertmanager
    restart: unless-stopped
    environment:
      <<: *monitoring-env
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
      - '--cluster.listen-address=0.0.0.0:9094'
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      # Alertmanager web interface
      - '9093:9093'
      # Alertmanager cluster communication
      - '9094:9094'
    networks:
      - medianest-monitoring
    profiles:
      - alerting
    labels:
      - "com.docker.compose.project=medianest-monitoring"
      - "com.medianest.service=alertmanager"

# ==============================================================================
# üì¶ VOLUMES
# ==============================================================================
volumes:
  loki_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/loki
      o: bind
  promtail_positions:
    driver: local
  grafana_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/grafana
      o: bind
  alertmanager_data:
    driver: local

# ==============================================================================
# üåê NETWORKS
# ==============================================================================
networks:
  medianest-monitoring:
    driver: bridge
    name: medianest-monitoring-network
    ipam:
      config:
        - subnet: 172.31.0.0/16

# ==============================================================================
# üöÄ USAGE EXAMPLES
# ==============================================================================
#
# Start complete monitoring stack:
# docker-compose -f monitoring/docker-compose.loki.yml up -d
#
# Start with alerting:
# docker-compose -f monitoring/docker-compose.loki.yml --profile alerting up -d
#
# Start with image renderer:
# docker-compose -f monitoring/docker-compose.loki.yml --profile renderer up -d
#
# View logs:
# docker-compose -f monitoring/docker-compose.loki.yml logs -f loki
# docker-compose -f monitoring/docker-compose.loki.yml logs -f promtail
#
# Access services:
# Loki API: http://localhost:3100
# Grafana Dashboard: http://localhost:3001 (admin/medianest_grafana)
# Promtail Metrics: http://localhost:9080/metrics
# Alertmanager: http://localhost:9093 (with --profile alerting)
#
# Integration with main app:
# docker network connect medianest-development medianest-promtail
# docker network connect medianest-development medianest-loki