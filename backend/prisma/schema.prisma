generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  plexId        String   @unique @map("plex_id")
  plexUsername  String   @map("plex_username")
  email         String?
  role          String   @default("user")
  plexToken     String?  @map("plex_token")
  createdAt     DateTime @default(now()) @map("created_at")
  lastLoginAt   DateTime? @map("last_login_at")
  status        String   @default("active")

  mediaRequests    MediaRequest[]
  youtubeDownloads YoutubeDownload[]
  rateLimits       RateLimit[]
  sessionTokens    SessionToken[]
  serviceConfigs   ServiceConfig[]   @relation("UpdatedBy")

  @@map("users")
}

model MediaRequest {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  title        String
  mediaType    String    @map("media_type")
  tmdbId       String?   @map("tmdb_id")
  status       String    @default("pending")
  overseerrId  String?   @map("overseerr_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  completedAt  DateTime? @map("completed_at")

  user User @relation(fields: [userId], references: [id])

  @@map("media_requests")
}

model YoutubeDownload {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  playlistUrl       String    @map("playlist_url")
  playlistTitle     String?   @map("playlist_title")
  status            String    @default("queued")
  filePaths         Json?     @map("file_paths")
  plexCollectionId  String?   @map("plex_collection_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  completedAt       DateTime? @map("completed_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("youtube_downloads")
}

model ServiceStatus {
  id                Int      @id @default(autoincrement())
  serviceName       String   @unique @map("service_name")
  status            String?
  responseTimeMs    Int?     @map("response_time_ms")
  lastCheckAt       DateTime? @map("last_check_at")
  uptimePercentage  Decimal? @map("uptime_percentage") @db.Decimal(5, 2)

  @@map("service_status")
}

model RateLimit {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  endpoint     String
  requestCount Int      @default(0) @map("request_count")
  windowStart  DateTime @default(now()) @map("window_start")

  user User @relation(fields: [userId], references: [id])

  @@map("rate_limits")
}

model ServiceConfig {
  id           Int      @id @default(autoincrement())
  serviceName  String   @unique @map("service_name")
  serviceUrl   String   @map("service_url")
  apiKey       String?  @map("api_key")
  enabled      Boolean  @default(true)
  configData   Json?    @map("config_data")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy    String?  @map("updated_by")

  updatedByUser User? @relation("UpdatedBy", fields: [updatedBy], references: [id])

  @@map("service_config")
}

model SessionToken {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  tokenHash   String   @unique @map("token_hash")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  lastUsedAt  DateTime? @map("last_used_at")

  user User @relation(fields: [userId], references: [id])

  @@map("session_tokens")
}