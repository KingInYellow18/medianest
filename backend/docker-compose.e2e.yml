version: '3.8'

services:
  # Test Database
  postgres-e2e:
    image: postgres:15-alpine
    container_name: medianest-postgres-e2e
    environment:
      POSTGRES_DB: medianest_e2e
      POSTGRES_USER: e2e_user
      POSTGRES_PASSWORD: e2e_password
    ports:
      - '5434:5432'
    volumes:
      - postgres_e2e_data:/var/lib/postgresql/data
      - ./tests/e2e/fixtures/sql:/docker-entrypoint-initdb.d
    networks:
      - e2e-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U e2e_user -d medianest_e2e']
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Test Redis
  redis-e2e:
    image: redis:7-alpine
    container_name: medianest-redis-e2e
    ports:
      - '6381:6379'
    networks:
      - e2e-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
    tmpfs:
      - /data

  # Application under test
  app-e2e:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: medianest-app-e2e
    environment:
      NODE_ENV: test
      DATABASE_URL: postgresql://e2e_user:e2e_password@postgres-e2e:5432/medianest_e2e
      REDIS_URL: redis://redis-e2e:6379
      JWT_SECRET: e2e-jwt-secret-key-for-testing
      ENCRYPTION_KEY: e2e-encryption-key-32-chars-long
      PLEX_CLIENT_ID: e2e-test-client-id
      PLEX_CLIENT_SECRET: e2e-test-client-secret
      LOG_LEVEL: error
      PORT: 3001
    ports:
      - '3001:3001'
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
    networks:
      - e2e-network
    volumes:
      - ./src:/app/src:ro
      - ./dist:/app/dist
      - ./prisma:/app/prisma:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/api/v1/health']
      interval: 10s
      timeout: 5s
      retries: 10
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm start
      "

  # Mock external services
  plex-mock:
    image: nginx:alpine
    container_name: plex-mock-e2e
    ports:
      - '32400:80'
    volumes:
      - ./tests/e2e/fixtures/mocks/plex:/usr/share/nginx/html:ro
      - ./tests/e2e/config/nginx-plex.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - e2e-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 10s
      timeout: 3s
      retries: 3

  overseerr-mock:
    image: nginx:alpine
    container_name: overseerr-mock-e2e
    ports:
      - '5055:80'
    volumes:
      - ./tests/e2e/fixtures/mocks/overseerr:/usr/share/nginx/html:ro
      - ./tests/e2e/config/nginx-overseerr.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - e2e-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 10s
      timeout: 3s
      retries: 3

  # Test data seeder
  data-seeder:
    build:
      context: .
      dockerfile: Dockerfile.seeder
    container_name: medianest-seeder-e2e
    environment:
      DATABASE_URL: postgresql://e2e_user:e2e_password@postgres-e2e:5432/medianest_e2e
      REDIS_URL: redis://redis-e2e:6379
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
    networks:
      - e2e-network
    volumes:
      - ./tests/e2e/fixtures/seed-data:/app/seed-data:ro
      - ./tests/e2e/scripts:/app/scripts:ro
    command: node scripts/seed-test-data.js

networks:
  e2e-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_e2e_data:
    driver: local
