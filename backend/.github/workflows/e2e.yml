name: E2E Tests

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'package.json'
      - 'playwright.config.ts'
      - '.github/workflows/e2e.yml'
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io

jobs:
  # Build and test the application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/
          key: build-${{ runner.os }}-${{ github.sha }}

  # Install Playwright browsers
  install-browsers:
    name: Install Playwright Browsers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

  # E2E tests matrix
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: [build, install-browsers]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/4, 2/4, 3/4, 4/4]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: medianest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    env:
      DATABASE_URL: postgresql://testuser:testpass@localhost:5433/medianest_test
      REDIS_URL: redis://localhost:6380
      NODE_ENV: test
      JWT_SECRET: test-secret-key-for-ci
      ENCRYPTION_KEY: test-encryption-key-32-chars-long
      PLEX_CLIENT_ID: test-client-id
      PLEX_CLIENT_SECRET: test-client-secret
      E2E_BASE_URL: http://localhost:3001

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/
          key: build-${{ runner.os }}-${{ github.sha }}

      - name: Restore cached browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies (if cache miss)
        run: |
          if [ ! -d "node_modules" ]; then
            npm ci
            npx playwright install
          fi

      - name: Setup test database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Start application
        run: |
          npm start &
          echo $! > app.pid
          # Wait for app to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3001/api/v1/health; do sleep 2; done'

      - name: Run Playwright tests
        run: |
          npx playwright test \
            --project=${{ matrix.browser }} \
            --shard=${{ matrix.shard }} \
            --reporter=html,junit,json \
            --output-dir=test-results/${{ matrix.browser }}-${{ strategy.job-index }}
        env:
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: junit-${{ matrix.browser }}-${{ strategy.job-index }}.xml

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ strategy.job-index }}
          path: |
            test-results/
            playwright-report/
            junit-${{ matrix.browser }}-${{ strategy.job-index }}.xml
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}-${{ strategy.job-index }}
          path: test-results/**/*.png
          retention-days: 7

      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: videos-${{ matrix.browser }}-${{ strategy.job-index }}
          path: test-results/**/*.webm
          retention-days: 7

  # Performance tests with Lighthouse
  lighthouse:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: medianest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    env:
      DATABASE_URL: postgresql://testuser:testpass@localhost:5433/medianest_test
      REDIS_URL: redis://localhost:6380
      NODE_ENV: test
      JWT_SECRET: test-secret-key-for-ci
      ENCRYPTION_KEY: test-encryption-key-32-chars-long

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/
          key: build-${{ runner.os }}-${{ github.sha }}

      - name: Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Start application
        run: |
          npm start &
          echo $! > app.pid
          timeout 60s bash -c 'until curl -f http://localhost:3001/api/v1/health; do sleep 2; done'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 7

  # Collect and merge test results
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Merge JUnit reports
        run: |
          mkdir -p merged-reports
          find . -name "junit-*.xml" -exec cp {} merged-reports/ \;

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'E2E Test Results'
          path: 'merged-reports/junit-*.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Generate test summary
        if: always()
        run: |
          echo "## E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          total_files=$(find merged-reports -name "junit-*.xml" | wc -l)
          echo "- **Total test suites**: $total_files" >> $GITHUB_STEP_SUMMARY

          if [ $total_files -gt 0 ]; then
            total_tests=$(grep -h 'testsuite' merged-reports/junit-*.xml | grep -o 'tests="[0-9]*"' | cut -d'"' -f2 | awk '{sum+=$1} END {print sum}')
            total_failures=$(grep -h 'testsuite' merged-reports/junit-*.xml | grep -o 'failures="[0-9]*"' | cut -d'"' -f2 | awk '{sum+=$1} END {print sum}')
            total_errors=$(grep -h 'testsuite' merged-reports/junit-*.xml | grep -o 'errors="[0-9]*"' | cut -d'"' -f2 | awk '{sum+=$1} END {print sum}')
            
            echo "- **Total tests**: ${total_tests:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- **Failures**: ${total_failures:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- **Errors**: ${total_errors:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- **Success rate**: $(( 100 * (total_tests - total_failures - total_errors) / total_tests ))%" >> $GITHUB_STEP_SUMMARY
          fi

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: |
          if npm audit --audit-level high --json > audit.json; then
            echo "No high-severity vulnerabilities found"
          else
            echo "High-severity vulnerabilities detected:"
            cat audit.json
            exit 1
          fi

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
