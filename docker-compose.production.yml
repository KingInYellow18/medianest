version: '3.8'

networks:
  medianest_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  app_logs:
    driver: local
  ssl_certs:
    driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medianest_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - '127.0.0.1:5432:5432'
    networks:
      medianest_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medianest_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --stop-writes-on-bgsave-error yes
      --tcp-keepalive 300
      --tcp-backlog 511
    volumes:
      - redis_data:/data
    ports:
      - '127.0.0.1:6379:6379'
    networks:
      medianest_network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # MediaNest Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: medianest_app_prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      REDIS_HOST: redis
    volumes:
      - app_logs:/app/logs
      - ./uploads:/app/uploads:ro
      - ./config/production:/app/config/production:ro
    ports:
      - '127.0.0.1:3000:3000'
    networks:
      medianest_network:
        ipv4_address: 172.20.0.12
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 2
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medianest_nginx_prod
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./config/production/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/production/nginx.conf.template:/etc/nginx/conf.d/default.conf:ro
      - nginx_cache:/var/cache/nginx
      - ssl_certs:/etc/ssl/certs:ro
      - ssl_certs:/etc/ssl/private:ro
      - /var/www/certbot:/var/www/certbot:ro
    networks:
      medianest_network:
        ipv4_address: 172.20.0.13
    depends_on:
      - app
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Let's Encrypt SSL Certificate Management
  certbot:
    image: certbot/certbot:latest
    container_name: medianest_certbot_prod
    volumes:
      - ssl_certs:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@yourdomain.com --agree-tos --no-eff-email -d medianest.yourdomain.com -d www.medianest.yourdomain.com
    depends_on:
      - nginx
    profiles:
      - ssl-init

  # Log Aggregation and Monitoring
  promtail:
    image: grafana/promtail:latest
    container_name: medianest_promtail_prod
    restart: unless-stopped
    volumes:
      - app_logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
      - ./config/production/promtail.yml:/etc/promtail/config.yml:ro
    networks:
      medianest_network:
        ipv4_address: 172.20.0.14
    command: -config.file=/etc/promtail/config.yml
    profiles:
      - monitoring

  # Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: medianest_prometheus_prod
    restart: unless-stopped
    ports:
      - '127.0.0.1:9090:9090'
    volumes:
      - ./config/production/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      medianest_network:
        ipv4_address: 172.20.0.15
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Health Check Service
  healthcheck:
    image: alpine:latest
    container_name: medianest_healthcheck_prod
    restart: unless-stopped
    volumes:
      - ./scripts/healthcheck.sh:/healthcheck.sh:ro
    networks:
      medianest_network:
        ipv4_address: 172.20.0.16
    command: sh /healthcheck.sh
    depends_on:
      - app
      - postgres
      - redis
    profiles:
      - monitoring

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: medianest_backup_prod
    restart: 'no'
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      medianest_network:
        ipv4_address: 172.20.0.17
    command: sh /backup.sh
    depends_on:
      - postgres
    profiles:
      - backup

  # Watchtower for Automatic Updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: medianest_watchtower_prod
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_POLL_INTERVAL: 86400
      WATCHTOWER_NOTIFICATIONS: email
      WATCHTOWER_NOTIFICATION_EMAIL_FROM: ${SMTP_FROM}
      WATCHTOWER_NOTIFICATION_EMAIL_TO: admin@yourdomain.com
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER: ${SMTP_HOST}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT: ${SMTP_PORT}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER: ${SMTP_USER}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD: ${SMTP_PASS}
    profiles:
      - auto-update

  # Security Scanner
  trivy:
    image: aquasec/trivy:latest
    container_name: medianest_security_scan
    restart: 'no'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./security-reports:/reports
    command: image --format json --output /reports/scan-results.json medianest_app_prod
    profiles:
      - security-scan

# Production-specific compose override for scaling
x-app-common: &app-common
  build:
    context: .
    dockerfile: Dockerfile.production
  env_file:
    - .env
  environment:
    NODE_ENV: production
    DB_HOST: postgres
    REDIS_HOST: redis
  networks:
    - medianest_network
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  healthcheck:
    test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
    interval: 30s
    timeout: 10s
    retries: 5
    start_period: 60s
  deploy:
    resources:
      limits:
        memory: 2G
        cpus: '1.0'
      reservations:
        memory: 1G
        cpus: '0.5'
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m
