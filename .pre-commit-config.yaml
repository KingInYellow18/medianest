# MediaNest Pre-commit Configuration
# Automated hooks for documentation quality and code standards
# See https://pre-commit.com for more information

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: debug-statements
      - id: detect-private-key

  # Markdown linting and formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--config, .markdownlint.json, --fix]
        files: \.(md|markdown)$
        exclude: ^(CHANGELOG|node_modules|\.git)

  # Documentation link checking
  - repo: https://github.com/tcort/markdown-link-check
    rev: v3.11.2
    hooks:
      - id: markdown-link-check
        args: [--config, .markdown-link-check.json]
        files: \.(md|markdown)$
        exclude: ^(node_modules|\.git|backend/tests|tests/)

  # MkDocs validation
  - repo: local
    hooks:
      - id: mkdocs-build-test
        name: MkDocs Build Test
        entry: mkdocs
        args: [build, --strict, --site-dir, /tmp/mkdocs-test-build]
        language: system
        files: ^(docs/|mkdocs\.yml)
        pass_filenames: false

  # Mermaid diagram validation
  - repo: local
    hooks:
      - id: mermaid-validation
        name: Mermaid Diagram Validation
        entry: bash
        args:
          - -c
          - |
            # Check if mermaid-cli is installed
            if ! command -v mmdc >/dev/null 2>&1; then
              echo "Warning: mermaid-cli not installed. Install with: npm install -g @mermaid-js/mermaid-cli"
              exit 0
            fi
            
            # Find files with mermaid diagrams
            files_with_mermaid=$(grep -l "```mermaid" "$@" 2>/dev/null || true)
            
            if [ -n "$files_with_mermaid" ]; then
              echo "Validating Mermaid diagrams..."
              temp_dir=$(mktemp -d)
              
              for file in $files_with_mermaid; do
                echo "Checking $file..."
                # Extract mermaid diagrams and validate
                awk '/```mermaid/,/```/' "$file" | grep -v "^```" > "$temp_dir/diagram.mmd" 2>/dev/null || continue
                
                if [ -s "$temp_dir/diagram.mmd" ]; then
                  if ! mmdc -i "$temp_dir/diagram.mmd" -o "$temp_dir/test.svg" >/dev/null 2>&1; then
                    echo "Error: Invalid Mermaid diagram in $file"
                    rm -rf "$temp_dir"
                    exit 1
                  fi
                fi
              done
              
              rm -rf "$temp_dir"
              echo "All Mermaid diagrams are valid!"
            fi
        language: system
        files: \.(md|markdown)$
        pass_filenames: true

  # Custom documentation quality check
  - repo: local
    hooks:
      - id: docs-quality-check
        name: Documentation Quality Check
        entry: scripts/docs-quality-check.sh
        language: system
        files: ^(docs/|mkdocs\.yml|scripts/docs-quality-check\.sh)
        pass_filenames: false
        stages: [manual]  # Only run manually or in CI

  # JavaScript/TypeScript linting (for documentation scripts)
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: \.(js|ts|jsx|tsx)$
        args: [--fix, --max-warnings=0]
        additional_dependencies:
          - eslint@8.56.0
          - '@typescript-eslint/parser@6.0.0'
          - '@typescript-eslint/eslint-plugin@6.0.0'

  # Python code formatting (for doc generation scripts)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        files: \.py$
        args: [--line-length=88]

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        files: \.py$
        args: [--profile=black, --line-length=88]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        files: \.(sh|bash)$
        args: [-x, --severity=warning]

  # Docker file linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        files: Dockerfile.*

  # Security scanning
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: ^(package-lock\.json|\.git/)

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: \.(yml|yaml)$
        args: [--write, --tab-width=2]

  # JSON formatting
  - repo: local
    hooks:
      - id: json-format
        name: Format JSON files
        entry: python3
        args:
          - -c
          - |
            import json
            import sys
            for filename in sys.argv[1:]:
                try:
                    with open(filename, 'r') as f:
                        data = json.load(f)
                    with open(filename, 'w') as f:
                        json.dump(data, f, indent=2, sort_keys=True, ensure_ascii=False)
                        f.write('\n')
                    print(f"Formatted {filename}")
                except Exception as e:
                    print(f"Error formatting {filename}: {e}")
                    sys.exit(1)
        language: system
        files: \.json$
        exclude: ^(node_modules|\.git|package-lock\.json)

  # Dockerfile best practices
  - repo: local
    hooks:
      - id: dockerfile-best-practices
        name: Dockerfile Best Practices Check
        entry: bash
        args:
          - -c
          - |
            for dockerfile in "$@"; do
              echo "Checking $dockerfile for best practices..."
              
              # Check for non-root user
              if ! grep -q "USER " "$dockerfile"; then
                echo "Warning: $dockerfile should specify a non-root USER"
              fi
              
              # Check for health check
              if ! grep -q "HEALTHCHECK" "$dockerfile"; then
                echo "Info: Consider adding HEALTHCHECK instruction to $dockerfile"
              fi
              
              # Check for multi-stage build optimization
              if grep -q "FROM.*AS.*" "$dockerfile"; then
                echo "Good: $dockerfile uses multi-stage build"
              fi
              
              # Check for .dockerignore reference
              dockerfile_dir=$(dirname "$dockerfile")
              if [ ! -f "$dockerfile_dir/.dockerignore" ]; then
                echo "Info: Consider adding .dockerignore file in $dockerfile_dir"
              fi
            done
        language: system
        files: Dockerfile.*
        pass_filenames: true

# Global configuration
default_language_version:
  python: python3.11
  node: '18.19.0'

# Hook execution settings
default_stages: [commit]
minimum_pre_commit_version: "3.0.0"

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: 'develop'
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [mkdocs-build-test, docs-quality-check]  # Skip heavy checks in CI
  submodules: false

# Custom hook configurations can be added here
exclude: |
  (?x)^(
    \.git/|
    \.github/workflows/.*\.yml|
    node_modules/|
    \.venv/|
    venv/|
    __pycache__/|
    \.pytest_cache/|
    \.coverage|
    build/|
    dist/|
    \.next/|
    coverage/|
    \.nyc_output/|
    docs/gen_ref_pages\.py|  # Auto-generated files
    docs/reference/|         # Auto-generated docs
    CHANGELOG\.md|
    .*\.log|
    .*\.tmp
  )