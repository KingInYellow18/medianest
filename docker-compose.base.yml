# ==============================================================================
# üê≥ MEDIANEST BASE DOCKER COMPOSE CONFIGURATION
# ==============================================================================
# Base configuration shared across all environments
# Use with environment-specific overrides: -f docker-compose.base.yml -f docker-compose.dev.yml
# ==============================================================================

version: '3.8'

x-common-variables: &common-variables
  DATABASE_URL: postgresql://medianest:${POSTGRES_PASSWORD:-medianest_password}@postgres:5432/${POSTGRES_DB:-medianest}?connection_limit=20&pool_timeout=30
  REDIS_URL: redis://redis:6379
  NODE_ENV: ${NODE_ENV:-production}
  
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  start_period: 30s
  retries: 3

x-logging-defaults: &logging-defaults
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # ==============================================================================
  # üóÑÔ∏è DATABASE SERVICES
  # ==============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: medianest-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medianest}
      POSTGRES_USER: ${POSTGRES_USER:-medianest}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medianest_password}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-medianest} -d ${POSTGRES_DB:-medianest}']
      <<: *healthcheck-defaults
    logging: *logging-defaults
    networks:
      - database-network
    security_opt:
      - no-new-privileges:true

  # ==============================================================================
  # üìä CACHE SERVICES  
  # ==============================================================================
  redis:
    image: redis:7-alpine
    container_name: medianest-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory ${REDIS_MAXMEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --tcp-keepalive 60
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      <<: *healthcheck-defaults
    logging: *logging-defaults
    networks:
      - cache-network
    security_opt:
      - no-new-privileges:true

  # ==============================================================================
  # üîÑ APPLICATION SERVICES (Base Configuration)
  # ==============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-backend-production}
      args:
        NODE_ENV: ${NODE_ENV:-production}
        BUILD_TARGET: ${BUILD_TARGET:-backend-production}
        SECURITY_LEVEL: ${SECURITY_LEVEL:-standard}
        OPTIMIZATION_LEVEL: ${OPTIMIZATION_LEVEL:-size}
        ENABLE_MONITORING: ${ENABLE_MONITORING:-false}
        ENABLE_DEBUG: ${ENABLE_DEBUG:-false}
        ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-false}
        USER_ID: ${USER_ID:-1001}
        GROUP_ID: ${GROUP_ID:-1001}
      cache_from:
        - medianest:cache
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: medianest-app
    restart: unless-stopped
    environment:
      <<: *common-variables
      PORT: ${APP_PORT:-4000}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      PLEX_CLIENT_ID: ${PLEX_CLIENT_ID}
      PLEX_CLIENT_SECRET: ${PLEX_CLIENT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${APP_PORT:-4000}:${APP_PORT:-4000}"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_temp:/app/temp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${APP_PORT:-4000}/api/health']
      <<: *healthcheck-defaults
    logging: *logging-defaults
    networks:
      - app-network
      - database-network
      - cache-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "${USER_ID:-1001}:${GROUP_ID:-1001}"

# ==============================================================================
# üì¶ VOLUMES
# ==============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ${DATA_PATH:-./data}/redis
  
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/uploads
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs
  
  app_temp:
    driver: local

# ==============================================================================
# üåê NETWORKS
# ==============================================================================
networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: medianest-app
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  database-network:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: medianest-db
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  cache-network:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: medianest-cache
    ipam:
      config:
        - subnet: 172.22.0.0/16

# ==============================================================================
# üîí SECRETS (for Docker Swarm)
# ==============================================================================
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  encryption_key:
    external: true

# ==============================================================================
# ‚öôÔ∏è CONFIGURATIONS
# ==============================================================================
configs:
  nginx_config:
    file: ./infrastructure/nginx/nginx.conf
  redis_config:
    file: ./infrastructure/redis/redis.conf
  postgres_init:
    file: ./infrastructure/database/init.sql