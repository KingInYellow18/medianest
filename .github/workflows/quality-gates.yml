name: Quality Gates and Multi-Package Testing

on:
  push:
    branches: [ main, development, test ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  NPM_VERSION: '10.x'

jobs:
  setup-matrix:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set matrix for workspaces
        id: set-matrix
        run: |
          matrix='{"workspace": ["shared", "backend", "frontend"], "include": [
            {"workspace": "shared", "build_cmd": "build", "test_cmd": "test:run", "lint_cmd": "lint"},
            {"workspace": "backend", "build_cmd": "build", "test_cmd": "test", "lint_cmd": "lint:fix"},
            {"workspace": "frontend", "build_cmd": "build", "test_cmd": "test", "lint_cmd": "lint"}
          ]}'
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  lint-and-typecheck:
    name: Lint and TypeCheck
    runs-on: ubuntu-latest
    needs: setup-matrix
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package first
        if: matrix.workspace != 'shared'
        run: npm run build:shared

      - name: Run linting for ${{ matrix.workspace }}
        run: |
          if npm run ${{ matrix.lint_cmd }} --workspace=${{ matrix.workspace }} --if-present; then
            echo "✅ Linting passed for ${{ matrix.workspace }}"
          else
            echo "❌ Linting failed for ${{ matrix.workspace }}"
            exit 1
          fi

      - name: Run type checking for ${{ matrix.workspace }}
        run: |
          if npm run typecheck --workspace=${{ matrix.workspace }} --if-present; then
            echo "✅ Type checking passed for ${{ matrix.workspace }}"
          else
            echo "❌ Type checking failed for ${{ matrix.workspace }}"
            exit 1
          fi

  test-workspaces:
    name: Test Workspaces
    runs-on: ubuntu-latest
    needs: [setup-matrix, lint-and-typecheck]
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package first
        if: matrix.workspace != 'shared'
        run: npm run build:shared

      - name: Build ${{ matrix.workspace }}
        run: |
          if npm run ${{ matrix.build_cmd }} --workspace=${{ matrix.workspace }}; then
            echo "✅ Build successful for ${{ matrix.workspace }}"
          else
            echo "❌ Build failed for ${{ matrix.workspace }}"
            exit 1
          fi

      - name: Run tests for ${{ matrix.workspace }}
        run: |
          if npm run ${{ matrix.test_cmd }} --workspace=${{ matrix.workspace }} --if-present; then
            echo "✅ Tests passed for ${{ matrix.workspace }}"
          else
            echo "❌ Tests failed for ${{ matrix.workspace }}"
            exit 1
          fi

      - name: Generate test coverage for ${{ matrix.workspace }}
        run: |
          if npm run test:coverage --workspace=${{ matrix.workspace }} --if-present; then
            echo "✅ Coverage generated for ${{ matrix.workspace }}"
          else
            echo "⚠️ No coverage script available for ${{ matrix.workspace }}"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.workspace }}
          path: |
            ${{ matrix.workspace }}/coverage/
            ${{ matrix.workspace }}/dist/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-workspaces
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 3

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: medianest_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U test -d medianest_test" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build

      - name: Setup test database
        run: |
          # Wait for services to be ready
          sleep 10
          
          # Run database migrations if they exist
          if npm run db:migrate --workspace=backend --if-present; then
            echo "✅ Database migrations completed"
          else
            echo "⚠️ No database migrations found"
          fi

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/medianest_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: |
          # Run integration tests if they exist
          if npm run test:integration --workspace=backend --if-present; then
            echo "✅ Integration tests passed"
          else
            echo "⚠️ No integration tests found"
          fi

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test-workspaces, integration-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build

      - name: Package application
        run: |
          # Create application package
          mkdir -p dist/app
          
          # Copy built packages
          cp -r backend/dist dist/app/backend || echo "No backend dist found"
          cp -r frontend/.next dist/app/frontend || echo "No frontend .next found"
          cp -r frontend/public dist/app/frontend/public || echo "No frontend public found"
          cp -r shared/dist dist/app/shared || echo "No shared dist found"
          
          # Copy configuration files
          cp package.json dist/app/
          cp docker-compose.yml dist/app/ || echo "No docker-compose.yml found"
          cp Dockerfile dist/app/ || echo "No Dockerfile found"
          
          # Create archive
          tar -czf medianest-build.tar.gz -C dist/app .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: medianest-build
          path: medianest-build.tar.gz
          retention-days: 30

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: medianest:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start the container
          docker run -d --name medianest-test -p 3000:3000 -p 8000:8000 medianest:test
          
          # Wait for the application to start
          sleep 30
          
          # Test if the application is responding
          if curl -f http://localhost:3000 || curl -f http://localhost:8000; then
            echo "✅ Docker container is responding"
          else
            echo "❌ Docker container is not responding"
            docker logs medianest-test
            exit 1
          fi
          
          # Clean up
          docker stop medianest-test
          docker rm medianest-test

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup-matrix
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit for ${{ matrix.workspace }}
        run: |
          if npm audit --workspace=${{ matrix.workspace }} --audit-level=high; then
            echo "✅ No high-severity vulnerabilities in ${{ matrix.workspace }}"
          else
            echo "❌ High-severity vulnerabilities found in ${{ matrix.workspace }}"
            npm audit --workspace=${{ matrix.workspace }} --json > audit-${{ matrix.workspace }}.json
            exit 1
          fi

      - name: Upload security reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ matrix.workspace }}
          path: audit-${{ matrix.workspace }}.json

  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-workspaces, integration-tests, build-and-package, docker-build, security-scan]
    if: always()
    steps:
      - name: Generate quality gate summary
        run: |
          echo "## Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lint and TypeCheck
          if [ "${{ needs.lint-and-typecheck.result }}" = "success" ]; then
            echo "✅ **Lint & TypeCheck**: All workspaces passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Lint & TypeCheck**: Some workspaces failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Unit Tests
          if [ "${{ needs.test-workspaces.result }}" = "success" ]; then
            echo "✅ **Unit Tests**: All workspaces passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Unit Tests**: Some workspaces failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Integration Tests
          if [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build and Package
          if [ "${{ needs.build-and-package.result }}" = "success" ]; then
            echo "✅ **Build & Package**: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Package**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Docker Build
          if [ "${{ needs.docker-build.result }}" = "success" ]; then
            echo "✅ **Docker Build**: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security Scan
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "✅ **Security Scan**: No high-severity issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan**: High-severity issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.lint-and-typecheck.result }}" = "success" ] && \
             [ "${{ needs.test-workspaces.result }}" = "success" ] && \
             [ "${{ needs.integration-tests.result }}" = "success" ] && \
             [ "${{ needs.build-and-package.result }}" = "success" ] && \
             [ "${{ needs.docker-build.result }}" = "success" ] && \
             [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "🎉 **Overall Status**: ALL QUALITY GATES PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚫 **Overall Status**: QUALITY GATES FAILED" >> $GITHUB_STEP_SUMMARY
          fi