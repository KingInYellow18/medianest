name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  deployments: write
  checks: write
  pull-requests: write

jobs:
  setup:
    name: Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'shared/**'
              - 'package.json'
            frontend:
              - 'frontend/**'
              - 'shared/**'
              - 'package.json'
      
      - name: Determine deployment
        id: deploy-check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.backend-changed == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: medianest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
      
      - name: Install dependencies
        run: |
          npm ci
          if [ -f backend/package.json ]; then
            cd backend && npm ci
          fi
      
      - name: Setup test environment
        run: |
          cp backend/.env.example backend/.env.test || echo "No .env.example found"
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/medianest_test" >> backend/.env.test
          echo "REDIS_URL=redis://localhost:6379" >> backend/.env.test
      
      - name: Run database migrations
        run: |
          if [ -f backend/package.json ]; then
            cd backend
            npm run db:migrate:test || npm run prisma:migrate:deploy || echo "No migration script found"
          fi
      
      - name: Run backend linting
        run: |
          if [ -f backend/package.json ]; then
            cd backend && npm run lint
          fi
      
      - name: Run backend type checking
        run: |
          if [ -f backend/package.json ]; then
            cd backend && (npm run typecheck || npm run type-check)
          fi
      
      - name: Run backend tests
        run: |
          if [ -f backend/package.json ]; then
            cd backend && npm test
          fi
        env:
          NODE_ENV: test
      
      - name: Generate backend coverage
        run: |
          if [ -f backend/package.json ]; then
            cd backend && npm run test:coverage || npm run coverage || echo "No coverage script"
          fi
      
      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./backend/coverage
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.frontend-changed == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          npm ci
          if [ -f frontend/package.json ]; then
            cd frontend && npm ci
          fi
      
      - name: Run frontend linting
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend && npm run lint
          fi
      
      - name: Run frontend type checking
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend && (npm run typecheck || npm run type-check)
          fi
      
      - name: Run frontend tests
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend && npm test
          fi
      
      - name: Generate frontend coverage
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend && npm run test:coverage || npm run coverage || echo "No coverage script"
          fi
      
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage
      
      - name: Build frontend
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend && npm run build
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: needs.setup.outputs.should-deploy == 'true'
        with:
          name: frontend-build
          path: |
            frontend/dist/
            frontend/.next/
            frontend/build/
          retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Audit npm dependencies
        run: |
          if [ -f package.json ]; then
            npm audit --audit-level=moderate || true
          fi
          
          if [ -f backend/package.json ]; then
            cd backend && npm audit --audit-level=moderate || true && cd ..
          fi
          
          if [ -f frontend/package.json ]; then
            cd frontend && npm audit --audit-level=moderate || true && cd ..
          fi

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [setup, test-backend, test-frontend]
    if: |
      always() && 
      needs.setup.outputs.should-deploy == 'true' &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')
    
    strategy:
      matrix:
        component: [backend, frontend]
        include:
          - component: backend
            dockerfile: ./backend/Dockerfile
            context: .
            changed: ${{ needs.setup.outputs.backend-changed }}
          - component: frontend
            dockerfile: ./frontend/Dockerfile
            context: .
            changed: ${{ needs.setup.outputs.frontend-changed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check if component changed
        id: should-build
        run: |
          if [[ "${{ matrix.changed }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
          else
            echo "build=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Docker Buildx
        if: steps.should-build.outputs.build == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        if: steps.should-build.outputs.build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        if: steps.should-build.outputs.build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        if: steps.should-build.outputs.build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup, build-images]
    if: |
      always() &&
      needs.setup.outputs.should-deploy == 'true' &&
      (needs.build-images.result == 'success' || needs.build-images.result == 'skipped') &&
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging')
    
    environment:
      name: staging
      url: https://staging.medianest.example.com
    
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d
          echo "✅ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, build-images, deploy-staging]
    if: |
      always() &&
      needs.setup.outputs.should-deploy == 'true' &&
      (needs.build-images.result == 'success' || needs.build-images.result == 'skipped') &&
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: https://medianest.example.com
    
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f docker-compose.production.yml up -d
          echo "✅ Production deployment completed"
      
      - name: Create release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from main branch
            
            ## Changes in this release
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Prepare notification
        id: notification
        run: |
          status="success"
          if [[ "${{ needs.test-backend.result }}" == "failure" || "${{ needs.test-frontend.result }}" == "failure" ]]; then
            status="failure"
          fi
          
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "message=CI/CD Pipeline completed with status: $status" >> $GITHUB_OUTPUT
      
      - name: Send notification
        run: |
          echo "📢 ${{ steps.notification.outputs.message }}"
          # Add your notification logic here
          # Example: Slack, Discord, email, etc.