name: Production Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if checks fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: medianest/backend
  IMAGE_NAME_FRONTEND: medianest/frontend

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    outputs:
      scan-results: ${{ steps.scan.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        id: scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Fail on critical vulnerabilities
        if: steps.scan.outputs.exit-code != '0' && !inputs.force_deploy
        run: |
          echo "Critical vulnerabilities found. Deployment blocked."
          exit 1

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.component }}/package-lock.json'

      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci

      - name: Run linting
        run: |
          cd ${{ matrix.component }}
          npm run lint

      - name: Run type checking
        run: |
          cd ${{ matrix.component }}
          npm run type-check

      - name: Generate Prisma client (backend only)
        if: matrix.component == 'backend'
        run: |
          cd backend
          npx prisma generate

      - name: Run unit tests
        run: |
          cd ${{ matrix.component }}
          npm run test:coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          ENCRYPTION_KEY: test-encryption-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./${{ matrix.component }}/coverage/lcov.info
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage

  build:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped')
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.frontend-meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.frontend-meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.backend-meta.outputs.tags }}
          format: 'sarif'
          output: 'backend-trivy.sarif'

      - name: Upload backend container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-trivy.sarif'
          category: 'backend-container'

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: ${{ inputs.environment || 'production' }}
      url: https://medianest.yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          # Install docker-compose if not available
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          docker-compose version

      - name: Create deployment backup
        run: |
          BACKUP_DIR="backups/pre-deploy-$(date +%Y%m%d-%H%M%S)"
          mkdir -p $BACKUP_DIR
          
          # Backup current docker-compose configuration
          cp docker-compose.production.yml $BACKUP_DIR/ 2>/dev/null || true
          cp .env.production $BACKUP_DIR/ 2>/dev/null || true
          
          echo "Deployment backup created: $BACKUP_DIR"

      - name: Database backup
        run: |
          # Create database backup using Docker Compose
          docker-compose -f docker-compose.production.yml exec -T postgres pg_dump -U ${{ secrets.DB_USER }} ${{ secrets.DB_NAME }} > backups/pre-deploy-$(date +%Y%m%d-%H%M%S)/database.sql || echo "Database backup skipped (container not running)"

      - name: Update deployment configuration
        run: |
          # Update image tags in Docker Compose
          sed -i 's|medianest/backend:.*|${{ needs.build.outputs.backend-image }}|g' docker-compose.production.yml
          sed -i 's|medianest/frontend:.*|${{ needs.build.outputs.frontend-image }}|g' docker-compose.production.yml

      - name: Deploy with Docker Compose
        run: |
          # Deploy using Docker Compose
          echo "Starting Docker Compose deployment..."
          
          # Pull latest images
          docker-compose -f docker-compose.production.yml pull
          
          # Deploy with zero-downtime rolling update
          docker-compose -f docker-compose.production.yml up -d --force-recreate
          
          echo "Docker Compose deployment completed"

      - name: Wait for deployment
        run: |
          echo "Waiting for containers to be ready..."
          
          # Wait for services to be healthy
          for i in {1..30}; do
            if docker-compose -f docker-compose.production.yml ps | grep -q "Up"; then
              echo "Services are ready"
              break
            fi
            echo "Waiting for services... ($i/30)"
            sleep 10
          done

      - name: Run deployment verification
        run: |
          echo "Running deployment verification..."
          
          # Wait for health endpoints to be ready
          sleep 30
          
          # Test health endpoints
          echo "Testing backend health endpoint..."
          curl -f http://localhost:4000/api/health --max-time 30 || {
            echo "Backend health check failed"
            docker-compose -f docker-compose.production.yml logs backend
            exit 1
          }
          
          echo "Testing frontend health endpoint..."
          curl -f http://localhost:3000/api/health --max-time 30 || {
            echo "Frontend health check failed"
            docker-compose -f docker-compose.production.yml logs frontend
            exit 1
          }
          
          echo "All health checks passed"

      - name: Run smoke tests
        run: |
          # Basic smoke tests to ensure application is working
          chmod +x ./deployment/scripts/smoke-tests.sh
          ./deployment/scripts/smoke-tests.sh

      - name: Update deployment status
        if: success()
        run: |
          # Label containers with deployment metadata
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          docker-compose -f docker-compose.production.yml exec -T backend echo "Deployed by GitHub Actions at $TIMESTAMP" > /tmp/deployment-info || true
          docker-compose -f docker-compose.production.yml exec -T frontend echo "Deployed by GitHub Actions at $TIMESTAMP" > /tmp/deployment-info || true
          
          echo "Deployment status updated"

      - name: Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            MediaNest Production Deployment ${{ job.status }}
            Environment: ${{ inputs.environment || 'production' }}
            Backend Image: ${{ needs.build.outputs.backend-image }}
            Frontend Image: ${{ needs.build.outputs.frontend-image }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deploy-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring
        run: |
          # Ensure monitoring services are running
          docker-compose -f docker-compose.production.yml up -d prometheus grafana || echo "Monitoring services not configured in docker-compose"

      - name: Configure alerts
        run: |
          # Update alert rules for new deployment (placeholder)
          echo "Alert configuration would be updated here"

      - name: Run performance baseline
        run: |
          # Run performance tests to establish new baseline
          chmod +x ./deployment/scripts/performance-baseline.sh
          ./deployment/scripts/performance-baseline.sh

      - name: Schedule health check monitoring
        run: |
          # Set up continuous health monitoring (placeholder)
          echo "Health monitoring cron job would be configured here"
          echo "Monitoring endpoint: https://medianest.yourdomain.com/api/health"

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && !inputs.force_deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Compose rollback
        run: |
          echo "Performing Docker Compose rollback..."
          
          # Restore previous configuration from backup
          LATEST_BACKUP=$(ls -1 backups/ | grep pre-deploy | tail -1)
          if [ -n "$LATEST_BACKUP" ] && [ -d "backups/$LATEST_BACKUP" ]; then
            echo "Restoring from backup: $LATEST_BACKUP"
            cp "backups/$LATEST_BACKUP/docker-compose.production.yml" . 2>/dev/null || echo "No backup compose file found"
            cp "backups/$LATEST_BACKUP/.env.production" . 2>/dev/null || echo "No backup env file found"
          fi
          
          # Rollback to previous images
          docker-compose -f docker-compose.production.yml down
          docker-compose -f docker-compose.production.yml up -d
          
          echo "Rollback completed"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#deployments'
          text: |
            🚨 MediaNest Production Deployment FAILED - Automatic Rollback Initiated
            Environment: ${{ inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
