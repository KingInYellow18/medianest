name: Deployment Pipeline

on:
  push:
    branches: [ main, development, test ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - test
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: medianest

jobs:
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      registry_url: ${{ steps.env.outputs.registry_url }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            environment="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              "main")
                environment="production"
                ;;
              "development")
                environment="staging"
                ;;
              "test")
                environment="test"
                ;;
              *)
                environment="none"
                ;;
            esac
          fi
          
          echo "environment=$environment" >> $GITHUB_OUTPUT
          
          if [[ "$environment" != "none" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
          echo "registry_url=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          
          echo "Determined environment: $environment"
          echo "Should deploy: $([ "$environment" != "none" ] && echo "true" || echo "false")"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true'
    strategy:
      matrix:
        package: [backend, frontend, shared]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check if package exists
        id: check-package
        run: |
          if [[ -f "${{ matrix.package }}/package.json" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Package ${{ matrix.package }} found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Package ${{ matrix.package }} not found"
          fi

      - name: Install dependencies
        if: steps.check-package.outputs.exists == 'true'
        run: |
          cd ${{ matrix.package }}
          if [[ -f "package-lock.json" ]]; then
            npm ci
          else
            npm install
          fi

      - name: Run tests
        if: steps.check-package.outputs.exists == 'true'
        run: |
          cd ${{ matrix.package }}
          if jq -e '.scripts.test' package.json > /dev/null; then
            npm run test -- --coverage --passWithNoTests
          else
            echo "No test script found for ${{ matrix.package }}"
          fi

      - name: Build package
        if: steps.check-package.outputs.exists == 'true'
        run: |
          cd ${{ matrix.package }}
          if jq -e '.scripts.build' package.json > /dev/null; then
            npm run build
          else
            echo "No build script found for ${{ matrix.package }}"
          fi

      - name: Upload build artifacts
        if: steps.check-package.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.package }}
          path: |
            ${{ matrix.package }}/dist/
            ${{ matrix.package }}/build/
            ${{ matrix.package }}/.next/
          retention-days: 30

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.service }}
          path: ${{ matrix.service }}/

      - name: Check for Dockerfile
        id: check-dockerfile
        run: |
          if [[ -f "${{ matrix.service }}/Dockerfile" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Creating basic Dockerfile for ${{ matrix.service }}"
            
            case "${{ matrix.service }}" in
              "backend")
                cat > ${{ matrix.service }}/Dockerfile << 'EOF'
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY dist/ ./dist/
          EXPOSE 3000
          CMD ["node", "dist/index.js"]
          EOF
                ;;
              "frontend")
                cat > ${{ matrix.service }}/Dockerfile << 'EOF'
          FROM node:18-alpine AS builder
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci
          COPY . .
          RUN npm run build
          
          FROM node:18-alpine AS runner
          WORKDIR /app
          RUN npm ci --only=production
          COPY --from=builder /app/.next ./.next
          COPY --from=builder /app/public ./public
          COPY --from=builder /app/package.json ./package.json
          EXPOSE 3000
          CMD ["npm", "start"]
          EOF
                ;;
            esac
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.determine-environment.outputs.registry_url }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.determine-environment.outputs.environment }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [determine-environment, docker-build]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to environment
        id: deploy
        run: |
          environment="${{ needs.determine-environment.outputs.environment }}"
          echo "Deploying to $environment environment..."
          
          # Set environment-specific configurations
          case "$environment" in
            "production")
              url="https://production.medianest.com"
              replicas=3
              resources="high"
              ;;
            "staging")
              url="https://staging.medianest.com"
              replicas=2
              resources="medium"
              ;;
            "test")
              url="https://test.medianest.com"
              replicas=1
              resources="low"
              ;;
          esac
          
          echo "url=$url" >> $GITHUB_OUTPUT
          
          # Create deployment configuration
          mkdir -p deployment-config
          cat > deployment-config/deploy-$environment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: medianest-$environment
            labels:
              app: medianest
              environment: $environment
          spec:
            replicas: $replicas
            selector:
              matchLabels:
                app: medianest
                environment: $environment
            template:
              metadata:
                labels:
                  app: medianest
                  environment: $environment
              spec:
                containers:
                - name: backend
                  image: ${{ needs.determine-environment.outputs.registry_url }}-backend:$environment
                  ports:
                  - containerPort: 3000
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                - name: frontend
                  image: ${{ needs.determine-environment.outputs.registry_url }}-frontend:$environment
                  ports:
                  - containerPort: 3000
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
          EOF
          
          echo "✅ Deployment configuration created for $environment"
          echo "🌐 Application URL: $url"

      - name: Health check
        run: |
          echo "Performing health check for ${{ needs.determine-environment.outputs.environment }}..."
          
          # Simulate health check (replace with actual health check logic)
          sleep 5
          
          echo "✅ Health check passed"

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment verification..."
          
          # Create verification report
          cat > deployment-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ needs.determine-environment.outputs.environment }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "deployment_url": "${{ steps.deploy.outputs.url }}",
            "services": ["backend", "frontend"],
            "status": "success"
          }
          EOF
          
          echo "📊 Deployment report generated"

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ needs.determine-environment.outputs.environment }}
          path: deployment-report.json
          retention-days: 90

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully ✅" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Deployment to ${{ needs.determine-environment.outputs.environment }} failed ❌" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Build & Test:** ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Build:** ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Application is available at:** [Deploy URL](https://example.com)" >> $GITHUB_STEP_SUMMARY
          fi