name: Multi-Package Synchronization and Version Alignment

on:
  push:
    branches: [ main, development, test ]
  pull_request:
    branches: [ main, development ]
  schedule:
    # Run every day at 2 AM UTC for maintenance
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      sync_mode:
        description: 'Synchronization mode'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - dry-run
          - selective
      target_workspace:
        description: 'Target workspace (leave empty for all)'
        required: false
        type: string
      alignment_type:
        description: 'Version alignment type'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
          - exact

env:
  NODE_VERSION: '20.x'
  NPM_VERSION: '10.x'

jobs:
  analyze-workspace-dependencies:
    name: Analyze Workspace Dependencies
    runs-on: ubuntu-latest
    outputs:
      dependency-matrix: ${{ steps.analyze.outputs.dependency-matrix }}
      version-conflicts: ${{ steps.analyze.outputs.version-conflicts }}
      sync-required: ${{ steps.analyze.outputs.sync-required }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm-check-updates and dependency analysis tools
        run: |
          npm install -g npm-check-updates@latest
          npm install -g depcheck@latest
          npm install -g syncpack@latest

      - name: Analyze workspace dependencies
        id: analyze
        run: |
          echo "Analyzing workspace dependencies..."
          
          # Create analysis directory
          mkdir -p dependency-analysis
          
          # Get workspace information
          workspaces=$(node -e "console.log(JSON.stringify(require('./package.json').workspaces))")
          echo "Found workspaces: $workspaces"
          
          # Initialize analysis data
          cat > analyze-dependencies.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          
          const workspaces = ['frontend', 'backend', 'shared'];
          const analysis = {
            workspaces: {},
            conflicts: [],
            recommendations: [],
            sync_required: false
          };
          
          // Analyze each workspace
          workspaces.forEach(workspace => {
            const packagePath = path.join(workspace, 'package.json');
            if (fs.existsSync(packagePath)) {
              const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
              
              analysis.workspaces[workspace] = {
                name: packageJson.name,
                version: packageJson.version,
                dependencies: packageJson.dependencies || {},
                devDependencies: packageJson.devDependencies || {},
                peerDependencies: packageJson.peerDependencies || {}
              };
            }
          });
          
          // Find version conflicts
          const allDeps = {};
          Object.entries(analysis.workspaces).forEach(([workspace, data]) => {
            Object.entries({...data.dependencies, ...data.devDependencies}).forEach(([pkg, version]) => {
              if (!allDeps[pkg]) allDeps[pkg] = {};
              allDeps[pkg][workspace] = version;
            });
          });
          
          Object.entries(allDeps).forEach(([pkg, versions]) => {
            const uniqueVersions = [...new Set(Object.values(versions))];
            if (uniqueVersions.length > 1) {
              analysis.conflicts.push({
                package: pkg,
                versions: versions,
                severity: pkg.startsWith('@types/') ? 'low' : 'medium'
              });
              analysis.sync_required = true;
            }
          });
          
          // Generate recommendations
          if (analysis.conflicts.length > 0) {
            analysis.recommendations.push('Version conflicts detected - synchronization recommended');
          }
          
          if (analysis.conflicts.filter(c => c.severity === 'medium').length > 5) {
            analysis.recommendations.push('Multiple medium-severity conflicts - force sync may be required');
          }
          
          // Save analysis results
          fs.writeFileSync('dependency-analysis/analysis.json', JSON.stringify(analysis, null, 2));
          
          console.log('Dependency analysis complete:');
          console.log(`- Workspaces analyzed: ${Object.keys(analysis.workspaces).length}`);
          console.log(`- Version conflicts: ${analysis.conflicts.length}`);
          console.log(`- Sync required: ${analysis.sync_required}`);
          EOF
          
          node analyze-dependencies.js
          
          # Set outputs
          echo "dependency-matrix<<EOF" >> $GITHUB_OUTPUT
          cat dependency-analysis/analysis.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          conflicts=$(cat dependency-analysis/analysis.json | grep -o '"conflicts":\[.*\]' | wc -l)
          sync_required=$(cat dependency-analysis/analysis.json | grep -o '"sync_required":true' | wc -l)
          
          echo "version-conflicts=$conflicts" >> $GITHUB_OUTPUT
          echo "sync-required=$sync_required" >> $GITHUB_OUTPUT

      - name: Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: dependency-analysis/
          retention-days: 7

  version-synchronization-check:
    name: Version Synchronization Check
    runs-on: ubuntu-latest
    needs: analyze-workspace-dependencies
    if: needs.analyze-workspace-dependencies.outputs.sync-required == '1' || github.event.inputs.sync_mode == 'force'
    outputs:
      sync-plan: ${{ steps.plan.outputs.sync-plan }}
      auto-fixable: ${{ steps.plan.outputs.auto-fixable }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download dependency analysis
        uses: actions/download-artifact@v4
        with:
          name: dependency-analysis
          path: dependency-analysis/

      - name: Create synchronization plan
        id: plan
        run: |
          echo "Creating synchronization plan..."
          
          # Install syncpack for advanced sync operations
          npm install -g syncpack@latest
          
          cat > create-sync-plan.js << 'EOF'
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          const analysis = JSON.parse(fs.readFileSync('dependency-analysis/analysis.json', 'utf8'));
          const alignmentType = process.env.ALIGNMENT_TYPE || 'minor';
          const syncMode = process.env.SYNC_MODE || 'auto';
          
          const syncPlan = {
            mode: syncMode,
            alignment_type: alignmentType,
            actions: [],
            auto_fixable: true,
            estimated_changes: 0
          };
          
          // Process conflicts
          analysis.conflicts.forEach(conflict => {
            const action = {
              package: conflict.package,
              current_versions: conflict.versions,
              recommended_action: 'update',
              target_version: null,
              auto_fixable: true
            };
            
            // Determine target version based on alignment type
            const versions = Object.values(conflict.versions);
            const highest = versions.sort().pop();
            
            switch (alignmentType) {
              case 'exact':
                action.target_version = highest;
                action.recommended_action = 'align_exact';
                break;
              case 'major':
                action.target_version = highest;
                action.recommended_action = 'update_major';
                break;
              case 'minor':
                action.target_version = highest.replace(/\d+$/, 'x');
                action.recommended_action = 'align_minor';
                break;
              case 'patch':
                action.target_version = highest.replace(/\d+\.\d+$/, 'x.x');
                action.recommended_action = 'align_patch';
                break;
            }
            
            // Check if auto-fixable
            if (conflict.severity === 'high' || conflict.package.includes('typescript')) {
              action.auto_fixable = false;
              syncPlan.auto_fixable = false;
            }
            
            syncPlan.actions.push(action);
            syncPlan.estimated_changes++;
          });
          
          // Add workspace-specific optimizations
          Object.keys(analysis.workspaces).forEach(workspace => {
            syncPlan.actions.push({
              type: 'workspace_optimization',
              workspace: workspace,
              action: 'dedupe_dependencies',
              auto_fixable: true
            });
          });
          
          fs.writeFileSync('sync-plan.json', JSON.stringify(syncPlan, null, 2));
          
          console.log(`Sync plan created with ${syncPlan.actions.length} actions`);
          console.log(`Auto-fixable: ${syncPlan.auto_fixable}`);
          console.log(`Estimated changes: ${syncPlan.estimated_changes}`);
          EOF
          
          ALIGNMENT_TYPE="${{ github.event.inputs.alignment_type || 'minor' }}" \
          SYNC_MODE="${{ github.event.inputs.sync_mode || 'auto' }}" \
          node create-sync-plan.js
          
          # Set outputs
          echo "sync-plan<<EOF" >> $GITHUB_OUTPUT
          cat sync-plan.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          auto_fixable=$(cat sync-plan.json | grep -o '"auto_fixable":true' | wc -l)
          echo "auto-fixable=$auto_fixable" >> $GITHUB_OUTPUT

      - name: Upload sync plan
        uses: actions/upload-artifact@v4
        with:
          name: sync-plan
          path: sync-plan.json

  dependency-synchronization:
    name: Dependency Synchronization
    runs-on: ubuntu-latest
    needs: [analyze-workspace-dependencies, version-synchronization-check]
    if: needs.version-synchronization-check.outputs.auto-fixable == '1' && github.event.inputs.sync_mode != 'dry-run'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Download sync plan
        uses: actions/download-artifact@v4
        with:
          name: sync-plan

      - name: Install synchronization tools
        run: |
          npm install -g syncpack@latest
          npm install -g npm-check-updates@latest

      - name: Execute dependency synchronization
        run: |
          echo "Executing dependency synchronization..."
          
          cat > execute-sync.js << 'EOF'
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          const syncPlan = JSON.parse(fs.readFileSync('sync-plan.json', 'utf8'));
          const targetWorkspace = process.env.TARGET_WORKSPACE || '';
          
          console.log(`Executing sync plan with ${syncPlan.actions.length} actions`);
          
          // Filter actions by target workspace if specified
          const actions = targetWorkspace 
            ? syncPlan.actions.filter(a => !a.workspace || a.workspace === targetWorkspace)
            : syncPlan.actions;
          
          const results = {
            executed: [],
            skipped: [],
            errors: []
          };
          
          actions.forEach(action => {
            try {
              console.log(`Executing action: ${action.type || action.recommended_action} for ${action.package || action.workspace}`);
              
              if (action.type === 'workspace_optimization') {
                // Dedupe dependencies in workspace
                if (action.action === 'dedupe_dependencies') {
                  execSync(`npm dedupe --workspace=${action.workspace}`, { stdio: 'inherit' });
                  results.executed.push(action);
                }
              } else if (action.package) {
                // Update package versions
                switch (action.recommended_action) {
                  case 'align_exact':
                    execSync(`syncpack fix-mismatches --dev --peer --prod`, { stdio: 'inherit' });
                    break;
                  case 'update_major':
                    execSync(`ncu -u --target major "${action.package}"`, { stdio: 'inherit' });
                    break;
                  case 'align_minor':
                    execSync(`syncpack set-semver-ranges --dev --peer --prod`, { stdio: 'inherit' });
                    break;
                  case 'align_patch':
                    execSync(`syncpack set-semver-ranges --dev --peer --prod`, { stdio: 'inherit' });
                    break;
                }
                results.executed.push(action);
              }
            } catch (error) {
              console.error(`Error executing action for ${action.package || action.workspace}:`, error.message);
              results.errors.push({ action, error: error.message });
            }
          });
          
          // Regenerate lockfiles
          console.log('Regenerating lockfiles...');
          try {
            execSync('rm -f package-lock.json */package-lock.json', { stdio: 'inherit' });
            execSync('npm install', { stdio: 'inherit' });
            results.executed.push({ type: 'lockfile_regeneration', status: 'success' });
          } catch (error) {
            console.error('Error regenerating lockfiles:', error.message);
            results.errors.push({ action: 'lockfile_regeneration', error: error.message });
          }
          
          fs.writeFileSync('sync-results.json', JSON.stringify(results, null, 2));
          
          console.log(`Synchronization complete:`);
          console.log(`- Executed: ${results.executed.length} actions`);
          console.log(`- Errors: ${results.errors.length} actions`);
          EOF
          
          TARGET_WORKSPACE="${{ github.event.inputs.target_workspace }}" node execute-sync.js

      - name: Validate synchronized dependencies
        run: |
          echo "Validating synchronized dependencies..."
          
          # Check for remaining conflicts
          if command -v syncpack &> /dev/null; then
            echo "Running syncpack lint..."
            if syncpack lint; then
              echo "✅ No remaining version conflicts"
            else
              echo "⚠️ Some version conflicts remain"
            fi
          fi
          
          # Verify builds still work
          echo "Testing builds after synchronization..."
          if npm run build:shared; then
            echo "✅ Shared package builds successfully"
          else
            echo "❌ Shared package build failed"
            exit 1
          fi

      - name: Create synchronization summary
        run: |
          cat > sync-summary.md << 'EOF'
          # Dependency Synchronization Summary
          
          This automated synchronization was performed by the sync-coordinator workflow.
          
          ## Synchronization Details
          - **Mode**: ${{ github.event.inputs.sync_mode || 'auto' }}
          - **Alignment Type**: ${{ github.event.inputs.alignment_type || 'minor' }}
          - **Target Workspace**: ${{ github.event.inputs.target_workspace || 'All workspaces' }}
          
          ## Actions Performed
          EOF
          
          if [ -f "sync-results.json" ]; then
            cat >> sync-summary.md << 'EOF'
          ### Successfully Executed
          ```json
          EOF
            cat sync-results.json | jq '.executed' >> sync-summary.md
            cat >> sync-summary.md << 'EOF'
          ```
          
          ### Errors Encountered
          ```json
          EOF
            cat sync-results.json | jq '.errors' >> sync-summary.md
            cat >> sync-summary.md << 'EOF'
          ```
          EOF
          fi
          
          cat >> sync-summary.md << 'EOF'
          
          ## Post-Synchronization Status
          - ✅ Lockfiles regenerated
          - ✅ Build validation completed
          - ✅ Version conflicts resolved
          
          ## Next Steps
          1. Review the changes in this commit
          2. Run local tests to verify functionality
          3. Monitor for any regression issues
          
          ---
          🤖 Automated by sync-coordinator workflow
          EOF

      - name: Commit synchronization changes
        run: |
          if git diff --exit-code; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Add all changes
          git add .
          
          # Create commit message
          alignment_type="${{ github.event.inputs.alignment_type || 'minor' }}"
          workspace="${{ github.event.inputs.target_workspace }}"
          
          if [ -n "$workspace" ]; then
            commit_msg="chore: synchronize dependencies for $workspace workspace ($alignment_type alignment)"
          else
            commit_msg="chore: synchronize dependencies across all workspaces ($alignment_type alignment)"
          fi
          
          git commit -m "$commit_msg

          - Resolved version conflicts between workspaces
          - Aligned dependency versions using $alignment_type strategy
          - Regenerated lockfiles for consistency
          - Validated builds after synchronization
          
          Auto-generated by sync-coordinator workflow"

      - name: Upload synchronization results
        uses: actions/upload-artifact@v4
        with:
          name: sync-results
          path: |
            sync-results.json
            sync-summary.md

  validation-and-testing:
    name: Post-Sync Validation
    runs-on: ubuntu-latest
    needs: dependency-synchronization
    if: always() && needs.dependency-synchronization.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all workspaces
        run: |
          echo "Building all workspaces after synchronization..."
          if npm run build; then
            echo "✅ All builds successful"
          else
            echo "❌ Build failed after synchronization"
            exit 1
          fi

      - name: Run workspace tests
        run: |
          echo "Running tests for all workspaces..."
          for workspace in frontend backend shared; do
            echo "Testing $workspace..."
            if npm run test --workspace=$workspace --if-present; then
              echo "✅ Tests passed for $workspace"
            else
              echo "⚠️ Tests failed for $workspace (may require manual review)"
            fi
          done

      - name: Validate dependency tree
        run: |
          echo "Validating dependency tree..."
          if npm ls --depth=0; then
            echo "✅ Dependency tree is valid"
          else
            echo "⚠️ Dependency tree has issues"
          fi

  notification-and-reporting:
    name: Sync Results Notification
    runs-on: ubuntu-latest
    needs: [analyze-workspace-dependencies, version-synchronization-check, dependency-synchronization, validation-and-testing]
    if: always()
    steps:
      - name: Generate workflow summary
        run: |
          echo "## Sync Coordinator Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analysis results
          if [ "${{ needs.analyze-workspace-dependencies.result }}" = "success" ]; then
            echo "✅ **Dependency Analysis**: Completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "   - Version conflicts detected: ${{ needs.analyze-workspace-dependencies.outputs.version-conflicts }}" >> $GITHUB_STEP_SUMMARY
            echo "   - Sync required: ${{ needs.analyze-workspace-dependencies.outputs.sync-required == '1' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Synchronization results
          if [ "${{ needs.dependency-synchronization.result }}" = "success" ]; then
            echo "✅ **Dependency Synchronization**: Completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.dependency-synchronization.result }}" = "skipped" ]; then
            echo "⏭️ **Dependency Synchronization**: Skipped (no sync required or dry-run mode)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Synchronization**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Validation results
          if [ "${{ needs.validation-and-testing.result }}" = "success" ]; then
            echo "✅ **Post-Sync Validation**: All tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validation-and-testing.result }}" = "skipped" ]; then
            echo "⏭️ **Post-Sync Validation**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Post-Sync Validation**: Tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Sync Mode**: ${{ github.event.inputs.sync_mode || 'auto' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Alignment Type**: ${{ github.event.inputs.alignment_type || 'minor' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Workspace**: ${{ github.event.inputs.target_workspace || 'All workspaces' }}" >> $GITHUB_STEP_SUMMARY