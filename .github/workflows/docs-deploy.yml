name: 📚 Documentation Deployment

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs-deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deploy to environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Build documentation with caching
  build:
    name: 🔨 Build Documentation
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      site-changed: ${{ steps.check-changes.outputs.changed }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔑 Generate cache key
        id: cache-key
        run: |
          DOCS_HASH=$(find docs -type f -name "*.md" -o -name "*.yml" -o -name "*.yaml" | sort | xargs cat | sha256sum | cut -d' ' -f1)
          MKDOCS_HASH=$(sha256sum mkdocs.yml | cut -d' ' -f1)
          REQUIREMENTS_HASH=$(sha256sum requirements.txt | cut -d' ' -f1 2>/dev/null || echo "no-requirements")
          CACHE_KEY="docs-build-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${DOCS_HASH:0:8}-${MKDOCS_HASH:0:8}-${REQUIREMENTS_HASH:0:8}"
          echo "key=${CACHE_KEY}" >> $GITHUB_OUTPUT

      - name: 💾 Cache MkDocs build
        uses: actions/cache@v3
        with:
          path: |
            site/
            ~/.cache/pip
            ~/.cache/mkdocs
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            docs-build-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: 🔍 Check for documentation changes
        id: check-changes
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Force rebuild requested"
          elif git diff --quiet HEAD~1 HEAD -- docs/ mkdocs.yml; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No documentation changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Documentation changes detected"
          fi

      - name: 📋 Install Python dependencies
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install mkdocs-material mkdocs-awesome-pages-plugin mkdocs-mermaid2-plugin

      - name: 📋 Install Node.js dependencies
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          npm ci

      - name: 🏗️ Build documentation
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          mkdocs build --strict --verbose
          
      - name: 📊 Generate build info
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          cat > site/build-info.json << EOF
          {
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "commit_ref": "${{ github.ref }}",
            "build_number": "${{ github.run_number }}",
            "actor": "${{ github.actor }}",
            "environment": "${{ github.event.inputs.deploy_environment || 'production' }}"
          }
          EOF

      - name: 📦 Upload documentation artifact
        if: steps.check-changes.outputs.changed == 'true'
        uses: actions/upload-pages-artifact@v2
        with:
          path: site/

      - name: 📦 Upload build artifact
        if: steps.check-changes.outputs.changed == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: documentation-site
          path: site/
          retention-days: 30

  # Deploy to GitHub Pages
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.site-changed == 'true'
    
    permissions:
      pages: write
      id-token: write
      contents: read

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: ⚙️ Configure Pages
        uses: actions/configure-pages@v3

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: 📝 Update deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'github-pages',
              description: 'Documentation deployment',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              environment_url: '${{ steps.deployment.outputs.page_url }}',
              description: 'Documentation successfully deployed'
            });

  # Update status badges
  update-badges:
    name: 📊 Update Status Badges
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always() && needs.build.outputs.site-changed == 'true'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Create deployment badge
        run: |
          BADGE_COLOR="green"
          BADGE_MESSAGE="deployed"
          
          if [[ "${{ needs.deploy.result }}" != "success" ]]; then
            BADGE_COLOR="red"
            BADGE_MESSAGE="failed"
          fi
          
          curl -s "https://img.shields.io/badge/docs-${BADGE_MESSAGE}-${BADGE_COLOR}" > docs-deployment-badge.svg

      - name: 📊 Update README badges (if exists)
        run: |
          if [ -f README.md ]; then
            # Update deployment status badge
            BADGE_URL="https://img.shields.io/github/deployments/${{ github.repository }}/github-pages?label=docs&logo=github"
            BADGE_LINK="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            
            if grep -q "docs-deployment-badge" README.md; then
              sed -i "s|!\[Documentation\].*|[![Documentation](${BADGE_URL})](${BADGE_LINK})|" README.md
            fi
          fi

  # Notify on completion
  notify:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    needs: [build, deploy, update-badges]
    if: always()
    
    steps:
      - name: 📝 Create summary
        run: |
          echo "## 📚 Documentation Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Badges | ${{ needs.update-badges.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build.outputs.site-changed }}" == "true" ]]; then
            echo "✅ Documentation was built and deployed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View Documentation](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No documentation changes detected - deployment skipped" >> $GITHUB_STEP_SUMMARY
          fi