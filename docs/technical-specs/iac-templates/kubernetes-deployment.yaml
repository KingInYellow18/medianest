# MediaNest Kubernetes Deployment Configuration
# Service Mesh and Container Orchestration Strategy

apiVersion: v1
kind: Namespace
metadata:
  name: medianest
  labels:
    name: medianest
    environment: production
    app: medianest

---
# Resource Quotas for the MediaNest namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: medianest-quota
  namespace: medianest
spec:
  hard:
    requests.cpu: "20"
    requests.memory: 64Gi
    limits.cpu: "40"
    limits.memory: 128Gi
    persistentvolumeclaims: "20"
    pods: "50"
    services: "10"
    secrets: "20"
    configmaps: "20"

---
# Limit ranges for containers
apiVersion: v1
kind: LimitRange
metadata:
  name: medianest-limits
  namespace: medianest
spec:
  limits:
  - default:
      cpu: "1"
      memory: "2Gi"
    defaultRequest:
      cpu: "500m"
      memory: "1Gi"
    type: Container
  - default:
      storage: "10Gi"
    type: PersistentVolumeClaim

---
# Network Policies for security isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: medianest-network-policy
  namespace: medianest
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: medianest
    - namespaceSelector:
        matchLabels:
          name: istio-system
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: medianest
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
  - to: []  # Allow external traffic
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: UDP
      port: 53

---
# PostgreSQL StatefulSet with enhanced security
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: medianest
  labels:
    app: postgres
    component: database
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
        version: "16"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: postgres
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
            add:
              - SETUID
              - SETGID
              - DAC_OVERRIDE
              - CHOWN
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --auth-host=scram-sha-256 --auth-local=scram-sha-256"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            cpu: "2"
            memory: "8Gi"
          limits:
            cpu: "4"
            memory: "16Gi"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: var-run-postgresql
          mountPath: /var/run/postgresql
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: var-run-postgresql
        emptyDir:
          sizeLimit: 50Mi
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# Redis Deployment with security hardening
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: medianest
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
        version: "7"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
            add:
              - SETUID
              - SETGID
        command:
        - redis-server
        - /etc/redis/redis.conf
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "1"
            memory: "4Gi"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
      - name: redis-config
        configMap:
          name: redis-config
      - name: tmp
        emptyDir:
          sizeLimit: 50Mi

---
# MediaNest Application Deployment with auto-scaling
apiVersion: apps/v1
kind: Deployment
metadata:
  name: medianest-app
  namespace: medianest
  labels:
    app: medianest-app
    component: application
spec:
  replicas: 2
  selector:
    matchLabels:
      app: medianest-app
  template:
    metadata:
      labels:
        app: medianest-app
        component: application
        version: "latest"
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: medianest-app
        image: medianest/app:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        env:
        - name: NODE_ENV
          value: "production"
        - name: NODE_OPTIONS
          value: "--max-old-space-size=1536"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: medianest-credentials
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: medianest-credentials
              key: redis-url
        - name: NEXTAUTH_URL
          value: "https://medianest.local"
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: medianest-credentials
              key: nextauth-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: medianest-credentials
              key: encryption-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: medianest-credentials
              key: jwt-secret
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 4000
          name: api
          protocol: TCP
        resources:
          requests:
            cpu: "1"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "2Gi"
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
        - name: run
          mountPath: /run
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 45
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: uploads-pvc
      - name: tmp
        emptyDir:
          sizeLimit: 200Mi
      - name: var-log
        emptyDir:
          sizeLimit: 100Mi
      - name: run
        emptyDir:
          sizeLimit: 50Mi

---
# Nginx Reverse Proxy Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: medianest
  labels:
    app: nginx
    component: proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        component: proxy
        version: "1.25"
    spec:
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
              - CHOWN
              - DAC_OVERRIDE
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        resources:
          requests:
            cpu: "100m"
            memory: "64Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: ssl-certs
        secret:
          secretName: ssl-certificates
      - name: var-cache-nginx
        emptyDir:
          sizeLimit: 100Mi
      - name: var-run
        emptyDir:
          sizeLimit: 50Mi
      - name: tmp
        emptyDir:
          sizeLimit: 50Mi

---
# Horizontal Pod Autoscaler for MediaNest App
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: medianest-app-hpa
  namespace: medianest
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: medianest-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Services for internal communication
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: medianest
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: medianest
  labels:
    app: postgres
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: medianest
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: medianest-app
  namespace: medianest
  labels:
    app: medianest-app
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  - port: 4000
    targetPort: 4000
    name: api
  selector:
    app: medianest-app

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: medianest
  labels:
    app: nginx
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    name: http
  - port: 443
    targetPort: 443
    name: https
  selector:
    app: nginx

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: medianest-ingress
  namespace: medianest
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - medianest.local
    - "*.medianest.local"
    secretName: medianest-tls
  rules:
  - host: medianest.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx
            port:
              number: 80

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: medianest
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: medianest
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs-storage
  resources:
    requests:
      storage: 100Gi

---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: medianest-app-pdb
  namespace: medianest
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: medianest-app

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-pdb
  namespace: medianest
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: nginx

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: medianest-monitoring
  namespace: medianest
  labels:
    app: medianest
spec:
  selector:
    matchLabels:
      app: medianest-app
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
  - port: api
    path: /metrics
    interval: 30s