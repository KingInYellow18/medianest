openapi: 3.0.3
info:
  title: MediaNest API
  description: |
    Advanced Media Management Platform API for handling media requests, user authentication, 
    and service integration. MediaNest provides Plex integration, YouTube downloading, 
    and comprehensive media management capabilities.
    
    ## Authentication
    The API uses JWT-based authentication with HTTP-only cookies for security. 
    Primary authentication is through Plex OAuth, with admin bootstrap available for initial setup.
    
    ## Rate Limiting
    Enhanced rate limiting is applied to authentication endpoints and other sensitive operations.
    Rate limit headers are included in responses.
    
    ## Caching
    Dashboard endpoints use intelligent caching (1-5 minutes) for optimal performance.
  version: 2.0.0
  contact:
    name: MediaNest Team
    url: https://docs.medianest.com
    email: support@medianest.com
  license:
    name: MIT
    url: https://github.com/medianest/medianest/blob/main/LICENSE

servers:
  - url: http://localhost:4000/api/v1
    description: Development server
  - url: https://api.medianest.com/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Media
    description: Media search and request management
  - name: Admin
    description: Administrative operations (admin role required)
  - name: Dashboard
    description: Dashboard statistics and service status
  - name: Health
    description: Health check and system monitoring

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the health status of the backend service
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "backend"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "2.0.0"
                  uptime:
                    type: number
                    description: Service uptime in seconds
                    example: 86400
                required:
                  - status
                  - service
                  - timestamp
                  - uptime

  /auth/plex/pin:
    post:
      tags:
        - Authentication
      summary: Create Plex OAuth PIN
      description: |
        Initiates Plex OAuth flow by creating a PIN that users can enter on plex.tv/link.
        Returns a QR code URL and polling information for checking authorization status.
      operationId: createPlexPin
      requestBody:
        description: Optional client identification
        content:
          application/json:
            schema:
              type: object
              properties:
                clientIdentifier:
                  type: string
                  format: uuid
                  description: Optional client identifier for enhanced security
                deviceName:
                  type: string
                  maxLength: 100
                  description: Optional device name for identification
            example:
              clientIdentifier: "550e8400-e29b-41d4-a716-446655440000"
              deviceName: "MediaNest Web App"
      responses:
        '200':
          description: PIN created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlexPinResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/plex/pin/{id}/status:
    get:
      tags:
        - Authentication
      summary: Check PIN authorization status
      description: |
        Polls the status of a Plex OAuth PIN to check if the user has authorized
        the application. Should be called every 5 seconds until authorized or expired.
      operationId: checkPlexPinStatus
      parameters:
        - name: id
          in: path
          required: true
          description: PIN ID returned from PIN creation
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: PIN status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlexPinStatusResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/plex:
    post:
      tags:
        - Authentication
      summary: Complete Plex OAuth flow
      description: |
        Completes the Plex OAuth authentication flow using an authorized PIN.
        Creates a user session and returns authentication token as HTTP-only cookie.
      operationId: completePlexOAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pinId:
                  type: integer
                  format: int64
                  description: Authorized PIN ID
              required:
                - pinId
            example:
              pinId: 123456789
      responses:
        '200':
          description: Authentication successful
          headers:
            Set-Cookie:
              description: HTTP-only authentication cookie
              schema:
                type: string
                example: "auth-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Lax; Max-Age=86400"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/admin:
    post:
      tags:
        - Authentication
      summary: Admin bootstrap login
      description: |
        Creates the first admin user for initial system setup. Only works when no users exist.
        Requires strong password validation.
      operationId: adminBootstrap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Admin email address
                password:
                  type: string
                  minLength: 8
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]'
                  description: Strong password with uppercase, lowercase, number, and special character
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: Admin display name
                confirmPassword:
                  type: string
                  description: Password confirmation (must match password)
              required:
                - email
                - password
                - name
                - confirmPassword
            example:
              email: "admin@medianest.com"
              password: "SecurePassword123!"
              name: "Administrator"
              confirmPassword: "SecurePassword123!"
      responses:
        '200':
          description: Admin user created successfully
          headers:
            Set-Cookie:
              description: HTTP-only authentication cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Admin already exists or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Admin user already exists. Use regular login."
                error: "ADMIN_EXISTS"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Password-based login
      description: |
        Authenticates users with email and password (primarily for admin users).
        Enhanced rate limiting applied to prevent brute force attacks.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                password:
                  type: string
                  minLength: 1
                  description: User password
                rememberMe:
                  type: boolean
                  default: false
                  description: Extend session duration to 30 days
              required:
                - email
                - password
            example:
              email: "admin@medianest.com"
              password: "SecurePassword123!"
              rememberMe: true
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: HTTP-only authentication cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: User cannot login with password (use Plex auth)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "This user cannot login with password. Please use Plex authentication."
                error: "NO_PASSWORD_SET"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: |
        Logs out the current user and optionally all user sessions.
        Clears authentication cookies and invalidates session tokens.
      operationId: logout
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                allSessions:
                  type: boolean
                  default: false
                  description: Logout from all devices/sessions
            example:
              allSessions: false
      responses:
        '200':
          description: Logout successful
          headers:
            Set-Cookie:
              description: Cleared authentication cookie
              schema:
                type: string
                example: "auth-token=; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  message: "Logged out successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/session:
    get:
      tags:
        - Authentication
      summary: Get current session info
      description: Returns information about the current authenticated session
      operationId: getSession
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: Session information retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      authenticated:
                        type: boolean
                        example: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change user password
      description: |
        Allows authenticated users to change their password.
        Requires current password verification for users with existing passwords.
      operationId: changePassword
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  minLength: 1
                  description: Current password for verification
                newPassword:
                  type: string
                  minLength: 8
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]'
                  description: New strong password
                confirmNewPassword:
                  type: string
                  description: New password confirmation
              required:
                - currentPassword
                - newPassword
                - confirmNewPassword
            example:
              currentPassword: "OldPassword123!"
              newPassword: "NewSecurePassword456!"
              confirmNewPassword: "NewSecurePassword456!"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  message: "Password changed successfully"
        '400':
          description: Validation error or password mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Current password is incorrect"
                error: "INVALID_CURRENT_PASSWORD"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/search:
    get:
      tags:
        - Media
      summary: Search for media
      description: |
        Search for media content in the database. Currently searches existing media requests.
        Future versions will integrate with external media APIs (TMDB, etc.).
      operationId: searchMedia
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
          example: "The Matrix"
        - name: type
          in: query
          description: Media type filter
          schema:
            type: string
            enum: [all, movie, tv, music]
            default: all
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of results per page (max 50)
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Search results returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/MediaRequest'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
                      query:
                        type: string
                        example: "The Matrix"
                      type:
                        type: string
                        example: "all"
        '400':
          description: Missing or invalid search query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Search query is required"
                error: "VALIDATION_ERROR"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/request:
    post:
      tags:
        - Media
      summary: Submit media request
      description: |
        Submit a request for new media content. Checks for duplicate requests
        and prevents multiple pending requests for the same content.
      operationId: createMediaRequest
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Media title
                mediaType:
                  type: string
                  enum: [movie, tv, music, other]
                  description: Type of media being requested
                tmdbId:
                  type: string
                  description: Optional TMDB database ID
              required:
                - title
                - mediaType
            example:
              title: "The Matrix Resurrections"
              mediaType: "movie"
              tmdbId: "624860"
      responses:
        '201':
          description: Media request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      request:
                        $ref: '#/components/schemas/MediaRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Duplicate request exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Similar request already exists"
                error: "DUPLICATE_REQUEST"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/requests:
    get:
      tags:
        - Media
      summary: Get user's media requests
      description: Retrieve the current user's media requests with optional status filtering
      operationId: getUserMediaRequests
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by request status
          schema:
            type: string
            enum: [pending, processing, completed, cancelled]
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of results per page (max 50)
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: User's media requests retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      requests:
                        type: array
                        items:
                          $ref: '#/components/schemas/MediaRequest'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Retrieve a list of all users in the system (admin only)
      operationId: getAllUsers
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{userId}/role:
    patch:
      tags:
        - Admin
      summary: Update user role
      description: Update a user's role (admin only)
      operationId: updateUserRole
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [admin, user]
                  description: New user role
              required:
                - role
            example:
              role: "admin"
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{userId}:
    delete:
      tags:
        - Admin
      summary: Delete user
      description: Delete a user from the system (admin only)
      operationId: deleteUser
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID to delete
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  message: "User deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/stats:
    get:
      tags:
        - Admin
      summary: Get system statistics
      description: Retrieve system-wide statistics and metrics (admin only)
      operationId: getSystemStats
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: System statistics retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: integer
                        description: Total number of users
                        example: 42
                      requests:
                        type: integer
                        description: Total number of media requests
                        example: 156
                      services:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/stats:
    get:
      tags:
        - Dashboard
      summary: Get dashboard statistics
      description: |
        Retrieve dashboard statistics for the current user.
        Cached for 5 minutes for optimal performance.
      operationId: getDashboardStats
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: Dashboard statistics retrieved
          headers:
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "private, max-age=300"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      recentRequests:
                        type: integer
                        description: Number of recent media requests
                        example: 5
                      pendingRequests:
                        type: integer
                        description: Number of pending requests
                        example: 2
                      completedRequests:
                        type: integer
                        description: Number of completed requests
                        example: 18
                      serviceStatus:
                        type: string
                        enum: [online, degraded, offline]
                        example: "online"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/status:
    get:
      tags:
        - Dashboard
      summary: Get service statuses
      description: |
        Retrieve the status of all integrated services.
        Cached for 1 minute for real-time monitoring.
      operationId: getServiceStatuses
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: Service statuses retrieved
          headers:
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "private, max-age=60"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      services:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceStatus'
                      summary:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 4
                          online:
                            type: integer
                            example: 4
                          offline:
                            type: integer
                            example: 0
                          degraded:
                            type: integer
                            example: 0
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services/status:
    get:
      tags:
        - Dashboard
      summary: Get service monitoring status
      description: Returns status of various services for monitoring purposes
      operationId: getServicesStatus
      responses:
        '200':
          description: Service statuses retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      services:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceStatus'
                      timestamp:
                        type: string
                        format: date-time
                      summary:
                        type: object
                        properties:
                          total:
                            type: integer
                          online:
                            type: integer
                          offline:
                            type: integer
                          degraded:
                            type: integer
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          nullable: true
          description: User display name
        role:
          type: string
          enum: [admin, user]
          description: User role
        plexUsername:
          type: string
          nullable: true
          description: Plex username if authenticated via Plex
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          description: Last login timestamp
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        status:
          type: string
          enum: [active, inactive, suspended]
          description: Account status
      required:
        - id
        - email
        - role
        - createdAt
        - status
      example:
        id: "123e4567-e89b-12d3-a456-426614174000"
        email: "user@example.com"
        name: "John Doe"
        role: "user"
        plexUsername: "johndoe"
        lastLoginAt: "2024-01-15T10:30:00Z"
        createdAt: "2024-01-01T00:00:00Z"
        status: "active"

    MediaRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique request identifier
        userId:
          type: string
          format: uuid
          description: ID of user who made the request
        title:
          type: string
          description: Media title
        mediaType:
          type: string
          enum: [movie, tv, music, other]
          description: Type of media requested
        tmdbId:
          type: string
          nullable: true
          description: TMDB database ID if available
        status:
          type: string
          enum: [pending, processing, completed, cancelled]
          description: Request status
        overseerrId:
          type: string
          nullable: true
          description: Overseerr integration ID
        createdAt:
          type: string
          format: date-time
          description: Request creation timestamp
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: Request completion timestamp
        user:
          $ref: '#/components/schemas/User'
      required:
        - id
        - userId
        - title
        - mediaType
        - status
        - createdAt
      example:
        id: "456e7890-e89b-12d3-a456-426614174001"
        userId: "123e4567-e89b-12d3-a456-426614174000"
        title: "The Matrix Resurrections"
        mediaType: "movie"
        tmdbId: "624860"
        status: "pending"
        overseerrId: null
        createdAt: "2024-01-15T10:30:00Z"
        completedAt: null

    ServiceStatus:
      type: object
      properties:
        name:
          type: string
          description: Service name
        status:
          type: string
          enum: [online, offline, degraded]
          description: Service status
        responseTime:
          type: integer
          description: Response time in milliseconds
        lastCheck:
          type: string
          format: date-time
          description: Last health check timestamp
        uptimePercentage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Service uptime percentage
      required:
        - name
        - status
        - responseTime
        - lastCheck
      example:
        name: "Plex API"
        status: "online"
        responseTime: 120
        lastCheck: "2024-01-15T10:30:00Z"
        uptimePercentage: 99.5

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          maximum: 50
          description: Results per page
        total:
          type: integer
          minimum: 0
          description: Total number of results
        totalPages:
          type: integer
          minimum: 0
          description: Total number of pages
      required:
        - page
        - limit
        - total
        - totalPages
      example:
        page: 1
        limit: 20
        total: 156
        totalPages: 8

    PlexPinResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              format: int64
              description: PIN ID for status checking
            code:
              type: string
              description: PIN code to enter on Plex
            qrUrl:
              type: string
              format: uri
              description: QR code URL for easy access
            expiresIn:
              type: integer
              description: Expiration time in seconds
            expiresAt:
              type: string
              format: date-time
              description: Expiration timestamp
            pollInterval:
              type: integer
              description: Recommended polling interval in milliseconds
              example: 5000
          required:
            - id
            - code
            - qrUrl
            - expiresIn
            - expiresAt
            - pollInterval
      required:
        - success
        - data

    PlexPinStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              format: int64
              description: PIN ID
            authorized:
              type: boolean
              description: Whether the PIN has been authorized
            expiresAt:
              type: string
              format: date-time
              description: PIN expiration timestamp
          required:
            - id
            - authorized
            - expiresAt
      required:
        - success
        - data

    AuthenticationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              description: JWT authentication token
            isNewUser:
              type: boolean
              description: Whether this is a new user registration
              nullable: true
            message:
              type: string
              description: Success message
              nullable: true
          required:
            - user
            - token
      required:
        - success
        - data

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Success response data
      required:
        - success
        - data

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Human-readable error message
        error:
          type: string
          description: Machine-readable error code
        path:
          type: string
          description: Request path that caused the error
          nullable: true
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          nullable: true
      required:
        - success
        - message
      example:
        success: false
        message: "Authentication required"
        error: "AUTHENTICATION_REQUIRED"

  responses:
    BadRequest:
      description: Bad request - validation error or malformed request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Validation failed"
            error: "VALIDATION_ERROR"

    Unauthorized:
      description: Authentication required or invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Authentication required"
            error: "AUTHENTICATION_REQUIRED"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Admin access required"
            error: "INSUFFICIENT_PERMISSIONS"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Resource not found"
            error: "NOT_FOUND"

    RateLimited:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          description: Request limit per window
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Remaining requests in current window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Time when rate limit resets
          schema:
            type: integer
            format: unix-time
        Retry-After:
          description: Seconds to wait before retrying
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Rate limit exceeded"
            error: "RATE_LIMITED"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Internal server error"
            error: "INTERNAL_ERROR"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication via Authorization header

    cookieAuth:
      type: apiKey
      in: cookie
      name: auth-token
      description: HTTP-only cookie authentication (primary method)

  parameters:
    Page:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1

    Limit:
      name: limit
      in: query
      description: Number of results per page
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20

    UserId:
      name: userId
      in: path
      required: true
      description: User ID
      schema:
        type: string
        format: uuid

security:
  - bearerAuth: []
  - cookieAuth: []

externalDocs:
  description: MediaNest Documentation
  url: https://docs.medianest.com