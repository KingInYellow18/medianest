openapi: 3.0.3
info:
  title: MediaNest API
  description: |
    MediaNest is a comprehensive media management platform that integrates with Plex Media Server, 
    Overseerr, and YouTube-dl to provide unified media discovery, request management, and streaming capabilities.

    ## Features
    - **Plex OAuth Integration** - Secure authentication using Plex.tv accounts
    - **Media Discovery** - Search across multiple media sources and databases
    - **Request Management** - Submit, track, and manage media requests
    - **Real-time Updates** - WebSocket support for live status updates
    - **Admin Controls** - Comprehensive user and system management
    - **System Monitoring** - Health checks, metrics, and error reporting

    ## Authentication
    - JWT-based authentication using secure httpOnly cookies
    - Plex OAuth integration with PIN verification workflow
    - Automatic session management and token refresh
    - CSRF protection for state-changing operations

    ## Rate Limiting
    - General API: 100 requests per 15 minutes
    - Authentication: 10 requests per 15 minutes  
    - Rate limit headers included in all responses
    - Different limits for authenticated vs anonymous users

    ## Error Handling
    - Consistent error response format across all endpoints
    - Detailed error codes for programmatic handling
    - Comprehensive request validation with clear error messages
    - Stack traces available in development environment only
  version: 1.0.0
  contact:
    name: MediaNest API Support
    url: https://github.com/kinginyellow/medianest
    email: support@medianest.app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://medianest.app/terms

servers:
  - url: http://localhost:4000/api/v1
    description: Development server
  - url: https://staging-api.medianest.app/v1
    description: Staging server
  - url: https://api.medianest.app/v1
    description: Production server

tags:
  - name: Health
    description: System health and status monitoring
  - name: Authentication
    description: User authentication and session management
  - name: Dashboard
    description: User dashboard data and statistics
  - name: Media
    description: Media search, discovery, and request management
  - name: Plex
    description: Plex Media Server integration
  - name: Admin
    description: Administrative operations (admin only)
  - name: Services
    description: External service status and management
  - name: Error Reporting
    description: Client-side error tracking and reporting
  - name: CSRF
    description: Cross-Site Request Forgery protection
  - name: System
    description: System monitoring and resilience

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: JWT authentication token stored in secure httpOnly cookie

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination (1-based)
      schema:
        type: integer
        minimum: 1
        default: 1
    
    PageSizeParam:
      name: pageSize
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    SortByParam:
      name: sortBy
      in: query
      description: Field to sort by
      schema:
        type: string
        default: createdAt

    SortOrderParam:
      name: sortOrder
      in: query
      description: Sort order
      schema:
        type: string
        enum: [asc, desc]
        default: desc

  schemas:
    # Common Response Schemas
    SuccessResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Response data specific to the endpoint
        meta:
          type: object
          description: Optional metadata (pagination, timestamps, etc.)

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          $ref: '#/components/schemas/ApiError'

    ApiError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Machine-readable error code
          enum:
            - VALIDATION_ERROR
            - UNAUTHORIZED
            - ACCESS_DENIED
            - NOT_FOUND
            - DUPLICATE_RESOURCE
            - RATE_LIMIT_EXCEEDED
            - INTERNAL_ERROR
            - EXTERNAL_SERVICE_ERROR
            - PLEX_ERROR
            - PLEX_UNREACHABLE
            - PLEX_TIMEOUT
            - PIN_NOT_AUTHORIZED
            - DATABASE_ERROR
            - TOKEN_ERROR
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error context and details

    PaginatedResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            meta:
              type: object
              properties:
                totalCount:
                  type: integer
                  description: Total number of items
                totalPages:
                  type: integer
                  description: Total number of pages
                currentPage:
                  type: integer
                  description: Current page number
                timestamp:
                  type: string
                  format: date-time
                  description: Response timestamp

    # Authentication Schemas
    PlexPinRequest:
      type: object
      properties:
        clientName:
          type: string
          default: MediaNest
          description: Client name displayed in Plex authorization

    PlexPinResponse:
      type: object
      properties:
        id:
          type: string
          description: PIN identifier
        code:
          type: string
          description: PIN code for user authorization
        qrUrl:
          type: string
          format: uri
          description: QR code URL for easy mobile authorization
        expiresIn:
          type: integer
          description: PIN expiration time in seconds

    PlexVerifyRequest:
      type: object
      required:
        - pinId
      properties:
        pinId:
          type: string
          description: PIN identifier from PIN generation
        rememberMe:
          type: boolean
          default: false
          description: Generate long-lived refresh token

    AuthUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User unique identifier
        username:
          type: string
          description: User's Plex username
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: [user, admin]
          description: User role and permission level

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/AuthUser'
        token:
          type: string
          description: JWT access token
        rememberToken:
          type: string
          description: Long-lived refresh token (only if rememberMe=true)
        csrfToken:
          type: string
          description: CSRF protection token

    # Dashboard Schemas
    DashboardStats:
      type: object
      properties:
        totalRequests:
          type: integer
          description: Total media requests by user
        pendingRequests:
          type: integer
          description: Pending requests awaiting approval
        approvedRequests:
          type: integer
          description: Approved requests
        completedRequests:
          type: integer
          description: Completed/fulfilled requests
        recentActivity:
          type: array
          description: Recent user activity
          items:
            $ref: '#/components/schemas/ActivityItem'

    ActivityItem:
      type: object
      properties:
        type:
          type: string
          description: Activity type
        title:
          type: string
          description: Activity title
        timestamp:
          type: string
          format: date-time
          description: Activity timestamp

    ServiceStatus:
      type: object
      properties:
        name:
          type: string
          description: Service name
        status:
          type: string
          enum: [online, offline, degraded]
          description: Service status
        responseTime:
          type: integer
          description: Response time in milliseconds
        lastCheck:
          type: string
          format: date-time
          description: Last health check timestamp

    # Media Schemas
    MediaSearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          minLength: 1
          maxLength: 500
          description: Search query string
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number for pagination

    MediaItem:
      type: object
      properties:
        id:
          type: string
          description: Media item identifier
        tmdbId:
          type: string
          description: The Movie Database identifier
        title:
          type: string
          description: Media title
        type:
          type: string
          enum: [movie, tv]
          description: Media type
        year:
          type: integer
          description: Release year
        overview:
          type: string
          description: Media description/plot summary
        posterPath:
          type: string
          description: Poster image path
        backdropPath:
          type: string
          description: Backdrop image path
        genres:
          type: array
          items:
            type: string
          description: Media genres
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 10
          description: Media rating
        status:
          $ref: '#/components/schemas/MediaAvailabilityStatus'

    MediaAvailabilityStatus:
      type: object
      properties:
        inPlex:
          type: boolean
          description: Available in Plex library
        requested:
          type: boolean
          description: Already requested by user
        available:
          type: boolean
          description: Available for streaming

    MediaRequestRequest:
      type: object
      required:
        - title
        - mediaType
        - tmdbId
      properties:
        title:
          type: string
          description: Media title
        mediaType:
          type: string
          enum: [movie, tv]
          description: Type of media being requested
        tmdbId:
          type: string
          description: The Movie Database ID
        seasons:
          type: array
          items:
            type: integer
          description: Specific seasons to request (TV shows only)

    MediaRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Request identifier
        userId:
          type: string
          format: uuid
          description: User who made the request
        title:
          type: string
          description: Requested media title
        mediaType:
          type: string
          enum: [movie, tv]
          description: Type of requested media
        tmdbId:
          type: string
          description: The Movie Database ID
        overseerrId:
          type: string
          description: Overseerr request ID
        status:
          type: string
          enum: [pending, approved, declined, available, failed]
          description: Request status
        createdAt:
          type: string
          format: date-time
          description: Request creation timestamp
        completedAt:
          type: string
          format: date-time
          description: Request completion timestamp

    # Admin Schemas
    AdminUser:
      allOf:
        - $ref: '#/components/schemas/AuthUser'
        - type: object
          properties:
            plexId:
              type: string
              description: Plex user identifier
            createdAt:
              type: string
              format: date-time
              description: Account creation date
            lastLoginAt:
              type: string
              format: date-time
              description: Last login timestamp
            _count:
              type: object
              properties:
                mediaRequests:
                  type: integer
                  description: Number of media requests
                youtubeDownloads:
                  type: integer
                  description: Number of YouTube downloads

    UpdateUserRoleRequest:
      type: object
      required:
        - role
      properties:
        role:
          type: string
          enum: [user, admin]
          description: New user role

    AdminStats:
      type: object
      properties:
        users:
          type: object
          properties:
            total:
              type: integer
              description: Total registered users
            active:
              type: integer
              description: Active users (logged in within 30 days)
        requests:
          type: object
          properties:
            total:
              type: integer
              description: Total media requests
            pending:
              type: integer
              description: Pending requests
        downloads:
          type: object
          properties:
            total:
              type: integer
              description: Total downloads
            active:
              type: integer
              description: Active downloads

    # Service Configuration Schema
    ServiceConfig:
      type: object
      properties:
        id:
          type: integer
          description: Service configuration ID
        serviceName:
          type: string
          description: Service name
        serviceUrl:
          type: string
          format: uri
          description: Service URL
        enabled:
          type: boolean
          description: Service enabled status
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    # Error Reporting Schema
    ErrorReport:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ClientError'
        timestamp:
          type: string
          format: date-time
          description: Report timestamp
        userAgent:
          type: string
          description: User agent string
        url:
          type: string
          format: uri
          description: URL where error occurred

    ClientError:
      type: object
      required:
        - message
        - timestamp
        - level
      properties:
        timestamp:
          type: string
          format: date-time
          description: Error occurrence time
        level:
          type: string
          enum: [error, warning, info]
          description: Error severity level
        message:
          type: string
          description: Error message
        error:
          type: object
          properties:
            message:
              type: string
              description: Detailed error message
            stack:
              type: string
              description: Error stack trace
            code:
              type: string
              description: Error code
            statusCode:
              type: integer
              description: HTTP status code if applicable
        context:
          type: object
          description: Additional error context
          additionalProperties: true

    # CSRF Token Schema
    CsrfToken:
      type: object
      properties:
        csrfToken:
          type: string
          description: CSRF protection token

  responses:
    BadRequest:
      description: Bad request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validation_error:
              summary: Validation error
              value:
                success: false
                error:
                  code: VALIDATION_ERROR
                  message: Invalid request parameters
                  details:
                    field: query
                    message: Query parameter is required

    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            not_authenticated:
              summary: No authentication provided
              value:
                success: false
                error:
                  code: UNAUTHORIZED
                  message: Authentication required
            invalid_token:
              summary: Invalid authentication token
              value:
                success: false
                error:
                  code: UNAUTHORIZED
                  message: Invalid or expired authentication token

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            access_denied:
              summary: Access denied
              value:
                success: false
                error:
                  code: ACCESS_DENIED
                  message: Insufficient permissions for this operation

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            not_found:
              summary: Resource not found
              value:
                success: false
                error:
                  code: NOT_FOUND
                  message: The requested resource was not found

    Conflict:
      description: Conflict - Resource already exists or conflicting state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            already_exists:
              summary: Resource already exists
              value:
                success: false
                error:
                  code: DUPLICATE_RESOURCE
                  message: A resource with this identifier already exists

    RateLimitExceeded:
      description: Too many requests - Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Maximum requests allowed
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Requests remaining in window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when rate limit resets (Unix timestamp)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: RATE_LIMIT_EXCEEDED
              message: Rate limit exceeded. Try again later.

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: INTERNAL_ERROR
              message: An unexpected server error occurred

    ServiceUnavailable:
      description: Service temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            service_down:
              summary: Service temporarily down
              value:
                success: false
                error:
                  code: SERVICE_UNAVAILABLE
                  message: The service is temporarily unavailable
            external_service_error:
              summary: External service error
              value:
                success: false
                error:
                  code: EXTERNAL_SERVICE_ERROR
                  message: External service integration failed

paths:
  # Health Check Endpoints
  /health:
    get:
      tags:
        - Health
      summary: Simple health check
      description: Basic health check endpoint for load balancers and monitoring
      operationId: simpleHealthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  timestamp:
                    type: string
                    format: date-time

  # Authentication Endpoints
  /auth/plex/pin:
    post:
      tags:
        - Authentication
      summary: Generate Plex PIN
      description: Generate a PIN for Plex OAuth authentication flow
      operationId: generatePlexPin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlexPinRequest'
      responses:
        '200':
          description: PIN generated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PlexPinResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /auth/plex/verify:
    post:
      tags:
        - Authentication
      summary: Verify Plex PIN
      description: Verify Plex PIN and create authenticated session
      operationId: verifyPlexPin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlexVerifyRequest'
      responses:
        '200':
          description: Authentication successful
          headers:
            Set-Cookie:
              description: Authentication cookies
              schema:
                type: string
                example: token=jwt-token; HttpOnly; Secure; SameSite=Lax
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: End current user session and clear authentication cookies
      operationId: logout
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          headers:
            Set-Cookie:
              description: Clear authentication cookies
              schema:
                type: string
                example: token=; HttpOnly; Secure; SameSite=Lax; Max-Age=0
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: Logged out successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/session:
    get:
      tags:
        - Authentication
      summary: Get current session
      description: Retrieve current authenticated user session information
      operationId: getCurrentSession
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Session information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/AuthUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Dashboard Endpoints
  /dashboard/stats:
    get:
      tags:
        - Dashboard
      summary: Get dashboard statistics
      description: Retrieve user dashboard statistics and metrics
      operationId: getDashboardStats
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DashboardStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Media Endpoints
  /media/search:
    get:
      tags:
        - Media
      summary: Search media
      description: Search for media across integrated platforms and databases
      operationId: searchMedia
      security:
        - cookieAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 500
          description: Search query string
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          results:
                            type: array
                            items:
                              $ref: '#/components/schemas/MediaItem'
                      meta:
                        type: object
                        properties:
                          query:
                            type: string
                          page:
                            type: integer
                          totalPages:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/{mediaType}/{tmdbId}:
    get:
      tags:
        - Media
      summary: Get media details
      description: Retrieve detailed information about specific media item
      operationId: getMediaDetails
      security:
        - cookieAuth: []
      parameters:
        - name: mediaType
          in: path
          required: true
          schema:
            type: string
            enum: [movie, tv]
          description: Type of media
        - name: tmdbId
          in: path
          required: true
          schema:
            type: string
          description: The Movie Database ID
      responses:
        '200':
          description: Media details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MediaItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/request:
    post:
      tags:
        - Media
      summary: Request media
      description: Submit a new media request
      operationId: requestMedia
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaRequestRequest'
      responses:
        '201':
          description: Media request submitted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MediaRequest'
                      meta:
                        type: object
                        properties:
                          timestamp:
                            type: string
                            format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/requests:
    get:
      tags:
        - Media
      summary: Get user requests
      description: Retrieve current user's media requests with filtering and pagination
      operationId: getUserMediaRequests
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, declined, available, failed, all]
          description: Filter by request status
        - name: mediaType
          in: query
          schema:
            type: string
            enum: [movie, tv, all]
          description: Filter by media type
        - name: search
          in: query
          schema:
            type: string
          description: Search in request titles
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Filter requests from this date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Filter requests to this date
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: User media requests
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/MediaRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/requests/{requestId}:
    get:
      tags:
        - Media
      summary: Get request details
      description: Retrieve details of a specific media request
      operationId: getMediaRequestDetails
      security:
        - cookieAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Media request identifier
      responses:
        '200':
          description: Media request details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MediaRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Media
      summary: Delete request
      description: Delete a pending media request (user can only delete their own pending requests)
      operationId: deleteMediaRequest
      security:
        - cookieAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Media request identifier
      responses:
        '200':
          description: Request deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: Request deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Admin Endpoints
  /admin/users:
    get:
      tags:
        - Admin
      summary: List all users
      description: Retrieve all system users (admin only)
      operationId: listAllUsers
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: search
          in: query
          schema:
            type: string
          description: Search by username or email
        - name: role
          in: query
          schema:
            type: string
            enum: [user, admin, all]
            default: all
          description: Filter by user role
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/AdminUser'
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                              page:
                                type: integer
                              pageSize:
                                type: integer
                              totalPages:
                                type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{userId}/role:
    patch:
      tags:
        - Admin
      summary: Update user role
      description: Update a user's role (admin only)
      operationId: updateUserRole
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRoleRequest'
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{userId}:
    delete:
      tags:
        - Admin
      summary: Delete user
      description: Delete a user account (admin only, cannot delete own account)
      operationId: deleteUser
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User identifier
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/services:
    get:
      tags:
        - Admin
      summary: Get service configurations
      description: Retrieve all service configurations (admin only)
      operationId: getServiceConfigurations
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Service configurations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceConfig'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/requests:
    get:
      tags:
        - Admin
      summary: Get all requests
      description: Retrieve all media requests across all users (admin only)
      operationId: getAllMediaRequests
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, declined, available, failed, all]
          description: Filter by request status
        - name: mediaType
          in: query
          schema:
            type: string
            enum: [movie, tv, all]
          description: Filter by media type
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by specific user
        - name: search
          in: query
          schema:
            type: string
          description: Search in request titles
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Filter requests from this date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Filter requests to this date
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: All media requests
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/MediaRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/stats:
    get:
      tags:
        - Admin
      summary: Get system statistics
      description: Retrieve system-wide statistics and metrics (admin only)
      operationId: getSystemStatistics
      security:
        - cookieAuth: []
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AdminStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Services Endpoints
  /services/status:
    get:
      tags:
        - Services
      summary: Get service status
      description: Retrieve status of all integrated services
      operationId: getServiceStatus
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Service status information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          services:
                            type: array
                            items:
                              $ref: '#/components/schemas/ServiceStatus'
                          timestamp:
                            type: string
                            format: date-time
                          summary:
                            type: object
                            properties:
                              total:
                                type: integer
                              online:
                                type: integer
                              offline:
                                type: integer
                              degraded:
                                type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Error Reporting Endpoints
  /errors/report:
    post:
      tags:
        - Error Reporting
      summary: Report client errors
      description: Report client-side errors for monitoring and debugging
      operationId: reportClientErrors
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
      responses:
        '200':
          description: Errors reported successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          received:
                            type: integer
                            description: Number of errors received
                          correlationId:
                            type: string
                            description: Correlation ID for tracking
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # CSRF Protection Endpoints
  /csrf/token:
    get:
      tags:
        - CSRF
      summary: Get CSRF token
      description: Retrieve CSRF token for form submissions
      operationId: getCsrfToken
      responses:
        '200':
          description: CSRF token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CsrfToken'
        '500':
          $ref: '#/components/responses/InternalServerError'