# =============================================================================
# MediaNest Production Environment Template
# =============================================================================
# 
# This template includes ALL environment variables used by MediaNest in production.
# Copy this file to .env.production and update with your actual values.
#
# SECURITY NOTES:
# - Never commit the actual .env.production file to version control
# - Use Docker secrets for sensitive values in production (see docker-compose.prod.yml)
# - Generate secure random values for all secrets (commands provided)
# - Regularly rotate secrets and API keys
#
# =============================================================================

# =============================================================================
# DEPLOYMENT IDENTIFICATION
# =============================================================================
# Environment name (production, staging, development)
NODE_ENV=production

# Deployment metadata
DEPLOYMENT_ENVIRONMENT=production
DEPLOYMENT_REGION=us-east-1
DEPLOYMENT_CLUSTER=primary
VERSION=latest

# Build metadata (automatically set during CI/CD)
BUILD_DATE=
VCS_REF=

# =============================================================================
# DOMAIN & SSL CONFIGURATION
# =============================================================================
# Your domain name (required for SSL and proper routing)
DOMAIN_NAME=example.com

# Email for Let's Encrypt SSL certificate notifications
CERTBOT_EMAIL=admin@example.com

# SSL renewal settings
SSL_RENEWAL_INTERVAL=12h
SSL_KEY_SIZE=4096

# =============================================================================
# APPLICATION URLS
# =============================================================================
# External URLs (how users access your application)
FRONTEND_URL=https://example.com
BACKEND_URL=https://example.com/api
NEXTAUTH_URL=https://example.com

# Public API URLs (used by frontend)
NEXT_PUBLIC_API_URL=https://example.com/api
NEXT_PUBLIC_BACKEND_URL=https://example.com
NEXT_PUBLIC_WS_URL=wss://example.com/ws

# CORS configuration
CORS_ORIGIN=https://example.com

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# Backend server settings
PORT=4000
HOST=0.0.0.0
API_PREFIX=/api
API_VERSION=v1

# Frontend server settings
FRONTEND_PORT=3000
FRONTEND_HOST=0.0.0.0

# Worker/Queue settings
WORKER_CONCURRENCY=4
QUEUE_CONCURRENCY=2

# =============================================================================
# DATABASE CONFIGURATION (PostgreSQL)
# =============================================================================
# Production database URL with connection pooling
# Format: postgresql://username:password@host:port/database?options
DATABASE_URL=postgresql://medianest:CHANGE_ME_STRONG_PASSWORD@postgres:5432/medianest?connection_limit=50&pool_timeout=30

# Database pool settings
DATABASE_POOL_SIZE=50
DATABASE_TIMEOUT=30000
DATABASE_SSL_MODE=require

# Database performance settings (set in postgresql.conf)
POSTGRES_MAX_CONNECTIONS=100
POSTGRES_SHARED_BUFFERS=256MB
POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
POSTGRES_MAINTENANCE_WORK_MEM=64MB
POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
POSTGRES_WAL_BUFFERS=16MB
POSTGRES_DEFAULT_STATISTICS_TARGET=100
POSTGRES_RANDOM_PAGE_COST=1.1
POSTGRES_EFFECTIVE_IO_CONCURRENCY=200

# Database backup settings
DB_BACKUP_ENABLED=true
DB_BACKUP_SCHEDULE="0 2 * * *"
DB_BACKUP_RETENTION_DAYS=30
DB_BACKUP_COMPRESSION=gzip

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
# Redis connection URL with password
REDIS_URL=redis://:CHANGE_ME_STRONG_PASSWORD@redis:6379/0

# Alternative Redis configuration (if not using REDIS_URL)
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_ME_STRONG_PASSWORD
REDIS_USERNAME=
REDIS_DATABASE=0
REDIS_TLS=false

# Redis performance settings
REDIS_MAX_MEMORY=512mb
REDIS_MAX_MEMORY_POLICY=allkeys-lru
REDIS_PERSISTENCE=aof
REDIS_AOF_FSYNC=everysec

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================
# NextAuth.js configuration
# Generate with: openssl rand -hex 32
NEXTAUTH_SECRET=CHANGE_ME_GENERATE_WITH_OPENSSL_RAND_HEX_32

# JWT configuration
# Generate with: openssl rand -hex 32
JWT_SECRET=CHANGE_ME_GENERATE_WITH_OPENSSL_RAND_HEX_32
JWT_ISSUER=medianest
JWT_AUDIENCE=medianest-api
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=30d

# Encryption key for sensitive data (AES-256-GCM)
# Generate with: openssl rand -hex 32
ENCRYPTION_KEY=CHANGE_ME_GENERATE_WITH_OPENSSL_RAND_HEX_32

# Session configuration
SESSION_SECRET=CHANGE_ME_GENERATE_WITH_OPENSSL_RAND_HEX_32
SESSION_MAX_AGE=86400
SESSION_SECURE=true
SESSION_SAME_SITE=lax

# Security headers
ENABLE_HSTS=true
HSTS_MAX_AGE=31536000
ENABLE_CSP=true
CSP_REPORT_URI=/api/v1/security/csp-report

# =============================================================================
# PLEX OAUTH CONFIGURATION
# =============================================================================
# Plex OAuth settings
PLEX_CLIENT_ID=MediaNest
PLEX_CLIENT_SECRET=CHANGE_ME_YOUR_PLEX_CLIENT_SECRET
PLEX_CLIENT_IDENTIFIER=CHANGE_ME_GENERATE_UUID_V4
AUTH_PLEX_CLIENT_ID=MediaNest
AUTH_PLEX_CLIENT_SECRET=CHANGE_ME_YOUR_PLEX_CLIENT_SECRET

# Optional Plex server configuration
PLEX_SERVER_URL=
PLEX_SERVER_TOKEN=

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================
# API rate limiting
RATE_LIMIT_API_REQUESTS=100
RATE_LIMIT_API_WINDOW=60
RATE_LIMIT_API_SKIP_SUCCESSFUL_REQUESTS=false
RATE_LIMIT_API_SKIP_FAILED_REQUESTS=false

# YouTube rate limiting
RATE_LIMIT_YOUTUBE_REQUESTS=5
RATE_LIMIT_YOUTUBE_WINDOW=3600

# Media requests rate limiting
RATE_LIMIT_MEDIA_REQUESTS=20
RATE_LIMIT_MEDIA_WINDOW=3600

# Authentication rate limiting
RATE_LIMIT_AUTH_REQUESTS=5
RATE_LIMIT_AUTH_WINDOW=900

# =============================================================================
# YOUTUBE DOWNLOADER CONFIGURATION
# =============================================================================
# yt-dlp settings
YT_DLP_PATH=/usr/local/bin/yt-dlp
YOUTUBE_DOWNLOAD_PATH=/app/downloads
YOUTUBE_MAX_CONCURRENT_DOWNLOADS=3
YOUTUBE_RATE_LIMIT=5M
YOUTUBE_OUTPUT_FORMAT=best
YOUTUBE_SUBTITLE_LANGUAGES=en,es

# Plex YouTube library path
PLEX_YOUTUBE_LIBRARY_PATH=/data/youtube

# =============================================================================
# FILE STORAGE CONFIGURATION
# =============================================================================
# Upload settings
UPLOAD_PATH=/app/uploads
MAX_UPLOAD_SIZE=1073741824
ALLOWED_UPLOAD_EXTENSIONS=jpg,jpeg,png,gif,mp4,mkv,avi,pdf

# Storage paths
DATA_PATH=/app/data
LOG_PATH=/app/logs
BACKUP_PATH=/app/backups
TEMP_PATH=/app/temp

# =============================================================================
# EXTERNAL SERVICE ENDPOINTS
# =============================================================================
# Overseerr integration
OVERSEERR_URL=
OVERSEERR_API_KEY=

# Uptime Kuma monitoring
UPTIME_KUMA_URL=
UPTIME_KUMA_TOKEN=
UPTIME_KUMA_PUSH_URL=

# Additional Plex URL (if different from PLEX_SERVER_URL)
PLEX_URL=

# =============================================================================
# MONITORING & OBSERVABILITY
# =============================================================================
# Logging configuration
LOG_LEVEL=info
LOG_FORMAT=json
LOG_PRETTY=false
LOG_TIMESTAMP=true
LOG_COLORIZE=false

# Log retention
LOG_MAX_SIZE=100m
LOG_MAX_FILES=10
LOG_COMPRESS=true

# Health check settings
HEALTH_CHECK_INTERVAL=30000
HEALTH_CHECK_TIMEOUT=5000
HEALTH_CHECK_PATH=/api/health

# Metrics configuration
METRICS_ENABLED=true
METRICS_PORT=9090
METRICS_PATH=/metrics
METRICS_TOKEN=CHANGE_ME_GENERATE_SECURE_TOKEN
METRICS_ENDPOINT=

# Error reporting
ERROR_REPORTING_ENABLED=true
ERROR_REPORTING_ENDPOINT=https://example.com/api/v1/errors/report
ERROR_REPORTING_SAMPLE_RATE=1.0

# Performance monitoring
ENABLE_PERFORMANCE_MONITORING=true
PERFORMANCE_SAMPLE_RATE=0.1

# =============================================================================
# DOCKER & DEPLOYMENT CONFIGURATION
# =============================================================================
# Docker secrets (for production)
USE_DOCKER_SECRETS=true
DOCKER_SECRETS_PATH=/run/secrets

# Docker registry (if using private registry)
DOCKER_REGISTRY=
IMAGE_PREFIX=medianest

# Compose settings
COMPOSE_PROJECT_NAME=medianest
COMPOSE_HTTP_TIMEOUT=120

# =============================================================================
# ADMIN & MAINTENANCE
# =============================================================================
# Initial admin account (change immediately after first login!)
ADMIN_USERNAME=admin
ADMIN_PASSWORD=CHANGE_ME_STRONG_PASSWORD
ADMIN_EMAIL=admin@example.com

# Maintenance mode
MAINTENANCE_MODE=false
MAINTENANCE_MESSAGE="System maintenance in progress"

# =============================================================================
# FEATURE FLAGS
# =============================================================================
# Enable/disable features
ENABLE_REGISTRATION=false
ENABLE_OAUTH_REGISTRATION=true
ENABLE_EMAIL_VERIFICATION=true
ENABLE_TWO_FACTOR_AUTH=true
ENABLE_API_DOCUMENTATION=false
ENABLE_DEBUG_MODE=false

# Beta features
ENABLE_BETA_FEATURES=false
BETA_FEATURES_USERS=

# =============================================================================
# EMAIL CONFIGURATION (Optional)
# =============================================================================
# SMTP settings for email notifications
SMTP_HOST=
SMTP_PORT=587
SMTP_SECURE=true
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM_NAME=MediaNest
SMTP_FROM_EMAIL=noreply@example.com

# Email templates
EMAIL_TEMPLATE_PATH=/app/templates/email

# =============================================================================
# NOTIFICATION SETTINGS
# =============================================================================
# Webhook notifications
NOTIFICATION_ENABLED=true
NOTIFICATION_WEBHOOK=
NOTIFICATION_WEBHOOK_SECRET=

# Notification channels
NOTIFICATION_EMAIL=
NOTIFICATION_SLACK_WEBHOOK=
NOTIFICATION_DISCORD_WEBHOOK=

# =============================================================================
# BACKUP & RECOVERY
# =============================================================================
# Backup configuration
BACKUP_ENABLED=true
BACKUP_SCHEDULE="0 2 * * *"
BACKUP_RETENTION_DAYS=30
BACKUP_COMPRESSION=gzip
BACKUP_ENCRYPTION=true
BACKUP_ENCRYPTION_KEY=CHANGE_ME_GENERATE_SECURE_KEY

# Backup destinations
BACKUP_LOCAL_PATH=/app/backups
BACKUP_S3_BUCKET=
BACKUP_S3_REGION=
BACKUP_S3_ACCESS_KEY=
BACKUP_S3_SECRET_KEY=

# =============================================================================
# DEPLOYMENT AUTOMATION
# =============================================================================
# CI/CD settings
CI_PIPELINE_ID=
CI_COMMIT_SHA=
CI_COMMIT_TAG=
CI_ENVIRONMENT=

# Deployment strategies
DEPLOYMENT_STRATEGY=rolling
ROLLBACK_ON_FAILURE=true
KEEP_ROLLBACK_VERSIONS=3
ENABLE_BLUE_GREEN=false
ENABLE_CANARY=false

# =============================================================================
# FRONTEND-SPECIFIC VARIABLES
# =============================================================================
# Next.js public variables (exposed to browser)
NEXT_PUBLIC_APP_NAME=MediaNest
NEXT_PUBLIC_APP_VERSION=1.0.0

# Frontend features
NEXT_PUBLIC_ENABLE_LOGGING=false
NEXT_PUBLIC_LOG_LEVEL=error
NEXT_PUBLIC_ENABLE_PERFORMANCE_MONITORING=true
NEXT_PUBLIC_ENABLE_ERROR_TRACKING=true

# API configuration
NEXT_PUBLIC_API_TIMEOUT=30000
NEXT_PUBLIC_WS_RECONNECT_DELAY=1000
NEXT_PUBLIC_WS_MAX_RECONNECT_ATTEMPTS=5

# Optional external service URLs
NEXT_PUBLIC_PLEX_URL=
NEXT_PUBLIC_OVERSEERR_URL=
NEXT_PUBLIC_ERROR_REPORTING_ENDPOINT=

# =============================================================================
# RESOURCE LIMITS
# =============================================================================
# Container resource limits
NGINX_CPU_LIMIT=1
NGINX_MEMORY_LIMIT=256M
BACKEND_CPU_LIMIT=1.0
BACKEND_MEMORY_LIMIT=1G
FRONTEND_CPU_LIMIT=0.5
FRONTEND_MEMORY_LIMIT=512M
POSTGRES_CPU_LIMIT=1
POSTGRES_MEMORY_LIMIT=1G
REDIS_CPU_LIMIT=0.5
REDIS_MEMORY_LIMIT=512M

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
# Network settings
BACKEND_NETWORK_SUBNET=172.20.0.0/24
FRONTEND_NETWORK_SUBNET=172.21.0.0/24

# Proxy settings (if behind corporate proxy)
HTTP_PROXY=
HTTPS_PROXY=
NO_PROXY=localhost,127.0.0.1,postgres,redis

# =============================================================================
# DEVELOPMENT OVERRIDES (Remove in production)
# =============================================================================
# These should be removed or commented out in production
# DEV_DATABASE_URL=
# DEV_REDIS_URL=
# DEV_DISABLE_AUTH=false
# DEV_DISABLE_RATE_LIMIT=false

# =============================================================================
# NOTES FOR PRODUCTION DEPLOYMENT
# =============================================================================
# 1. Generate all secrets with the provided commands
# 2. Update all CHANGE_ME values with secure passwords
# 3. Set your actual domain name and email
# 4. Configure SSL certificates (automatic with Let's Encrypt)
# 5. Set up proper backup destinations
# 6. Configure monitoring endpoints
# 7. Review and adjust resource limits based on your infrastructure
# 8. Enable only the features you need
# 9. Set up proper logging and monitoring
# 10. Test thoroughly before going live
#
# For Docker secrets in production:
# - Create secret files in ./secrets/ directory
# - Use docker-compose.prod.yml which references these secrets
# - Never store secrets in environment variables in production
#
# Security checklist:
# [ ] All passwords are strong and unique
# [ ] All secrets are generated with cryptographically secure methods
# [ ] SSL/TLS is properly configured
# [ ] Rate limiting is enabled
# [ ] Security headers are configured
# [ ] Backup encryption is enabled
# [ ] Access logs are enabled and monitored
# [ ] Error reporting is configured
# [ ] Maintenance mode is tested
# [ ] Admin credentials are changed after first login